{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Bienvenid@s a Desarrollo de Interfaces","text":""},{"location":"#discord","title":"\ud83c\udf99\ufe0f Discord","text":"<p>Usaremos Discord como m\u00e9todo de comunicaci\u00f3n de informaci\u00f3n sobre la asignatura y este curso. Pod\u00e9is hablar por el chat cuando quer\u00e1is y usar los canales de estudio con audio por si quer\u00e9is estudiar en un mismo sitio.</p> <p>La invitaci\u00f3n al canal es la siguiente \u27a1\ufe0f https://discord.gg/C8yxabVTsS</p>"},{"location":"0%20-%20Fundamentos%20del%20Dise%C3%B1o%20de%20Interfaces%20Web/","title":"0\ufe0f\u20e3 Fundamentos del Dise\u00f1o de Interfaces Web","text":"<p>En este primer tema, nos adentraremos en los pilares b\u00e1sicos que sustentan el dise\u00f1o de interfaces web efectivas y atractivas. Comprenderemos la importancia de la comunicaci\u00f3n visual y c\u00f3mo los principios del dise\u00f1o, como el balance, el contraste, la alineaci\u00f3n y la proximidad, juegan un papel crucial en la creaci\u00f3n de interfaces que no solo sean funcionales, sino tambi\u00e9n est\u00e9ticamente agradables.</p> <p>Exploraremos c\u00f3mo la elecci\u00f3n adecuada de colores y tipograf\u00edas puede influir en la percepci\u00f3n y usabilidad de un sitio web, as\u00ed como las mejores pr\u00e1cticas para presentar la informaci\u00f3n de manera clara y ordenada. Adem\u00e1s, aprenderemos a definir y aplicar una gu\u00eda de estilo, una herramienta esencial para mantener la coherencia visual en cualquier proyecto web.</p> <p>Finalmente, nos familiarizaremos con la creaci\u00f3n y utilizaci\u00f3n de plantillas de dise\u00f1o, que nos permitir\u00e1n estandarizar procesos y garantizar que las interfaces mantengan un aspecto y funcionamiento homog\u00e9neo a lo largo de todo el desarrollo. Este tema sentar\u00e1 las bases para el resto del curso, brind\u00e1ndonos los conocimientos esenciales para abordar los retos del dise\u00f1o de interfaces con seguridad y creatividad.</p>"},{"location":"0%20-%20Fundamentos%20del%20Dise%C3%B1o%20de%20Interfaces%20Web/#01-la-importancia-de-la-comunicacion-visual-en-el-diseno-web","title":"0.1. La Importancia de la Comunicaci\u00f3n Visual en el Dise\u00f1o Web","text":"<p>El dise\u00f1o de interfaces web va m\u00e1s all\u00e1 de la simple creaci\u00f3n de p\u00e1ginas est\u00e9ticamente agradables; se trata de establecer una comunicaci\u00f3n efectiva entre el usuario y el sistema. La comunicaci\u00f3n visual es el medio por el cual los usuarios interpretan y navegan una aplicaci\u00f3n o sitio web. Un buen dise\u00f1o visual gu\u00eda al usuario, facilita la interacci\u00f3n y mejora la experiencia general.</p> <p>Elementos clave de la comunicaci\u00f3n visual</p> <p>La comunicaci\u00f3n visual es el proceso mediante el cual se transmite informaci\u00f3n e ideas a trav\u00e9s de elementos visuales. En el contexto del dise\u00f1o de interfaces web, los elementos visuales no solo decoran la p\u00e1gina, sino que juegan un rol esencial en guiar al usuario, influir en su percepci\u00f3n y mejorar su experiencia. A continuaci\u00f3n, se detallan los elementos clave de la comunicaci\u00f3n visual y su aplicaci\u00f3n en el dise\u00f1o web.</p>"},{"location":"0%20-%20Fundamentos%20del%20Dise%C3%B1o%20de%20Interfaces%20Web/#011-iconografia","title":"\u2728 0.1.1 Iconograf\u00eda","text":"<p>La iconograf\u00eda se refiere al uso de iconos o s\u00edmbolos gr\u00e1ficos para representar objetos, ideas, acciones o funciones de manera visual.</p> <p>En el dise\u00f1o de interfaces web, los iconos son herramientas poderosas que permiten transmitir informaci\u00f3n de forma r\u00e1pida, clara y sin la necesidad de utilizar texto extenso.</p> <p>Los iconos act\u00faan como atajos visuales, mejorando la experiencia de usuario al hacer que la navegaci\u00f3n sea m\u00e1s intuitiva y comprensible.</p>"},{"location":"0%20-%20Fundamentos%20del%20Dise%C3%B1o%20de%20Interfaces%20Web/#012-funciones-esenciales-en-el-diseno-web","title":"\ud83c\udf89 0.1.2 Funciones esenciales en el dise\u00f1o web:","text":"<ul> <li> <p>Simplificaci\u00f3n de la informaci\u00f3n</p> <p>Un icono bien dise\u00f1ado puede comunicar una idea o acci\u00f3n en cuesti\u00f3n de milisegundos, lo que reduce la necesidad de textos explicativos. Esto es especialmente \u00fatil en interfaces m\u00f3viles o en sitios con contenido limitado por espacio.</p> </li> <li> <p>Mejora de la navegaci\u00f3n</p> <p>Al representar acciones o funciones de manera visual, los iconos facilitan que los usuarios identifiquen r\u00e1pidamente los elementos interactivos de la p\u00e1gina, como men\u00fas, botones de acciones y enlaces.</p> </li> <li> <p>Refuerzo de la identidad visual</p> <p>El uso de iconos personalizados alineados con la identidad visual de una marca puede ayudar a crear un dise\u00f1o coherente y distintivo, haciendo que la web sea m\u00e1s memorable.</p> </li> <li> <p>Estandarizaci\u00f3n y familiaridad</p> <p>Los iconos que representan funciones comunes (como el carrito de compras, la lupa de b\u00fasqueda, o la casa para la p\u00e1gina de inicio) son ya entendidos de forma universal por la mayor\u00eda de los usuarios. Esto facilita la navegaci\u00f3n y reduce la curva de aprendizaje.</p> </li> </ul> <p>El ejemplo de DON'T WALK</p> <p></p> <p>En EEUU los sem\u00e1foros no usaban iconos o s\u00edmbolos para decirle al peat\u00f3n cu\u00e1ndo pod\u00eda cruzar la calle, simplemente mostraban el texto \"DONT WALK\" en rojo para que los peatones no cruzaban la calle o \"WALK\" para que la cruzaran.</p>"},{"location":"0%20-%20Fundamentos%20del%20Dise%C3%B1o%20de%20Interfaces%20Web/#013-tipos-de-iconos-y-usos-comunes","title":"\ud83d\udca2 0.1.3 Tipos de iconos y usos comunes","text":"<p>Existen diferentes tipos de iconos en el dise\u00f1o de interfaces web, cada uno con funciones y aplicaciones espec\u00edficas:</p> <p>\ud83c\udf10 <code>Iconos de navegaci\u00f3n</code>  Estos iconos permiten al usuario moverse por la interfaz. Ejemplos comunes son el men\u00fa hamburguesa (tres l\u00edneas horizontales para desplegar un men\u00fa), la flecha de regreso, o la casa que lleva a la p\u00e1gina principal.</p> <p>\ud83c\udfc3\u200d\u2640\ufe0f\u200d\u27a1\ufe0f <code>Iconos de acci\u00f3n</code>  Estos iconos indican al usuario que puede realizar una acci\u00f3n. Por ejemplo, el icono de lupa que permite buscar informaci\u00f3n, el carrito de compras que a\u00f1ade productos, o el icono de descarga.</p> <p>\u2705 <code>Iconos de estado</code> Informan sobre el estado actual de un proceso. Por ejemplo, un check puede se\u00f1alar que una tarea est\u00e1 completada, mientras que un reloj indica que algo est\u00e1 en progreso o pendiente.</p> <p>\ud83d\udedc <code>Iconos de redes sociales</code>  Los iconos que representan plataformas como Facebook, Twitter o Instagram son elementos recurrentes en muchas webs y facilitan la vinculaci\u00f3n de contenido con perfiles o cuentas en redes.</p>"},{"location":"0%20-%20Fundamentos%20del%20Dise%C3%B1o%20de%20Interfaces%20Web/#014-buenas-practicas-en-el-uso-de-iconos","title":"\ud83d\udcd3 0.1.4 Buenas Pr\u00e1cticas en el Uso de iconos","text":"<p>Para que los iconos en una interfaz web sean efectivos, es necesario tener en cuenta varias buenas pr\u00e1cticas en su dise\u00f1o y aplicaci\u00f3n</p> <ul> <li> <p>Claridad y simplicidad: Los iconos deben ser f\u00e1ciles de interpretar, incluso en tama\u00f1os peque\u00f1os. Un icono demasiado detallado puede resultar confuso. La simplicidad es clave para que el usuario comprenda r\u00e1pidamente su funci\u00f3n.</p> </li> <li> <p>Consistencia visual: Todos los iconos de una interfaz deben compartir un estilo coherente, en t\u00e9rminos de l\u00edneas, grosor, tama\u00f1o y color. Esta consistencia asegura que el dise\u00f1o se vea uniforme y profesional.</p> </li> <li> <p>Compatibilidad cultural: Algunos iconos tienen significados diferentes en distintos contextos culturales. Por ejemplo, un icono que simboliza \"OK\" en una cultura puede tener un significado negativo en otra. Es importante considerar las variaciones culturales si la web est\u00e1 dirigida a un p\u00fablico global.</p> </li> <li> <p>Compatibilidad t\u00e9cnica: Los iconos deben renderizarse correctamente en todos los navegadores y dispositivos. Esto incluye tanto las versiones de escritorio como las m\u00f3viles. Los iconos en formato SVG (Scalable Vector Graphics) son una opci\u00f3n popular ya que son escalables sin perder calidad.</p> </li> <li> <p>Accesibilidad: Es fundamental acompa\u00f1ar los iconos con texto alternativo (atributo alt) o etiquetas ARIA para asegurar que los usuarios con discapacidades visuales, que utilicen lectores de pantalla, puedan entender su funci\u00f3n.</p> </li> </ul>"},{"location":"0%20-%20Fundamentos%20del%20Dise%C3%B1o%20de%20Interfaces%20Web/#015-psicologia-y-simbologia-en-la-iconografia","title":"\ud83e\udd2f 0.1.5 Psicolog\u00eda y Simbolog\u00eda en la Iconograf\u00eda","text":"<p>Los iconos, al igual que otros elementos visuales, est\u00e1n profundamente conectados con la psicolog\u00eda del usuario. La interpretaci\u00f3n de un s\u00edmbolo no solo depende de su apariencia, sino tambi\u00e9n de las asociaciones que las personas tienen con \u00e9l. A lo largo del tiempo, algunos iconos se han convertido en universales y sus significados son pr\u00e1cticamente autom\u00e1ticos. Por ejemplo, una papelera es reconocida a nivel global como un s\u00edmbolo para eliminar o descartar contenido, mientras que una flecha hacia abajo a menudo se interpreta como una opci\u00f3n para descargar archivos o desplegar men\u00fas.</p> <p>El uso de estos s\u00edmbolos conocidos en el dise\u00f1o web tiene m\u00faltiples beneficios. En primer lugar, reduce la curva de aprendizaje para los usuarios, ya que no necesitan interpretar nuevos signos o leer explicaciones detalladas para entender una acci\u00f3n. Este conocimiento previo hace que la interacci\u00f3n con la interfaz sea m\u00e1s intuitiva y eficiente. Adem\u00e1s, los s\u00edmbolos universales como estos fomentan la usabilidad, ya que el usuario puede anticipar la funci\u00f3n del icono sin esfuerzo, mejorando as\u00ed su experiencia en la p\u00e1gina.</p> <p>Sin embargo, el uso de iconograf\u00eda tambi\u00e9n debe ir acompa\u00f1ado de una consideraci\u00f3n cultural y del contexto en el que se va a aplicar. En algunos casos, un icono que es evidente para un grupo de usuarios puede no tener el mismo significado para otro grupo. Por lo tanto, es recomendable realizar pruebas de usuario para asegurarse de que los iconos sean interpretados correctamente en el p\u00fablico objetivo.</p>"},{"location":"0%20-%20Fundamentos%20del%20Dise%C3%B1o%20de%20Interfaces%20Web/#016-herramientas-y-tecnologias-para-la-creacion-de-iconos","title":"\ud83e\uddf0 0.1.6 Herramientas y Tecnolog\u00edas para la Creaci\u00f3n de Iconos","text":"<p>Existen varias herramientas que permiten dise\u00f1ar y aplicar iconograf\u00eda en el dise\u00f1o web de forma eficiente:</p> <ul> <li> <p><code>Iconos predise\u00f1ados</code>  Herramientas como Font Awesome, Material Icons o Iconmonstr proporcionan bibliotecas de iconos predise\u00f1ados que pueden ser f\u00e1cilmente integrados en proyectos web mediante c\u00f3digo HTML y CSS.</p> </li> <li> <p><code>Dise\u00f1o personalizado</code>  Para un enfoque m\u00e1s personalizado, herramientas como Adobe Illustrator, Sketch o Figma permiten crear iconos vectoriales \u00fanicos que pueden alinearse perfectamente con la identidad de la marca.</p> </li> <li> <p><code>Iconos en formato SVG</code>  El formato SVG es ideal para usar en la web, ya que estos archivos son ligeros y escalables, lo que garantiza una apariencia n\u00edtida en cualquier tama\u00f1o de pantalla. Adem\u00e1s, los iconos SVG pueden ser estilizados directamente con CSS, lo que permite cambiar colores o tama\u00f1os seg\u00fan sea necesario.</p> </li> </ul> <p>\u00c1rea de recursos</p> <p>Font Awesome | Material Icons | Iconmonstr | Sketch | Figma</p>"},{"location":"0%20-%20Fundamentos%20del%20Dise%C3%B1o%20de%20Interfaces%20Web/#02-los-colores","title":"\ud83c\udf08 0.2 Los Colores","text":"<p>El color es uno de los elementos m\u00e1s poderosos en el dise\u00f1o de interfaces web, ya que tiene la capacidad de influir en la percepci\u00f3n, las emociones y el comportamiento de los usuarios.</p> <p>Una paleta de colores bien seleccionada no solo mejora la est\u00e9tica de la p\u00e1gina, sino que tambi\u00e9n facilita la navegaci\u00f3n, refuerza la identidad de marca y establece una jerarqu\u00eda visual clara.</p> <p>Adem\u00e1s, el uso adecuado del color puede mejorar la accesibilidad y la usabilidad de la interfaz, permitiendo que la informaci\u00f3n sea m\u00e1s comprensible y f\u00e1cil de seguir. En este apartado, exploraremos la importancia de los colores en el dise\u00f1o web, c\u00f3mo seleccionarlos de manera efectiva y c\u00f3mo aplicarlos para mejorar la experiencia del usuario.</p> <p>El uso del color en el dise\u00f1o de interfaces web va mucho m\u00e1s all\u00e1 de un simple elemento decorativo. El color es una herramienta clave para transmitir sensaciones, guiar la navegaci\u00f3n del usuario, crear contrastes que mejoren la legibilidad y, en \u00faltima instancia, generar una experiencia m\u00e1s atractiva y funcional. La selecci\u00f3n adecuada de una paleta de colores no solo afecta la est\u00e9tica de una web, sino tambi\u00e9n la forma en la que los usuarios interact\u00faan con ella, perciben el contenido y toman decisiones.</p> <p>En el dise\u00f1o web, el color se emplea de diversas formas: para dar vida a los elementos visuales, generar coherencia en la identidad de marca, y destacar o agrupar informaci\u00f3n. Adem\u00e1s, la correcta elecci\u00f3n de colores puede impactar directamente en la accesibilidad del sitio, haciendo que este sea m\u00e1s inclusivo para personas con discapacidades visuales o daltonismo.</p>"},{"location":"0%20-%20Fundamentos%20del%20Dise%C3%B1o%20de%20Interfaces%20Web/#021-psicologia-del-color","title":"\ud83d\udde3\ufe0f 0.2.1 Psicolog\u00eda del Color","text":"<p>Uno de los aspectos m\u00e1s importantes del uso del color en el dise\u00f1o web es su capacidad para evocar emociones y transmitir mensajes de manera impl\u00edcita. La psicolog\u00eda del color estudia c\u00f3mo los colores afectan las emociones y comportamientos humanos, algo que los dise\u00f1adores web deben tener en cuenta al seleccionar la paleta de una interfaz.</p> <p>Cada color puede generar diferentes respuestas emocionales, y su elecci\u00f3n debe alinearse con los objetivos del sitio web y la marca.</p> <ul> <li> <p>\u2b55 <code>Rojo</code> Un color asociado con la pasi\u00f3n, la energ\u00eda y la urgencia. Suele utilizarse para crear sensaci\u00f3n de urgencia (como en ofertas o promociones) o para llamar la atenci\u00f3n sobre elementos importantes, aunque en exceso puede generar sensaci\u00f3n de agresividad.</p> </li> <li> <p>\ud83d\udd37 <code>Azul</code> Se asocia con la calma, la confianza y la profesionalidad. Es un color muy utilizado en sitios web corporativos o de servicios financieros, ya que transmite estabilidad y seguridad.</p> </li> <li> <p>\ud83d\udc9a <code>Verde</code> Evoca asociaciones con la naturaleza, el crecimiento y la salud. Suele emplearse en sitios relacionados con el bienestar, el medio ambiente o la sostenibilidad. Tambi\u00e9n est\u00e1 relacionado con conceptos positivos como el \u00e9xito o la aprobaci\u00f3n.</p> </li> <li> <p>\ud83d\udc9b <code>Amarillo</code> El amarillo es un color brillante y optimista que atrae la atenci\u00f3n, aunque en exceso puede resultar abrumador. Se utiliza para generar sensaciones de alegr\u00eda o para resaltar avisos o advertencias.</p> </li> <li> <p>\u26ab <code>Negro</code> Representa elegancia, sofisticaci\u00f3n y modernidad. Es com\u00fan en marcas de lujo o sitios que buscan proyectar una imagen profesional y seria.</p> </li> </ul> <p>Diferentes casos de uso</p> <p>Es importante considerar que la psicolog\u00eda del color puede variar culturalmente. Por ejemplo, en algunos pa\u00edses, el blanco est\u00e1 asociado con la pureza y la paz, mientras que en otros puede tener connotaciones de luto o tristeza. Por lo tanto, los dise\u00f1adores deben investigar las interpretaciones culturales del color en su p\u00fablico objetivo.</p>"},{"location":"0%20-%20Fundamentos%20del%20Dise%C3%B1o%20de%20Interfaces%20Web/#022-teoria-del-color-y-paletas-de-colores","title":"\ud83d\udd8a\ufe0f 0.2.2 Teor\u00eda del Color y Paletas de Colores","text":"<p>La teor\u00eda del color es un conjunto de reglas que describe c\u00f3mo los colores interact\u00faan entre s\u00ed. Esta teor\u00eda ayuda a los dise\u00f1adores a seleccionar combinaciones que sean visualmente arm\u00f3nicas y que transmitan el mensaje adecuado.</p> <p>Existen varios esquemas crom\u00e1ticos utilizados com\u00fanmente en el dise\u00f1o de interfaces web</p> <ul> <li> <p><code>Colores complementarios</code> Son colores opuestos en el c\u00edrculo crom\u00e1tico (como el azul y el naranja, o el rojo y el verde). Estas combinaciones generan un alto contraste, lo que puede ser \u00fatil para destacar elementos clave, como botones de llamada a la acci\u00f3n (CTA), aunque deben utilizarse con moderaci\u00f3n para no abrumar al usuario.</p> </li> <li> <p><code>Colores an\u00e1logos</code> Son aquellos que est\u00e1n pr\u00f3ximos en el c\u00edrculo crom\u00e1tico (como el azul, el verde y el cian). Estas combinaciones tienden a ser armoniosas y relajantes, lo que las hace adecuadas para interfaces que buscan una apariencia suave y equilibrada.</p> </li> <li> <p><code>Colores tri\u00e1dicos</code> Son tres colores equidistantes en el c\u00edrculo crom\u00e1tico (por ejemplo, rojo, amarillo y azul). Este esquema ofrece contraste y balance, aunque es m\u00e1s complicado de implementar sin generar caos visual, por lo que debe usarse con cuidado.</p> </li> <li> <p><code>Monocrom\u00e1tico</code> Utiliza distintas tonalidades, saturaciones y valores de un solo color. Este esquema es elegante y sobrio, y es com\u00fan en sitios web minimalistas o que buscan una est\u00e9tica moderna y uniforme.</p> </li> </ul> <p>Consejo</p> <p>La selecci\u00f3n de una paleta de colores debe considerar no solo la est\u00e9tica, sino tambi\u00e9n la legibilidad y el contraste. Los colores deben usarse para guiar al usuario por la p\u00e1gina, ayud\u00e1ndolo a distinguir entre diferentes tipos de contenido, botones de acci\u00f3n y secciones. El uso del color para jerarquizar la informaci\u00f3n tambi\u00e9n contribuye a una experiencia de usuario m\u00e1s fluida.</p>"},{"location":"0%20-%20Fundamentos%20del%20Dise%C3%B1o%20de%20Interfaces%20Web/#023-contraste-y-legibilidad","title":"\ud83c\udf04 0.2.3 Contraste y Legibilidad","text":"<p>El contraste entre el fondo y el texto o los elementos interactivos es crucial para la legibilidad de una web. Un buen contraste facilita que los usuarios lean el contenido sin esfuerzo y que distingan f\u00e1cilmente los elementos de la interfaz. </p> <p>Un ejemplo com\u00fan es el texto negro sobre fondo blanco, que proporciona el mayor nivel de contraste posible. Cuando los colores utilizados no generan suficiente contraste, puede volverse dif\u00edcil para el usuario leer el texto o identificar las acciones que puede realizar.</p> <p>Adem\u00e1s, una mala elecci\u00f3n de contraste puede afectar gravemente la accesibilidad para personas con problemas visuales, como aquellos con baja visi\u00f3n o daltonismo.</p> <p>Para asegurarse de que los niveles de contraste sean adecuados, existen herramientas como WCAG Contrast Checker, que permite verificar si los colores cumplen con las pautas de accesibilidad establecidas por la Web Content Accessibility Guidelines (WCAG).</p> <p>Ideas para elegir una buena paleta de colores</p> <p>En la red social Pinterest pod\u00e9is encontrar muy buenos ejemplos de elecci\u00f3n de colores para una p\u00e1gina web. Pod\u00e9is probar a buscar con el t\u00e9rmino Web Palette Colors. Otra web bastante interesante para el tema de los colores en una web es \ud83d\udc96 Colour Lovers</p>"},{"location":"0%20-%20Fundamentos%20del%20Dise%C3%B1o%20de%20Interfaces%20Web/#024-uso-del-color-para-la-navegacion-y-jerarquia-visual","title":"\ud83c\udf6d 0.2.4 Uso del Color para la Navegaci\u00f3n y Jerarqu\u00eda Visual","text":"<p>El color tambi\u00e9n desempe\u00f1a un papel crucial en la organizaci\u00f3n y presentaci\u00f3n de la informaci\u00f3n. A trav\u00e9s del color, los dise\u00f1adores pueden establecer una jerarqu\u00eda visual clara, lo que ayuda al usuario a identificar la importancia de diferentes elementos de la p\u00e1gina. Esto se puede lograr mediante varios enfoques:</p> <p>\ud83e\ude87 <code>Resaltar botones de acci\u00f3n</code>  Utilizar colores contrastantes y llamativos para botones de acciones clave, como el registro, la compra o el env\u00edo de formularios. Los colores c\u00e1lidos como el rojo, naranja o amarillo son comunes para este tipo de elementos, ya que destacan frente al resto de la paleta.</p> <p>\ud83d\udcda <code>Agrupaci\u00f3n de informaci\u00f3n</code>  Los colores pueden usarse para agrupar visualmente elementos relacionados, lo que ayuda a los usuarios a entender de forma r\u00e1pida las conexiones entre diferentes secciones o contenidos. Por ejemplo, en un formulario largo, diferentes colores pueden separar visualmente cada secci\u00f3n, facilitando la comprensi\u00f3n.</p> <p>\ud83d\udd26 <code>Indicadores visuales</code>  Los colores tambi\u00e9n pueden utilizarse para se\u00f1alar estados o acciones espec\u00edficas, como el uso de verde para indicar que una acci\u00f3n se ha completado con \u00e9xito, o rojo para mostrar errores o advertencias.</p> <p>\ud83c\udfaf <code>Foco en la atenci\u00f3n</code>  Un buen uso del color puede dirigir la atenci\u00f3n del usuario hacia \u00e1reas clave de la p\u00e1gina. Por ejemplo, en una landing page, el color principal se puede usar para dirigir al usuario hacia el bot\u00f3n de compra o registro, mientras que colores secundarios se utilizan para otros elementos menos importantes.</p>"},{"location":"0%20-%20Fundamentos%20del%20Dise%C3%B1o%20de%20Interfaces%20Web/#025-colores-y-accesibilidad","title":"\ud83d\uded7 0.2.5 Colores y Accesibilidad","text":"<p>El uso del color tambi\u00e9n tiene un impacto significativo en la accesibilidad de una p\u00e1gina web. No todos los usuarios perciben los colores de la misma manera, lo que significa que los dise\u00f1adores deben ser conscientes de condiciones como el daltonismo (incapacidad para distinguir ciertos colores) o la baja visi\u00f3n.</p> <p>Para garantizar la accesibilidad, es fundamental que los colores no sean el \u00fanico medio para transmitir informaci\u00f3n. Por ejemplo, si un formulario usa \u00fanicamente el color rojo para se\u00f1alar errores, los usuarios con dificultades para distinguir ese color podr\u00edan no notar el mensaje de error. En lugar de depender \u00fanicamente del color, se pueden agregar otros indicadores, como \u00edconos o mensajes de texto que proporcionen la misma informaci\u00f3n de manera visual y accesible.</p> <p>Existen herramientas, como Color Oracle, que permiten simular c\u00f3mo un sitio web se ve para usuarios con distintas discapacidades visuales, facilitando as\u00ed el ajuste de la paleta de colores para que sea accesible para todos.</p>"},{"location":"0%20-%20Fundamentos%20del%20Dise%C3%B1o%20de%20Interfaces%20Web/#026-tendencias-actuales-en-el-uso-del-color-en-web","title":"\ud83e\udded 0.2.6 Tendencias Actuales en el Uso del Color en Web","text":"<p>Las tendencias en el uso del color en el dise\u00f1o web evolucionan constantemente, influenciadas por cambios en la tecnolog\u00eda, el dise\u00f1o de dispositivos y las preferencias del usuario. Algunas de las tendencias actuales incluyen:</p> <p><code>Modos oscuro y claro</code>  Muchas interfaces web ahora ofrecen a los usuarios la opci\u00f3n de cambiar entre modo oscuro y claro, lo que requiere la adaptaci\u00f3n de la paleta de colores para ambas configuraciones. El modo oscuro reduce la fatiga visual en condiciones de poca luz, mientras que el modo claro es m\u00e1s adecuado para entornos con buena iluminaci\u00f3n.</p> <p><code>Colores vivos y saturados</code>  En contraste con los dise\u00f1os m\u00e1s sobrios y minimalistas del pasado, muchos sitios web ahora utilizan colores intensos y saturados para captar la atenci\u00f3n y generar un impacto visual fuerte.</p> <p><code>Gradientes de color</code>  Los gradientes han vuelto a ser populares, proporcionando profundidad y dinamismo a los fondos o elementos visuales. Este tipo de aplicaci\u00f3n de color puede ser sutil o audaz, dependiendo del dise\u00f1o.</p>"},{"location":"0%20-%20Fundamentos%20del%20Dise%C3%B1o%20de%20Interfaces%20Web/#127-herramientas-para-la-seleccion-de-colores","title":"\ud83d\udee0\ufe0f1.2.7 Herramientas para la Selecci\u00f3n de Colores","text":"<p>Hoy en d\u00eda, los dise\u00f1adores web cuentan con diversas herramientas que facilitan la elecci\u00f3n de una paleta de colores adecuada para una interfaz. Estas herramientas permiten explorar combinaciones crom\u00e1ticas, verificar el contraste y garantizar que los colores seleccionados se alineen con los objetivos de la p\u00e1gina web. Algunas de las herramientas m\u00e1s populares son:</p> <p>Adobe Color Esta plataforma es una de las m\u00e1s utilizadas para crear y explorar paletas de colores. Permite generar esquemas de color basados en reglas como colores complementarios, an\u00e1logos, tri\u00e1dicos o monocrom\u00e1ticos, y tambi\u00e9n permite ajustar el brillo, la saturaci\u00f3n y otros par\u00e1metros. Adem\u00e1s, Adobe Color incluye una herramienta de accesibilidad que permite verificar si una paleta es apropiada para usuarios con dificultades visuales.</p> <p>Coolors Una herramienta sencilla que permite generar paletas de colores con solo presionar un bot\u00f3n. Coolors tambi\u00e9n ofrece funcionalidades para ajustar las paletas, verificar el contraste y exportar los colores en diferentes formatos (RGB, HEX, CMYK).</p> <p>Material Design Color Tool Esta herramienta, dise\u00f1ada por Google, permite seleccionar colores basados en las directrices de dise\u00f1o de Material Design. Es \u00fatil para aquellos que buscan crear una experiencia coherente y bien estructurada a partir de la filosof\u00eda de dise\u00f1o de Google.</p> <p>ColorZilla Una extensi\u00f3n para navegadores que permite a los dise\u00f1adores extraer colores directamente desde sitios web existentes. Es \u00fatil para obtener inspiraci\u00f3n de otras interfaces o para asegurarse de que los colores se mantengan consistentes en todo el sitio.</p> <p>Contrast Ratio Una herramienta centrada en verificar la accesibilidad de las combinaciones de colores. Proporciona la relaci\u00f3n de contraste entre un color de fondo y un color de primer plano (texto, \u00edconos, etc.), y asegura que cumplan con los est\u00e1ndares de accesibilidad establecidos por la WCAG (Web Content Accessibility Guidelines).</p>"},{"location":"0%20-%20Fundamentos%20del%20Dise%C3%B1o%20de%20Interfaces%20Web/#028-implementacion-del-color-en-css","title":"\ud83e\uddd1\ud83c\udffb\u200d\ud83d\udcbb 0.2.8 Implementaci\u00f3n del Color en CSS","text":"<p>Una vez seleccionada la paleta de colores para una interfaz, la implementaci\u00f3n en c\u00f3digo CSS es un paso crucial para garantizar que los colores se apliquen correctamente en la p\u00e1gina web.</p> <p>El uso de colores en CSS es vers\u00e1til, permitiendo definir colores tanto en valores HEX <code>#FF5733</code>, RGB <code>rgb(255, 87, 51)</code> como en HSL <code>hsl(9, 100%, 60%)</code>. Cada uno de estos formatos tiene ventajas en diferentes contextos.</p> <p><code>HEX</code> Es el formato m\u00e1s com\u00fan para definir colores en CSS. Su simplicidad y universalidad lo convierten en la opci\u00f3n preferida para la mayor\u00eda de los desarrolladores.</p> <p><code>RGB</code> Es ideal cuando se necesita controlar los niveles de transparencia o cuando se quiere realizar c\u00e1lculos de color din\u00e1micos mediante CSS o JavaScript.</p> <p><code>HSL</code> Este formato permite definir colores mediante matiz, saturaci\u00f3n y luminosidad, lo que facilita los ajustes de color, ya que refleja c\u00f3mo los humanos percibimos los colores, en lugar de basarse solo en valores de rojo, verde y azul.</p> <p>El uso de variables de CSS (--primary-color, --secondary-color, etc.) facilita la reutilizaci\u00f3n de los colores a lo largo del c\u00f3digo, permitiendo cambios m\u00e1s r\u00e1pidos en toda la interfaz si es necesario ajustar la paleta. Esto es especialmente \u00fatil en proyectos grandes o al implementar temas oscuros y claros, ya que los colores pueden ser cambiados globalmente sin necesidad de modificar cada estilo individualmente.</p> <pre><code>/* Definir las variables de color en el selector :root para que sean globales */\n:root {\n    --primary-color: #3498db; /* Azul claro */\n    --secondary-color: #2ecc71; /* Verde */\n    --text-color: #333333; /* Texto oscuro */\n    --background-color: #f4f4f4; /* Fondo claro */\n    --button-hover-color: #2980b9; /* Azul m\u00e1s oscuro para hover */\n    --border-color: #bdc3c7; /* Color del borde gris claro */\n}\n\n/* Aplicar las variables de color a diferentes elementos */\nbody {\n    background-color: var(--background-color);\n    color: var(--text-color);\n    font-family: Arial, sans-serif;\n    margin: 0;\n    padding: 20px;\n}\n\nh1 {\n    color: var(--primary-color);\n    font-size: 2.5em;\n}\n\np {\n    color: var(--text-color);\n    line-height: 0.6;\n}\n\nbutton {\n    background-color: var(--primary-color);\n    color: white;\n    border: none;\n    padding: 10px 20px;\n    font-size: 1em;\n    cursor: pointer;\n    border-radius: 5px;\n    transition: background-color 0.3s ease;\n}\n\nbutton:hover {\n    background-color: var(--button-hover-color);\n}\n\n.container {\n    border: 1px solid var(--border-color);\n    padding: 20px;\n    border-radius: 10px;\n    background-color: white;\n    max-width: 600px;\n    margin: 20px auto;\n    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n}\n</code></pre>"},{"location":"0%20-%20Fundamentos%20del%20Dise%C3%B1o%20de%20Interfaces%20Web/#029-colores-en-el-diseno-responsive","title":"\ud83c\udfa8 0.2.9 Colores en el Dise\u00f1o Responsive","text":"<p>El dise\u00f1o web moderno exige que las interfaces sean responsivas, lo que significa que deben adaptarse y verse bien en una variedad de dispositivos y tama\u00f1os de pantalla, desde tel\u00e9fonos m\u00f3viles hasta pantallas de escritorio. Esto incluye el uso inteligente del color para garantizar que los elementos sean legibles y visualmente atractivos sin importar el dispositivo que se est\u00e9 utilizando.</p> <p>Uno de los desaf\u00edos en el dise\u00f1o responsivo es que los colores pueden percibirse de manera diferente en pantallas peque\u00f1as en comparaci\u00f3n con pantallas m\u00e1s grandes. Por ejemplo, un color de fondo oscuro que se ve bien en un monitor de escritorio puede volverse demasiado opaco y dificultar la legibilidad en una pantalla de m\u00f3vil. De igual manera, los colores brillantes o saturados pueden parecer abrumadores en pantallas m\u00e1s peque\u00f1as. Por eso, es esencial que los dise\u00f1adores ajusten los colores, el contraste y los estilos de los elementos dependiendo del dispositivo.</p> <p>CSS ofrece herramientas como media queries que permiten cambiar el estilo de una p\u00e1gina web seg\u00fan el tama\u00f1o de la pantalla. Esto incluye ajustar las paletas de colores, por ejemplo, aclarar el fondo o cambiar el color de los botones en pantallas peque\u00f1as para mejorar la visibilidad y la usabilidad.</p> <p>Tambi\u00e9n es posible ajustar otros factores relacionados con el color, como el grosor de las l\u00edneas de los \u00edconos o las sombras, para hacer que los elementos visuales sean m\u00e1s claros en dispositivos m\u00f3viles.</p>"},{"location":"0%20-%20Fundamentos%20del%20Dise%C3%B1o%20de%20Interfaces%20Web/#0210-evaluacion-y-ajustes-de-color-en-el-proceso-de-diseno","title":"\u270f 0.2.10 Evaluaci\u00f3n y Ajustes de Color en el Proceso de Dise\u00f1o","text":"<p>Una vez que la paleta de colores ha sido implementada en el dise\u00f1o, es importante realizar una evaluaci\u00f3n continua y ajustarla seg\u00fan las necesidades del usuario y los objetivos del sitio.</p> <p>Esto se puede hacer a trav\u00e9s de pruebas de usuario, an\u00e1lisis de accesibilidad y monitoreo del rendimiento del sitio.</p> <p><code>Pruebas de usuario</code> Las pruebas con usuarios reales son fundamentales para verificar que los colores elegidos cumplen con las expectativas y necesidades del p\u00fablico objetivo. Estas pruebas pueden revelar si ciertos colores est\u00e1n generando confusi\u00f3n, si hay suficiente contraste en las \u00e1reas clave, o si los usuarios est\u00e1n ignorando elementos importantes debido a su falta de prominencia.</p> <p><code>Pruebas de accesibilidad</code> Herramientas como WAVE o ss permiten verificar si el sitio web cumple con las pautas de accesibilidad en t\u00e9rminos de contraste de color, uso adecuado de textos alternativos y elementos visuales. Esto es esencial para asegurar que el sitio sea inclusivo para todos los usuarios.</p> <p><code>Monitoreo del rendimiento</code> Adem\u00e1s del rendimiento t\u00e9cnico del sitio (velocidad de carga, interactividad), el color tambi\u00e9n puede influir en las m\u00e9tricas de comportamiento del usuario, como el tiempo de permanencia en el sitio, las tasas de clic en botones de acci\u00f3n, y la conversi\u00f3n en formularios o p\u00e1ginas de venta. Un an\u00e1lisis de estos datos puede ofrecer informaci\u00f3n valiosa sobre si los colores est\u00e1n ayudando o perjudicando la experiencia del usuario.</p> <p>Dinamismo en el dise\u00f1o web</p> <p>El color en el dise\u00f1o web no es una decisi\u00f3n est\u00e1tica. A medida que evoluciona el sitio, crece la audiencia o cambian las tendencias del dise\u00f1o, los colores deben ser revisados y ajustados para seguir cumpliendo con los objetivos de la p\u00e1gina.</p>"},{"location":"0%20-%20Fundamentos%20del%20Dise%C3%B1o%20de%20Interfaces%20Web/#03-tipografia","title":"\ud83d\udd20 0.3 Tipograf\u00eda","text":"<p>La tipograf\u00eda es un elemento fundamental en el dise\u00f1o de interfaces web, ya que impacta directamente en la legibilidad, la percepci\u00f3n y la experiencia del usuario. Seleccionar y aplicar correctamente las tipograf\u00edas en una p\u00e1gina web no solo contribuye a la est\u00e9tica del sitio, sino que tambi\u00e9n mejora la accesibilidad, la jerarquizaci\u00f3n de la informaci\u00f3n y la usabilidad.</p> <p>En este apartado, abordaremos diversos aspectos clave de la tipograf\u00eda en dise\u00f1o web, incluyendo la selecci\u00f3n de fuentes, el uso de sistemas tipogr\u00e1ficos como Google Fonts, las propiedades CSS m\u00e1s importantes para manipular texto, y c\u00f3mo implementar una jerarqu\u00eda tipogr\u00e1fica que facilite la navegaci\u00f3n y comprensi\u00f3n de los contenidos.</p>"},{"location":"0%20-%20Fundamentos%20del%20Dise%C3%B1o%20de%20Interfaces%20Web/#031-la-importancia-de-la-tipografia-en-el-diseno-web","title":"0.3.1 La Importancia de la Tipograf\u00eda en el Dise\u00f1o Web","text":"<p>La tipograf\u00eda no es simplemente la elecci\u00f3n de una fuente atractiva, sino una herramienta crucial que define c\u00f3mo los usuarios perciben y procesan la informaci\u00f3n presentada en la web. En t\u00e9rminos de experiencia de usuario (UX), una tipograf\u00eda mal seleccionada o mal implementada puede generar confusi\u00f3n, dificultar la lectura y hacer que el usuario abandone el sitio.</p> <p>Una buena tipograf\u00eda en la web debe cumplir con varios requisitos:</p> <p><code>Legibilidad</code> Las fuentes deben ser f\u00e1ciles de leer en pantallas de diferentes tama\u00f1os y resoluciones. Es esencial seleccionar una tipograf\u00eda que funcione bien tanto en dispositivos m\u00f3viles como en pantallas grandes.</p> <p><code>Jerarqu\u00eda visual</code> Una correcta aplicaci\u00f3n de diferentes tama\u00f1os, pesos y estilos tipogr\u00e1ficos permite establecer niveles de importancia entre los textos, como titulares, subt\u00edtulos, p\u00e1rrafos y enlaces.</p> <p><code>Coherencia</code> La tipograf\u00eda debe alinearse con la identidad visual del sitio, es decir, debe ser coherente con los colores, el dise\u00f1o general y los objetivos del sitio.</p> <p><code>Accesibilidad</code> La elecci\u00f3n de la tipograf\u00eda tambi\u00e9n debe tener en cuenta la accesibilidad para personas con discapacidades visuales, permitiendo que el texto sea lo m\u00e1s claro y legible posible.</p> <p>D\u00f3nde encontrar fuentes</p> <p>Existen muchas p\u00e1ginas de donde poder descargar fuentes para el uso web o incluso, vincular directamente el archivo de fuente sin necesidad de descargarlo previamente. Algunos ejemplos son Google Fonts | Font Squirrel | Awwwards | Font Space</p>"},{"location":"0%20-%20Fundamentos%20del%20Dise%C3%B1o%20de%20Interfaces%20Web/#032-tipos-de-fuentes-en-la-web","title":"0.3.2 Tipos de Fuentes en la Web","text":"<p>Las fuentes tipogr\u00e1ficas se dividen tradicionalmente en tres grandes categor\u00edas, cada una con caracter\u00edsticas espec\u00edficas que influyen en su uso en el dise\u00f1o web.</p> <p><code>Fuentes Serif</code> Se caracterizan por tener peque\u00f1as l\u00edneas o remates al final de cada letra. Estas fuentes son ideales para textos largos, como art\u00edculos o posts, ya que facilitan la lectura al guiar el ojo de una letra a otra. Ejemplos comunes son Times New Roman, Georgia o Merriweather.</p> <p><code>Fuentes Sans Serif</code> Son fuentes sin remates, m\u00e1s simples y modernas, que se utilizan a menudo en interfaces digitales por su claridad y legibilidad en pantallas. Las fuentes Arial, Helvetica y Roboto son ejemplos comunes. Son ideales para t\u00edtulos, botones y cualquier texto que deba ser r\u00e1pidamente identificable.</p> <p><code>Fuentes Display o Decorativas</code> Estas fuentes suelen ser m\u00e1s art\u00edsticas o expresivas y se utilizan con moderaci\u00f3n, principalmente en elementos destacados, como logotipos, t\u00edtulos grandes o campa\u00f1as promocionales. Ejemplos incluyen Lobster, Pacifico, entre otras.</p> <p>Eligiendo una fuente adecuada</p> <p>La elecci\u00f3n entre estos tipos de fuentes depende del tono y el prop\u00f3sito del sitio web. Un blog formal o una p\u00e1gina de noticias puede beneficiarse de una tipograf\u00eda serif para los cuerpos de texto, mientras que una tienda en l\u00ednea o una app moderna puede optar por una sans serif para lograr un dise\u00f1o m\u00e1s limpio y directo.</p>"},{"location":"0%20-%20Fundamentos%20del%20Dise%C3%B1o%20de%20Interfaces%20Web/#033-uso-de-sistemas-de-fuentes-web-google-fonts","title":"0.3.3 Uso de Sistemas de Fuentes Web (Google Fonts)","text":"<p>Una de las herramientas m\u00e1s \u00fatiles para los dise\u00f1adores web es la amplia gama de fuentes disponibles a trav\u00e9s de sistemas como Google Fonts.</p> <p>Esta plataforma ofrece una vasta colecci\u00f3n de fuentes gratuitas que son f\u00e1ciles de implementar en cualquier p\u00e1gina web, proporcionando control total sobre el dise\u00f1o tipogr\u00e1fico sin depender de las fuentes instaladas localmente en los dispositivos de los usuarios.</p> <p>Ventajas de usar Google Fonts</p> <p><code>Accesibilidad</code> Las fuentes se cargan desde servidores de Google, asegurando que cualquier usuario pueda visualizarlas sin necesidad de tener la fuente instalada en su dispositivo.</p> <p><code>Compatibilidad</code> Google Fonts garantiza que las fuentes funcionen correctamente en todos los navegadores modernos y en diferentes dispositivos, asegurando una experiencia consistente.</p> <p><code>Variedad</code> La plataforma ofrece una amplia selecci\u00f3n de tipograf\u00edas tanto serif como sans serif, as\u00ed como fuentes decorativas, con una gama de pesos y estilos.</p> <p><code>Implementaci\u00f3n en CSS</code> Implementar Google Fonts en una p\u00e1gina web es sencillo y sigue este formato b\u00e1sico:</p> <p><pre><code>&lt;!-- En nuestras cabeceras del archivo HTML a utilizar--&gt;\n\n&lt;link href=\"https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&amp;display=swap\" rel=\"stylesheet\"&gt;\n</code></pre> Haciendo uso de la fuente importada desde Google Fonts.</p> <pre><code>/* En nuestro archivo css \u27a1 style.css */\n\nbody {\n    font-family: 'Roboto', sans-serif;\n}\n</code></pre> <p>Explicaci\u00f3n del c\u00f3digo</p> <p>En este ejemplo, se ha implementado la fuente Roboto con dos pesos diferentes (400 y 700). Tambi\u00e9n es posible especificar m\u00faltiples fuentes de respaldo en la propiedad font-family para garantizar que, si por alguna raz\u00f3n una fuente no se carga correctamente, el texto se muestre con una tipograf\u00eda similar disponible en el sistema del usuario.</p>"},{"location":"0%20-%20Fundamentos%20del%20Dise%C3%B1o%20de%20Interfaces%20Web/#034-jerarquia-tipografica","title":"0.3.4 Jerarqu\u00eda Tipogr\u00e1fica","text":"<p>La jerarqu\u00eda tipogr\u00e1fica se refiere a la organizaci\u00f3n y diferenciaci\u00f3n del texto en funci\u00f3n de su importancia.</p> <p>ssEste concepto es clave en el dise\u00f1o de interfaces web porque permite a los usuarios navegar visualmente por el contenido de manera intuitiva.</p> <p>Para crear una jerarqu\u00eda efectiva, los dise\u00f1adores pueden jugar con varios aspectos de la tipograf\u00eda:</p> <p><code>Tama\u00f1o</code> Los t\u00edtulos (h1, h2, etc.) son m\u00e1s grandes que los subt\u00edtulos y estos, a su vez, son m\u00e1s grandes que los p\u00e1rrafos de texto.</p> <p><code>Peso</code> El uso de negritas o fuentes m\u00e1s gruesas para destacar partes importantes del contenido.</p> <p><code>Color</code> Usar colores diferentes para los t\u00edtulos, enlaces o botones puede guiar la atenci\u00f3n del usuario hacia elementos clave de la p\u00e1gina.</p> <p><code>Espaciado</code> Un mayor espacio entre l\u00edneas o entre bloques de texto puede ayudar a separar visualmente las ideas y mejorar la legibilidad.</p> <p>Ejemplo de una jerarqu\u00eda b\u00e1sica en CSS:</p> <pre><code>h1 {\n    font-size: 3em;\n    font-weight: 700;\n    color: var(--primary-color);\n}\n\nh2 {\n    font-size: 2.25em;\n    font-weight: 600;\n}\n\np {\n    font-size: 1em;\n    line-height: 0.6;\n}\n</code></pre> <p>Explicaci\u00f3n del c\u00f3digo</p> <p>Este enfoque garantiza que el t\u00edtulo principal (h1) sea el elemento m\u00e1s destacado, seguido por el subt\u00edtulo (h2), y que los p\u00e1rrafos sean legibles y tengan suficiente espacio entre l\u00edneas para mejorar la comprensi\u00f3n.</p>"},{"location":"0%20-%20Fundamentos%20del%20Dise%C3%B1o%20de%20Interfaces%20Web/#035-tipografia-responsiva","title":"0.3.5 Tipograf\u00eda Responsiva","text":"<p>En el dise\u00f1o web actual, la tipograf\u00eda debe adaptarse a diferentes tama\u00f1os de pantalla y resoluciones. Un texto que se ve bien en un monitor grande puede ser ilegible en un tel\u00e9fono m\u00f3vil si no se ajusta correctamente. Para lograr una tipograf\u00eda responsiva, es posible utilizar media queries y unidades relativas.</p> <p>Por ejemplo, se puede ajustar el tama\u00f1o del texto en pantallas m\u00e1s peque\u00f1as de esta manera:</p> <pre><code>body {\n    font-size: 18px;\n}\n\n@media (max-width: 600px) {\n    body {\n        font-size: 16px;\n    }\n}\n</code></pre> <p>Unidades de medida en CSS</p> <p>Tambi\u00e9n se pueden usar unidades como rem o em en lugar de p\u00edxeles, lo que permite que el texto sea m\u00e1s flexible y se ajuste de forma autom\u00e1tica al tama\u00f1o de pantalla.</p>"},{"location":"1%20-%20Introducci%C3%B3n%20al%20Desarrollo%20de%20Interfaces%20de%20Usuario/","title":"1\ufe0f\u20e3 Introducci\u00f3n al desarrollo de interfaces de usuario con HTML5, CSS y JavaScript","text":"<p>Una interfaz gr\u00e1fica de usuario (UI) es la capa de interacci\u00f3n entre el usuario y la aplicaci\u00f3n. En este sentido, las UI web deben cumplir con los principios de usabilidad, accesibilidad y est\u00e9tica, ya que de ellas depende gran parte de la experiencia del usuario (UX). Este tema se centra en la construcci\u00f3n de UI utilizando tecnolog\u00edas web que permiten a los usuarios interactuar de manera visual y din\u00e1mica con las aplicaciones.</p>"},{"location":"1%20-%20Introducci%C3%B3n%20al%20Desarrollo%20de%20Interfaces%20de%20Usuario/#conceptos-basicos-de-una-interfaz-grafica-de-usuario","title":"Conceptos b\u00e1sicos de una interfaz gr\u00e1fica de usuario:","text":"<ul> <li>UI (User Interface): Se refiere a los componentes visuales con los que interact\u00faa un usuario en una p\u00e1gina web o aplicaci\u00f3n.</li> <li>UX (User Experience): Se refiere a la experiencia general que tiene un usuario al interactuar con una UI, considerando factores como facilidad de uso, satisfacci\u00f3n y accesibilidad.</li> </ul>"},{"location":"1%20-%20Introducci%C3%B3n%20al%20Desarrollo%20de%20Interfaces%20de%20Usuario/#caracteristicas-de-una-interfaz-de-usuario-efectiva","title":"Caracter\u00edsticas de una interfaz de usuario efectiva:","text":"<ol> <li>Usabilidad: La interfaz debe ser f\u00e1cil de usar y aprender, minimizando la curva de aprendizaje del usuario.</li> <li>Accesibilidad: La interfaz debe ser accesible para usuarios con discapacidades, respetando los est\u00e1ndares como WCAG (Web Content Accessibility Guidelines).</li> <li>Est\u00e9tica: La interfaz debe ser visualmente atractiva y coherente, utilizando colores, tipograf\u00edas y distribuciones que sigan patrones de dise\u00f1o reconocidos.</li> </ol>"},{"location":"1%20-%20Introducci%C3%B3n%20al%20Desarrollo%20de%20Interfaces%20de%20Usuario/#11-html5-la-estructura-de-las-interfaces","title":"1.1 HTML5 \ud83d\udc49\ud83c\udffb La estructura de las interfaces","text":"<p><code>HTML5</code> es la tecnolog\u00eda base utilizada para estructurar las p\u00e1ginas web. Define el esqueleto de la UI mediante el uso de etiquetas y atributos sem\u00e1nticos que facilitan la organizaci\u00f3n del contenido y su accesibilidad.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Aplicaci\u00f3n Web B\u00e1sica&lt;/title&gt;\n    &lt;link rel=\"stylesheet\" href=\"styles.css\"&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;header&gt;\n      &lt;h1&gt;Mi Aplicaci\u00f3n Web&lt;/h1&gt;\n    &lt;/header&gt;\n    &lt;main&gt;\n      &lt;section id=\"formulario\"&gt;\n        &lt;h2&gt;Formulario de Contacto&lt;/h2&gt;\n        &lt;form id=\"contactForm\"&gt;\n          &lt;label for=\"name\"&gt;Nombre:&lt;/label&gt;\n          &lt;input type=\"text\" id=\"name\" name=\"name\" required&gt;\n\n          &lt;label for=\"email\"&gt;Email:&lt;/label&gt;\n          &lt;input type=\"email\" id=\"email\" name=\"email\" required&gt;\n\n          &lt;label for=\"message\"&gt;Mensaje:&lt;/label&gt;\n          &lt;textarea id=\"message\" name=\"message\" required&gt;&lt;/textarea&gt;\n\n          &lt;button type=\"submit\"&gt;Enviar&lt;/button&gt;\n        &lt;/form&gt;\n      &lt;/section&gt;\n    &lt;/main&gt;\n    &lt;footer&gt;\n      &lt;p&gt;&amp;copy; 2024 Mi Aplicaci\u00f3n&lt;/p&gt;\n    &lt;/footer&gt;\n    &lt;script src=\"app.js\"&gt;&lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"1%20-%20Introducci%C3%B3n%20al%20Desarrollo%20de%20Interfaces%20de%20Usuario/#componentes-clave-de-html5-en-interfaces-graficas","title":"Componentes clave de HTML5 en interfaces gr\u00e1ficas:","text":"<ol> <li> <p>Etiquetas sem\u00e1nticas:</p> <ul> <li> <p><code>&lt;header&gt;</code>, <code>&lt;footer&gt;</code>, <code>&lt;section&gt;</code>, <code>&lt;article&gt;</code>: Estructuran el contenido de forma sem\u00e1ntica, facilitando la comprensi\u00f3n del contenido tanto para usuarios como para motores de b\u00fasqueda.</p> </li> <li> <p>Inputs y controles de formularios: Elementos como <code>&lt;input&gt;</code>, <code>&lt;textarea&gt;</code>, <code>&lt;select&gt;</code> son esenciales en la captura de datos del usuario.</p> </li> </ul> </li> <li> <p>Atributos de accesibilidad:</p> <ul> <li><code>for</code> y <code>id</code>: En etiquetas <code>&lt;label&gt;</code>, se usan para mejorar la accesibilidad, vinculando etiquetas con campos de formulario.</li> <li>Atributos obligatorios: <code>required</code>, <code>placeholder</code>, y <code>aria-*</code> para ayudar a la accesibilidad y usabilidad.</li> </ul> </li> <li> <p>Formularios en HTML5:</p> <ul> <li>HTML5 permite la creaci\u00f3n de formularios con validaci\u00f3n b\u00e1sica integrada a trav\u00e9s de atributos como <code>required</code>, <code>pattern</code>, y tipos de datos como <code>email</code>, <code>tel</code>, y <code>url</code>.</li> <li>Ejemplo de un formulario b\u00e1sico:   <pre><code>  &lt;form action=\"/submit\" method=\"POST\"&gt;\n      &lt;label for=\"name\"&gt;Nombre:&lt;/label&gt;\n      &lt;input type=\"text\" id=\"name\" name=\"name\" required&gt;\n      &lt;button type=\"submit\"&gt;Enviar&lt;/button&gt;\n  &lt;/form&gt;\n</code></pre></li> </ul> </li> </ol>"},{"location":"1%20-%20Introducci%C3%B3n%20al%20Desarrollo%20de%20Interfaces%20de%20Usuario/#12-css3-estilo-y-presentacion-de-interfaces","title":"1.2 CSS3 \ud83d\udc49\ud83c\udffb Estilo y presentaci\u00f3n de interfaces","text":"<p>CSS3 se utiliza para controlar la apariencia de los elementos HTML, definiendo aspectos como colores, tipograf\u00eda, m\u00e1rgenes, alineaci\u00f3n y comportamiento visual. CSS es fundamental para hacer las interfaces atractivas y funcionales en diferentes dispositivos.</p>"},{"location":"1%20-%20Introducci%C3%B3n%20al%20Desarrollo%20de%20Interfaces%20de%20Usuario/#reglas-basicas-de-css","title":"Reglas b\u00e1sicas de CSS","text":"<ul> <li>Selectores: Seleccionan los elementos que se van a estilizar (por ejemplo, <code>p { color: blue; }</code>).</li> <li>Propiedades y valores: Definen el estilo de los elementos (por ejemplo, <code>color</code>, <code>background-color</code>, <code>margin</code>, <code>padding</code>).</li> </ul>"},{"location":"1%20-%20Introducci%C3%B3n%20al%20Desarrollo%20de%20Interfaces%20de%20Usuario/#estilos-comunes-para-interfaces","title":"Estilos comunes para interfaces","text":"<pre><code>body {\n  font-family: Arial, sans-serif;\n  background-color: #f0f0f0;\n  margin: 0;\n  padding: 20px;\n}\nh1, h2 {\n  color: #333;\n}\nform {\n  background-color: #fff;\n  padding: 20px;\n  border-radius: 8px;\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n}\ninput, textarea {\n  width: 100%;\n  padding: 10px;\n  margin: 10px 0;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n}\nbutton {\n  background-color: #28a745;\n  color: white;\n  padding: 10px 20px;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n}\n</code></pre>"},{"location":"1%20-%20Introducci%C3%B3n%20al%20Desarrollo%20de%20Interfaces%20de%20Usuario/#diseno-responsivo","title":"Dise\u00f1o responsivo","text":"<ul> <li>Media Queries: Permiten ajustar los estilos seg\u00fan el tama\u00f1o de la pantalla.   <pre><code>@media (max-width: 600px) {\n  form {\n    width: 100%;\n  }\n}\n</code></pre></li> </ul>"},{"location":"1%20-%20Introducci%C3%B3n%20al%20Desarrollo%20de%20Interfaces%20de%20Usuario/#disposicion-de-elementos-con-flexbox-y-grid","title":"Disposici\u00f3n de elementos con Flexbox y Grid","text":"<ul> <li>Flexbox: Se usa para organizar elementos en una fila o columna flexible.   <pre><code>.container {\n  display: flex;\n  justify-content: space-between;\n}\n</code></pre></li> <li>Grid: Se usa para crear disposiciones m\u00e1s complejas.   <pre><code>.grid {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n}\n</code></pre></li> </ul>"},{"location":"1%20-%20Introducci%C3%B3n%20al%20Desarrollo%20de%20Interfaces%20de%20Usuario/#13-javascript-comportamiento-y-eventos-en-la-interfaz","title":"1.3. JavaScript \ud83d\udc49\ud83c\udffb Comportamiento y eventos en la interfaz","text":"<p>JavaScript a\u00f1ade interactividad a las interfaces, permitiendo que los elementos respondan a acciones del usuario, como clics, env\u00edo de formularios o cambios en los campos de texto.</p>"},{"location":"1%20-%20Introducci%C3%B3n%20al%20Desarrollo%20de%20Interfaces%20de%20Usuario/#introduccion-al-dom-document-object-model","title":"Introducci\u00f3n al DOM (Document Object Model)","text":"<ul> <li>El DOM representa la estructura del documento HTML como un \u00e1rbol de objetos manipulables por JavaScript.</li> <li>Selecci\u00f3n de elementos: Se utilizan m\u00e9todos como <code>document.getElementById()</code> o <code>document.querySelector()</code>.   <pre><code>const form = document.getElementById('contactForm');\n</code></pre></li> </ul>"},{"location":"1%20-%20Introducci%C3%B3n%20al%20Desarrollo%20de%20Interfaces%20de%20Usuario/#manejo-de-eventos-en-javascript","title":"Manejo de eventos en JavaScript","text":"<ul> <li>Los eventos permiten asociar acciones a interacciones del usuario, como <code>click</code>, <code>input</code>, <code>submit</code>.   <pre><code>document.querySelector('button').addEventListener('click', function() {\n  alert('\u00a1Bot\u00f3n clicado!');\n});\n</code></pre></li> </ul>"},{"location":"1%20-%20Introducci%C3%B3n%20al%20Desarrollo%20de%20Interfaces%20de%20Usuario/#validacion-y-manipulacion-de-formularios","title":"Validaci\u00f3n y manipulaci\u00f3n de formularios","text":"<ul> <li>Validar datos de formulario antes de su env\u00edo:   <pre><code>form.addEventListener('submit', function(event) {\n  const name = document.getElementById('name').value;\n  if (name === '') {\n    alert('Por favor, ingrese su nombre');\n    event.preventDefault();\n  }\n});\n</code></pre></li> </ul>"},{"location":"1%20-%20Introducci%C3%B3n%20al%20Desarrollo%20de%20Interfaces%20de%20Usuario/#14-desarrollo-de-una-aplicacion-web-basica","title":"1.4 Desarrollo de una aplicaci\u00f3n web b\u00e1sica","text":"<ol> <li>Crear un formulario de contacto que incluya los campos de nombre, correo electr\u00f3nico y mensaje.</li> <li>Validar los campos con JavaScript para asegurarse de que el usuario completa correctamente el formulario.</li> <li>Mostrar un mensaje de \u00e9xito o error dependiendo de si la validaci\u00f3n es correcta o no.</li> </ol> \ud83d\udfe2 index.html\ud83d\udfe1 script.js\ud83d\udd35 style.css <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Aplicaci\u00f3n de Contacto&lt;/title&gt;\n    &lt;script src=\"script.js\"&gt;&lt;/script&gt;&lt;!-- \ud83d\udfe1 --&gt;\n    &lt;link rel=\"stylesheet\" href=\"styles.css\"&gt;&lt;!-- \ud83d\udd35 --&gt;\n\n\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=\"contactForm\"&gt;\n        &lt;label for=\"name\"&gt;\n            Nombre:\n        &lt;/label&gt;\n\n        &lt;input\n            id=\"name\"\n            type=\"text\"\n            placeholder=\"Nombre\"\n            required\n        &gt;\n        &lt;label for=\"email\"&gt;\n            Correo electr\u00f3nico:\n        &lt;/label&gt;\n\n        &lt;input\n            id=\"email\"\n            type=\"email\"\n            placeholder=\"e-mail\"\n            required\n        &gt;\n\n        &lt;label for=\"message\"&gt;\n            Mensaje:\n        &lt;/label&gt;\n\n        &lt;textarea\n            id=\"message\"\n            placeholder=\"Todo este espacio es para ti\"\n            required\n        &gt;&lt;/textarea&gt;\n\n        &lt;button type=\"submit\"&gt;\n            Enviar\n        &lt;/button&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>    // Seleccionar el formulario\n    const form = document.getElementById('contactForm');\n\n    // Agregar un listener para el evento de env\u00edo\n    form.addEventListener('submit', function(event) {\n        // Prevenir el comportamiento predeterminado del formulario\n        event.preventDefault();\n\n        // Obtener los valores de los campos\n        const name = document.getElementById('name').value;\n        const email = document.getElementById('email').value;\n        const message = document.getElementById('message').value;\n\n        // Validar que los campos no est\u00e9n vac\u00edos\n        if (name === '' || email === '' || message === '') {\n        alert('Por favor, complete todos los campos');\n        } else {\n        alert('Formulario enviado exitosamente');\n        // Aqu\u00ed es donde normalmente se enviar\u00eda el formulario al servidor\n        }\n    });\n</code></pre> <pre><code>    body {\n        font-family: Arial, sans-serif;\n        background-color: #f7f7f7;\n        margin: 0;\n        padding: 50px;\n    }\n    form {\n        background-color: #fff;\n        padding: 20px;\n        border-radius: 8px;\n        box-shadow: 0 0 15px rgba(0, 0, 0, 0.1);\n    }\n\n    label {\n        display: block;\n        margin-bottom: 8px;\n        font-weight: bold;\n    }\n\n    input, textarea {\n        width: 100%;\n        padding: 10px;\n        margin-bottom: 20px;\n        border: 1px solid #ccc;\n        border-radius: 4px;\n    }\n\n    button {\n        background-color: #28a745;\n        color: white;\n        padding: 10px 20px;\n        border: none;\n        border-radius: 4px;\n        cursor: pointer;\n    }\n\n        button:hover {\n            background-color: #218838;\n        }\n</code></pre>"},{"location":"1%20-%20Introducci%C3%B3n%20al%20Desarrollo%20de%20Interfaces%20de%20Usuario/#descripcion-del-codigo-de-la-aplicacion","title":"Descripci\u00f3n del c\u00f3digo de la aplicaci\u00f3n","text":"<ol> <li>HTML5:</li> <li>El formulario contiene tres campos: un campo de texto para el nombre (<code>&lt;input type=\"text\"&gt;</code>), un campo de correo electr\u00f3nico (<code>&lt;input type=\"email\"&gt;</code>), y un \u00e1rea de texto para el mensaje (<code>&lt;textarea&gt;</code>).</li> <li> <p>El formulario est\u00e1 configurado para disparar una validaci\u00f3n cuando se env\u00ede.</p> </li> <li> <p>CSS (estilo b\u00e1sico):</p> </li> <li>Estilos b\u00e1sicos: Se aplican estilos simples para darle un dise\u00f1o limpio y profesional al formulario.</li> <li> <p>Interactividad: El bot\u00f3n de env\u00edo cambia de color al pasar el cursor por encima, lo que mejora la experiencia del usuario (UX).</p> </li> <li> <p>JavaScript:</p> </li> <li>El c\u00f3digo de JavaScript maneja la l\u00f3gica de la validaci\u00f3n del formulario, asegur\u00e1ndose de que los campos no est\u00e9n vac\u00edos antes de permitir el env\u00edo.</li> <li>El m\u00e9todo <code>addEventListener()</code> escucha el evento de \"submit\" en el formulario y previene que se env\u00ede si la validaci\u00f3n falla. En un contexto real, despu\u00e9s de la validaci\u00f3n, los datos se enviar\u00edan a un servidor o procesar\u00edan en el frontend.</li> </ol>"},{"location":"1%20-%20Introducci%C3%B3n%20al%20Desarrollo%20de%20Interfaces%20de%20Usuario/#15-modificacion-del-codigo-y-manipulacion-del-dom","title":"1.5 Modificaci\u00f3n del c\u00f3digo y manipulaci\u00f3n del DOM","text":"<p>Una parte importante del desarrollo de interfaces con HTML5, CSS y JavaScript es aprender c\u00f3mo modificar la estructura de la p\u00e1gina y su comportamiento din\u00e1micamente.</p> <ul> <li>Modificaci\u00f3n din\u00e1mica de elementos: Con JavaScript, podemos modificar los elementos HTML y sus propiedades. Esto incluye cambiar textos, estilos o agregar nuevos elementos al DOM.</li> </ul> <p>Ejemplo:    <pre><code>const header = document.querySelector('h1');\nheader.textContent = 'Nuevo T\u00edtulo de la Aplicaci\u00f3n';\nheader.style.color = 'blue';\n</code></pre></p> <p>En este caso, cambiamos el contenido de la etiqueta <code>&lt;h1&gt;</code> y le asignamos un nuevo color con JavaScript.</p> <ul> <li>Interacci\u00f3n basada en eventos: Los eventos en JavaScript permiten que los elementos reaccionen a las acciones del usuario. El uso de eventos como <code>click</code>, <code>focus</code>, <code>input</code>, y <code>submit</code> es esencial para crear interfaces interactivas.</li> </ul>"},{"location":"1%20-%20Introducci%C3%B3n%20al%20Desarrollo%20de%20Interfaces%20de%20Usuario/#herramientas-para-manipular-el-dom","title":"Herramientas para manipular el DOM","text":"<p>En JavaScript, al manipular el DOM (Document Object Model), es com\u00fan interactuar con el contenido de los elementos HTML. Existen varias formas de hacerlo, y entre las m\u00e1s usadas est\u00e1n las propiedades <code>innerHTML</code>, <code>innerText</code>, y el m\u00e9todo <code>append</code>. Cada una tiene caracter\u00edsticas \u00fanicas y es importante entender c\u00f3mo y cu\u00e1ndo usarlas de manera efectiva.</p> <p>A continuaci\u00f3n, exploraremos cada una de estas propiedades y m\u00e9todos, explicando su uso con ejemplos claros y detallados.</p>"},{"location":"1%20-%20Introducci%C3%B3n%20al%20Desarrollo%20de%20Interfaces%20de%20Usuario/#innerhtml","title":"<code>innerHTML</code>","text":"<p><code>innerHTML</code> es una propiedad que permite acceder o modificar el contenido HTML de un elemento. Esto incluye tanto el texto como las etiquetas HTML. Al utilizar <code>innerHTML</code>, puedes reemplazar todo el contenido interno del elemento por otro, incluyendo etiquetas HTML, lo que hace que sea una herramienta muy poderosa para insertar o cambiar estructuras HTML completas.</p> <p>Uso de <code>innerHTML</code></p> <ul> <li>Lectura del contenido HTML: Puedes acceder al contenido HTML de un elemento.</li> <li>Escritura de contenido HTML: Puedes reemplazar o cambiar el contenido HTML de un elemento.</li> </ul> <p>Ejemplo b\u00e1sico:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n  &lt;title&gt;Ejemplo de innerHTML&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;div id=\"miDiv\"&gt;\n    &lt;p&gt;Este es un &lt;strong&gt;parrafo&lt;/strong&gt; dentro de un div.&lt;/p&gt;\n  &lt;/div&gt;\n\n  &lt;button onclick=\"cambiarContenido()\"&gt;Cambiar Contenido&lt;/button&gt;\n\n  &lt;script&gt;\n    function cambiarContenido() {\n      document.getElementById('miDiv').innerHTML = '&lt;h1&gt;Contenido cambiado&lt;/h1&gt;&lt;p&gt;Este es el nuevo contenido con etiquetas HTML&lt;/p&gt;';\n    }\n  &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <ul> <li>Explicaci\u00f3n: En este ejemplo, el contenido original del <code>div</code> es un p\u00e1rrafo. Al hacer clic en el bot\u00f3n, se cambia el contenido usando <code>innerHTML</code>, lo que inserta un nuevo <code>h1</code> y un nuevo p\u00e1rrafo con HTML embebido.</li> </ul> <p>Consideraciones de seguridad con <code>innerHTML</code></p> <p>Uno de los riesgos de <code>innerHTML</code> es que puede ser una fuente de vulnerabilidades de XSS (Cross-Site Scripting) si no se controla el contenido que se inserta. Si los datos que introduces provienen de usuarios, debes asegurarte de que est\u00e9n adecuadamente filtrados o escapados.</p>"},{"location":"1%20-%20Introducci%C3%B3n%20al%20Desarrollo%20de%20Interfaces%20de%20Usuario/#innertext","title":"<code>innerText</code>","text":"<p><code>innerText</code> es una propiedad que permite acceder o modificar el texto visible de un elemento, sin incluir etiquetas HTML. A diferencia de <code>innerHTML</code>, <code>innerText</code> se enfoca solo en el texto, ignorando cualquier estructura HTML interna que pueda tener el elemento.</p> <p>Uso de <code>innerText</code></p> <ul> <li>Lectura del texto visible: Puedes obtener el texto que es visible para el usuario (sin las etiquetas HTML).</li> <li>Escritura de texto: Puedes reemplazar el texto visible de un elemento. Cualquier HTML que insertes ser\u00e1 tratado como texto plano.</li> </ul> <p>Ejemplo b\u00e1sico:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n  &lt;title&gt;Ejemplo de innerText&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;div id=\"miTexto\"&gt;\n    &lt;p&gt;Este es un &lt;strong&gt;texto en negrita&lt;/strong&gt; que contiene etiquetas HTML.&lt;/p&gt;\n  &lt;/div&gt;\n\n  &lt;button onclick=\"cambiarTexto()\"&gt;Cambiar Texto&lt;/button&gt;\n\n  &lt;script&gt;\n    function cambiarTexto() {\n      document.getElementById('miTexto').innerText = 'Este es un texto simple, sin HTML.';\n    }\n  &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <ul> <li>Explicaci\u00f3n: El contenido original del <code>div</code> incluye un p\u00e1rrafo con una etiqueta <code>&lt;strong&gt;</code>. Sin embargo, al hacer clic en el bot\u00f3n, se reemplaza con texto plano que no incluye ninguna etiqueta HTML. Cualquier intento de insertar HTML ser\u00e1 tratado como texto normal.</li> </ul>"},{"location":"1%20-%20Introducci%C3%B3n%20al%20Desarrollo%20de%20Interfaces%20de%20Usuario/#append","title":"<code>append</code>","text":"<p><code>append</code> es un m\u00e9todo que permite agregar nodos o texto al final del contenido de un elemento. A diferencia de <code>innerHTML</code> o <code>innerText</code>, <code>append</code> no reemplaza el contenido existente, sino que lo a\u00f1ade al final. Adem\u00e1s, <code>append</code> permite insertar tanto texto como nodos DOM (elementos HTML).</p> <p>Uso de <code>append</code></p> <ul> <li>Agregar nodos o texto al final del contenido de un elemento.</li> <li>No reemplaza el contenido existente, solo a\u00f1ade nuevos elementos.</li> </ul> <p>Ejemplo b\u00e1sico:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n  &lt;title&gt;Ejemplo de append&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;div id=\"contenedor\"&gt;\n    &lt;p&gt;Primer p\u00e1rrafo en el contenedor.&lt;/p&gt;\n  &lt;/div&gt;\n\n  &lt;button onclick=\"agregarElemento()\"&gt;Agregar Elemento&lt;/button&gt;\n\n  &lt;script&gt;\n    function agregarElemento() {\n      const nuevoParrafo = document.createElement('p');\n      nuevoParrafo.innerText = 'Este es un nuevo p\u00e1rrafo a\u00f1adido al final.';\n\n      document.getElementById('contenedor').append(nuevoParrafo);\n    }\n  &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <ul> <li>Explicaci\u00f3n: El contenido inicial del <code>div</code> es un p\u00e1rrafo. Al hacer clic en el bot\u00f3n, se crea un nuevo p\u00e1rrafo mediante <code>createElement</code> y luego se a\u00f1ade al final del contenedor usando <code>append</code>. Como resultado, se a\u00f1ade contenido nuevo sin borrar el existente.</li> </ul> <p>Agregar texto directamente con <code>append</code></p> <p>Tambi\u00e9n puedes a\u00f1adir texto directamente sin necesidad de crear un nuevo nodo:</p> <pre><code>document.getElementById('contenedor').append('Texto adicional');\n</code></pre> <p>Esto agregar\u00eda el texto \"Texto adicional\" al final del contenedor.</p> <p>Comparaci\u00f3n entre <code>innerHTML</code>, <code>innerText</code> y <code>append</code></p> Caracter\u00edstica <code>innerHTML</code> <code>innerText</code> <code>append</code> Inserta etiquetas HTML S\u00ed No S\u00ed (si se utiliza <code>createElement</code>) Manipulaci\u00f3n del DOM Reemplaza todo el contenido del elemento Reemplaza solo el texto visible A\u00f1ade nuevos nodos o texto Seguridad (XSS) Vulnerable si se usa con datos no seguros No permite insertar HTML, m\u00e1s seguro Seguro si se usan nodos creados manualmente Aplicaciones comunes Insertar HTML din\u00e1micamente Reemplazar o leer texto plano A\u00f1adir m\u00e1s contenido sin borrar el actual"},{"location":"1%20-%20Introducci%C3%B3n%20al%20Desarrollo%20de%20Interfaces%20de%20Usuario/#appendchild","title":"<code>appendChild</code>","text":"<p><code>appendChild</code> es un m\u00e9todo en JavaScript utilizado para agregar un nodo hijo al final de la lista de hijos de un nodo padre. A diferencia de <code>append</code>, que puede agregar tanto nodos como texto, <code>appendChild</code> solo puede a\u00f1adir nodos del DOM, como elementos HTML (tags), fragmentos de documentos, o incluso otros nodos de texto. Este m\u00e9todo es muy \u00fatil cuando quieres construir o modificar din\u00e1micamente la estructura de una p\u00e1gina web agregando nuevos elementos.</p> <p>Sintaxis b\u00e1sica</p> <pre><code>const contenedor = document.querySelector('#mi-contenedor');\nconst elementoHijo = document.createElement('p');\n\nelementoHijo.innerText = 'Este es el elemento hijo';\n\ncontenedor.appendChild(elementoHijo);\n</code></pre> <ul> <li>contenedor: El nodo padre donde se va a insertar el nuevo nodo.</li> <li>childNode: El nodo hijo que se va a agregar al nodo padre.</li> </ul> <p>El nodo hijo ser\u00e1 agregado al final de los nodos hijos ya existentes dentro del nodo padre.</p> Antes de ejecutar JavaScriptDespu\u00e9s de ejecutar JavaScript <pre><code>&lt;div id=\"mi-contenedor\"&gt;&lt;/div&gt;\n</code></pre> <pre><code>&lt;div id=\"mi-contenedor\"&gt;\n    &lt;p&gt;Este es el elemento hijo&lt;/p&gt;\n&lt;/div&gt;\n</code></pre> <p>Ejemplo b\u00e1sico: Agregar un nuevo elemento al final</p> <p>Vamos a crear un nuevo elemento <code>&lt;li&gt;</code> y agregarlo a una lista <code>&lt;ul&gt;</code> ya existente en la p\u00e1gina:</p> <p>HTML inicial:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n  &lt;title&gt;Ejemplo de appendChild&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;ul id=\"miLista\"&gt;\n    &lt;li&gt;Elemento 1&lt;/li&gt;\n    &lt;li&gt;Elemento 2&lt;/li&gt;\n  &lt;/ul&gt;\n\n  &lt;button onclick=\"agregarElemento()\"&gt;Agregar Elemento&lt;/button&gt;\n\n  &lt;script&gt;\n    function agregarElemento() {\n      // 1. Crear un nuevo elemento li\n      const nuevoElemento = document.createElement('li');\n\n      // 2. Agregar texto al nuevo elemento\n      nuevoElemento.innerText = 'Elemento 3';\n\n      // 3. A\u00f1adir el nuevo elemento como hijo de la lista\n      document.getElementById('miLista').appendChild(nuevoElemento);\n    }\n  &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Explicaci\u00f3n del c\u00f3digo:</p> <ol> <li>Crear un nuevo elemento: Usamos <code>document.createElement('li')</code> para crear un nuevo nodo de lista <code>&lt;li&gt;</code>.</li> <li>A\u00f1adir contenido al nuevo elemento: Utilizamos <code>innerText</code> para insertar el texto \"Elemento 3\" dentro del nuevo nodo <code>&lt;li&gt;</code>.</li> <li>Agregar el nuevo elemento al DOM: El m\u00e9todo <code>appendChild</code> agrega el nuevo elemento <code>&lt;li&gt;</code> al final de la lista no ordenada <code>&lt;ul&gt;</code>.</li> </ol> <p>Cuando el usuario haga clic en el bot\u00f3n, se agregar\u00e1 el nuevo elemento al final de la lista.</p> <p>Agregar m\u00faltiples nodos</p> <p><code>appendChild</code> solo puede agregar un nodo a la vez. Si deseas agregar varios nodos, deber\u00e1s llamarlo varias veces o usar un fragmento de documento para mejorar la eficiencia:</p> <p>Ejemplo: Agregar varios nodos con un <code>DocumentFragment</code></p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n  &lt;title&gt;Ejemplo de appendChild con Fragmento&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;ul id=\"miLista\"&gt;\n    &lt;li&gt;Elemento 1&lt;/li&gt;\n    &lt;li&gt;Elemento 2&lt;/li&gt;\n  &lt;/ul&gt;\n\n  &lt;button onclick=\"agregarVariosElementos()\"&gt;Agregar Varios Elementos&lt;/button&gt;\n\n  &lt;script&gt;\n    function agregarVariosElementos() {\n      // Crear un fragmento de documento para contener los nuevos elementos\n      const fragmento = document.createDocumentFragment();\n\n      // Crear 3 nuevos elementos li\n      for (let i = 3; i &lt;= 5; i++) {\n        const nuevoElemento = document.createElement('li');\n        nuevoElemento.innerText = 'Elemento ' + i;\n        fragmento.appendChild(nuevoElemento);\n      }\n\n      // A\u00f1adir el fragmento al DOM\n      document.getElementById('miLista').appendChild(fragmento);\n    }\n  &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Explicaci\u00f3n:</p> <ol> <li>Se crea un fragmento de documento (<code>DocumentFragment</code>), que es un contenedor temporal en memoria.</li> <li>Se a\u00f1aden varios elementos <code>&lt;li&gt;</code> al fragmento.</li> <li>Finalmente, se inserta el fragmento completo en el DOM con un solo <code>appendChild</code>. Esto es m\u00e1s eficiente que llamar <code>appendChild</code> varias veces porque las modificaciones del DOM se hacen una sola vez.</li> </ol> <p>Mover un nodo con <code>appendChild</code></p> <p>Una caracter\u00edstica interesante de <code>appendChild</code> es que si el nodo ya existe en el DOM, no lo duplicar\u00e1, sino que lo mover\u00e1 a la nueva posici\u00f3n.</p> <p>Ejemplo: Mover un nodo existente</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n  &lt;title&gt;Ejemplo de mover un nodo con appendChild&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;div id=\"contenedor1\"&gt;\n    &lt;p id=\"miParrafo\"&gt;Este p\u00e1rrafo ser\u00e1 movido.&lt;/p&gt;\n  &lt;/div&gt;\n  &lt;div id=\"contenedor2\"&gt;\n    &lt;!-- Contenedor vac\u00edo --&gt;\n  &lt;/div&gt;\n\n  &lt;button onclick=\"moverParrafo()\"&gt;Mover P\u00e1rrafo&lt;/button&gt;\n\n  &lt;script&gt;\n    function moverParrafo() {\n      const parrafo = document.getElementById('miParrafo');\n      const nuevoContenedor = document.getElementById('contenedor2');\n      nuevoContenedor.appendChild(parrafo); // Mover\u00e1 el p\u00e1rrafo al nuevo contenedor\n    }\n  &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Explicaci\u00f3n:</p> <p>Cuando el bot\u00f3n es presionado, el p\u00e1rrafo <code>#miParrafo</code> se quita del <code>#contenedor1</code> y movido al <code>#contenedor2</code> usando <code>appendChild</code>. No se duplica, simplemente se cambia de lugar.</p> <p>Diferencias entre <code>append</code> y <code>appendChild</code></p> <ul> <li>Compatibilidad de tipos: <code>append</code> permite insertar tanto nodos como cadenas de texto directamente, mientras que <code>appendChild</code> solo permite nodos.</li> </ul> <p>Ejemplo de <code>append</code> (inserta nodos y texto):</p> <pre><code>parentNode.append('Texto', document.createElement('div'));\n</code></pre> <ul> <li> <p>Retorno: <code>appendChild</code> retorna el nodo insertado, mientras que <code>append</code> no retorna nada (<code>undefined</code>).</p> </li> <li> <p>Compatibilidad de navegadores: <code>append</code> es m\u00e1s moderno, mientras que <code>appendChild</code> est\u00e1 disponible en navegadores m\u00e1s antiguos.</p> </li> </ul>"},{"location":"1%20-%20Introducci%C3%B3n%20al%20Desarrollo%20de%20Interfaces%20de%20Usuario/#16-manipulando-el-css","title":"1.6 Manipulando el CSS","text":"<p>En JavaScript, la manipulaci\u00f3n de clases de elementos HTML es una parte esencial del desarrollo web, ya que te permite cambiar la apariencia y el comportamiento de los elementos din\u00e1micamente. Para facilitar esta tarea, se pueden usar los m\u00e9todos <code>addClass</code>, <code>removeClass</code>, <code>toggleClass</code> y <code>style</code></p>"},{"location":"1%20-%20Introducci%C3%B3n%20al%20Desarrollo%20de%20Interfaces%20de%20Usuario/#addclass","title":"<code>addClass</code>","text":"<p>El m\u00e9todo <code>addClass</code> se utiliza para agregar una clase a un elemento, a\u00f1adiendo una nueva clase al atributo <code>class</code> sin eliminar las clases ya existentes.</p> <p>M\u00e9todo equivalente en JavaScript nativo: <pre><code>element.classList.add('className');\n</code></pre></p> <p>Ejemplo de uso: Imagina que tienes un bot\u00f3n y deseas cambiar su estilo al hacer clic, agregando la clase <code>active</code> que le aplica un nuevo estilo.</p> \ud83d\udfe2 HTML\ud83d\udfe1 JavaScript\ud83d\udd35 CSS <pre><code>    &lt;button id=\"miBoton\"&gt;Haz clic en m\u00ed&lt;/button&gt;\n</code></pre> <pre><code>    document.getElementById('miBoton').addEventListener('click', function() {\n        this.classList.add('active');\n    });\n</code></pre> <pre><code>    .active {\n        background-color: green;\n        color: white;\n    }\n</code></pre> <p>Cuando el bot\u00f3n es clicado, se le a\u00f1adir\u00e1 la clase <code>active</code>, cambiando el color de fondo y el color del texto.</p>"},{"location":"1%20-%20Introducci%C3%B3n%20al%20Desarrollo%20de%20Interfaces%20de%20Usuario/#removeclass","title":"<code>removeClass</code>","text":"<p>El m\u00e9todo <code>removeClass</code> se usa para eliminar una clase de un elemento. Si el elemento no tiene la clase especificada, no ocurre nada.</p> <p>M\u00e9todo equivalente en JavaScript nativo: <pre><code>element.classList.remove('className');\n</code></pre></p> <p>Ejemplo de uso: Supongamos que, tras hacer clic en un bot\u00f3n, queremos eliminar la clase <code>active</code> de ese elemento.</p> <pre><code>document.getElementById('miBoton').addEventListener('click', function() {\n  this.classList.remove('active');\n});\n</code></pre>"},{"location":"1%20-%20Introducci%C3%B3n%20al%20Desarrollo%20de%20Interfaces%20de%20Usuario/#toggleclass","title":"<code>toggleClass</code>","text":"<p>El m\u00e9todo <code>toggleClass</code> permite alternar una clase en un elemento. Si el elemento ya tiene la clase, la elimina; si no la tiene, la agrega. Este m\u00e9todo es muy \u00fatil cuando quieres cambiar el estado de un elemento al hacer clic, como en el caso de botones que activan o desactivan un estado.</p> <p>M\u00e9todo equivalente en JavaScript nativo: <pre><code>    element.classList.toggle('className');\n</code></pre></p> <p>Ejemplo de uso: Vamos a crear un bot\u00f3n que pueda activar y desactivar la clase <code>active</code> cada vez que se hace clic sobre \u00e9l.</p> <pre><code>document.getElementById('miBoton').addEventListener('click', function() {\n  this.classList.toggle('active');\n});\n</code></pre> <p>Al hacer clic en el bot\u00f3n: - Si la clase <code>active</code> est\u00e1 presente, ser\u00e1 eliminada. - Si la clase <code>active</code> no est\u00e1 presente, ser\u00e1 a\u00f1adida.</p> <p>Esto se puede usar para efectos como mostrar y ocultar un men\u00fa, cambiar el estado de un bot\u00f3n, entre otros.</p> <p>Ejemplo completo: <code>addClass</code>, <code>removeClass</code> y <code>toggleClass</code></p> \ud83d\udfe2 HTML\ud83d\udfe1 JavaScript\ud83d\udd35 CSS <pre><code>    &lt;button id=\"addClassBtn\"&gt;Agregar Clase&lt;/button&gt;\n    &lt;button id=\"removeClassBtn\"&gt;Remover Clase&lt;/button&gt;\n    &lt;button id=\"toggleClassBtn\"&gt;Alternar Clase&lt;/button&gt;\n\n    &lt;div id=\"miElemento\"&gt;Elemento de prueba&lt;/div&gt;\n</code></pre> <pre><code>    // Referencia al elemento\n    const miElemento = document.getElementById('miElemento');\n\n    // Agregar la clase \"active\"\n    document.getElementById('addClassBtn').addEventListener('click', function() {\n        miElemento.classList.add('active');\n    });\n\n    // Eliminar la clase \"active\"\n    document.getElementById('removeClassBtn').addEventListener('click', function() {\n        miElemento.classList.remove('active');\n    });\n\n    // Alternar la clase \"active\"\n    document.getElementById('toggleClassBtn').addEventListener('click', function() {\n        miElemento.classList.toggle('active');\n    });\n</code></pre> <pre><code>    .active {\n        background-color: lightblue;\n        padding: 10px;\n        border: 2px solid blue;\n    }\n</code></pre> <p>Explicaci\u00f3n: - El bot\u00f3n \"Agregar Clase\" agrega la clase <code>active</code> al elemento. - El bot\u00f3n \"Remover Clase\" elimina la clase <code>active</code> si est\u00e1 presente. - El bot\u00f3n \"Alternar Clase\" agrega o elimina la clase dependiendo de si ya est\u00e1 aplicada.</p>"},{"location":"1%20-%20Introducci%C3%B3n%20al%20Desarrollo%20de%20Interfaces%20de%20Usuario/#style","title":"<code>style</code>","text":"<p>El uso de la propiedad <code>style</code> en JavaScript permite modificar directamente los estilos CSS de un elemento HTML desde el c\u00f3digo. La propiedad <code>style</code> proporciona acceso a los atributos de estilo \"en l\u00ednea\" (inline styles), lo que significa que modifica el atributo <code>style</code> del elemento en el DOM, aplicando estilos de manera directa y din\u00e1mica.</p> <p>Modificar Estilos con la Propiedad <code>style</code> La propiedad <code>style</code> es un objeto que contiene todas las propiedades CSS disponibles para un elemento. Las propiedades CSS que normalmente tienen guiones (como <code>background-color</code>) se transforman en camelCase (por ejemplo, <code>backgroundColor</code>) para ser utilizadas en JavaScript.</p> <p>Sintaxis b\u00e1sica:</p> <pre><code>    element.style.property = \"value\";\n</code></pre> <p>Por ejemplo, si quieres cambiar el color de fondo de un elemento:</p> <pre><code>    document.getElementById(\"miElemento\").style.backgroundColor = \"yellow\";\n</code></pre> <p>Ejemplo b\u00e1sico: <pre><code>    &lt;div id=\"miDiv\" style=\"width: 100px; height: 100px; background-color: lightblue;\"&gt;Div de prueba&lt;/div&gt;\n    &lt;button id=\"boton\"&gt;Cambiar color&lt;/button&gt;\n\n    &lt;script&gt;\n    document.getElementById('boton').addEventListener('click', function() {\n        document.getElementById('miDiv').style.backgroundColor = 'red';\n    });\n    &lt;/script&gt;\n</code></pre></p> <p>En este caso, al hacer clic en el bot\u00f3n, el fondo del <code>div</code> cambiar\u00e1 de azul claro a rojo.</p> <p>Propiedades CSS en JavaScript</p> <p>A diferencia de CSS, donde se utilizan guiones para separar palabras, en JavaScript las propiedades CSS siguen una convenci\u00f3n de camelCase. Aqu\u00ed tienes algunos ejemplos de c\u00f3mo se traducen las propiedades CSS a JavaScript:</p> Propiedad CSS Propiedad en JavaScript <code>background-color</code> <code>backgroundColor</code> <code>font-size</code> <code>fontSize</code> <code>margin-top</code> <code>marginTop</code> <code>border-radius</code> <code>borderRadius</code> <code>text-align</code> <code>textAlign</code> <p>Acceder a m\u00faltiples estilos Puedes modificar varias propiedades de estilo usando el objeto <code>style</code>. Simplemente accedes a cada propiedad y le asignas un valor.</p> <p>Ejemplo de m\u00faltiples cambios de estilo:</p> <pre><code>    const miElemento = document.getElementById('miDiv');\n    miElemento.style.width = '200px';\n    miElemento.style.height = '200px';\n    miElemento.style.border = '2px solid black';\n    miElemento.style.backgroundColor = 'lightgreen';\n</code></pre> <p>Resetear estilos Cuando modificas los estilos de un elemento utilizando <code>style</code>, solo cambias los estilos en l\u00ednea (inline). Los estilos definidos en hojas de estilo externas o internas no se tocan, lo cual es \u00fatil. Si deseas eliminar un estilo que fue a\u00f1adido mediante JavaScript, puedes asignarle una cadena vac\u00eda (<code>\"\"</code>):</p> <p>Ejemplo: <pre><code>    miElemento.style.backgroundColor = \"\";  // Elimina el estilo de fondo en l\u00ednea\n</code></pre></p> <p>Alternativas al uso directo de <code>style</code></p> <p>Aunque la propiedad <code>style</code> es \u00fatil, modificar estilos en l\u00ednea puede ser problem\u00e1tico en aplicaciones grandes, ya que dificulta la separaci\u00f3n entre la estructura del contenido (HTML) y la presentaci\u00f3n (CSS). Como alternativa, generalmente es m\u00e1s recomendable cambiar clases de CSS, y dejar que las hojas de estilo se encarguen de los detalles del dise\u00f1o.</p> <p>Por ejemplo, en lugar de modificar directamente un estilo en l\u00ednea:</p> <pre><code>    miElemento.style.backgroundColor = \"yellow\";\n</code></pre> <p>Es preferible cambiar la clase:</p> <pre><code>    miElemento.classList.add(\"nuevoEstilo\");\n</code></pre> <p>Con un CSS como este:</p> <pre><code>.nuevoEstilo {\n  background-color: yellow;\n}\n</code></pre> <p>Esto hace que el c\u00f3digo sea m\u00e1s mantenible y f\u00e1cil de gestionar, especialmente en proyectos m\u00e1s grandes.</p> <p>Ejemplo completo: Cambiar estilos con <code>style</code> y <code>classList</code></p> \ud83d\udfe2 HTML <pre><code>&lt;div id=\"miDiv\" style=\"width: 150px; height: 150px; background-color: lightgray;\"&gt;Cuadro&lt;/div&gt;\n&lt;button id=\"styleBtn\"&gt;Cambiar Estilo (style)&lt;/button&gt;\n&lt;button id=\"classBtn\"&gt;Cambiar Estilo (class)&lt;/button&gt;\n\n&lt;style&gt;\n.nuevoEstilo {\n    background-color: blue;\n    border-radius: 10px;\n    color: white;\n}\n&lt;/style&gt;\n\n&lt;script&gt;\n// Cambiar estilos en l\u00ednea con 'style'\ndocument.getElementById('styleBtn').addEventListener('click', function() {\n    const div = document.getElementById('miDiv');\n    div.style.backgroundColor = 'green';\n    div.style.width = '300px';\n    div.style.height = '300px';\n    div.style.color = 'white';\n});\n\n// Cambiar estilos con 'classList'\ndocument.getElementById('classBtn').addEventListener('click', function() {\n    document.getElementById('miDiv').classList.toggle('nuevoEstilo');\n});\n&lt;/script&gt;\n</code></pre> <p>Explicaci\u00f3n:</p> <ol> <li>El bot\u00f3n \"Cambiar Estilo (style)\" modifica directamente los estilos en l\u00ednea (ancho, alto, color de fondo y color de texto) del <code>div</code> al hacer clic.</li> <li>El bot\u00f3n \"Cambiar Estilo (class)\" alterna la clase <code>nuevoEstilo</code>, que aplica un nuevo estilo CSS predefinido (fondo azul, bordes redondeados y texto blanco).</li> </ol> <p>Cuidado con esto</p> <p>Que no se te olvide el orden de preferencia de los estilos CSS \ud83d\udc49\ud83c\udffb las clases <code>.mi-clase</code> tienen menos peso que los identificadores <code>#mi-identificador</code> que a su vez, tienen menos relevancia que los estilos definidos en l\u00ednea <code>style=\"\"</code> y en primer lugar, est\u00e1 el <code>!important</code>.</p>"},{"location":"2%20-%20Manejo%20de%20datos/","title":"2\ufe0f\u20e3 Manejo de datos","text":""}]}