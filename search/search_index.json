{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Bienvenid@s a Desarrollo de Interfaces","text":""},{"location":"#discord","title":"\ud83c\udf99\ufe0f Discord","text":"<p>Usaremos Discord como m\u00e9todo de comunicaci\u00f3n de informaci\u00f3n sobre la asignatura y este curso. Pod\u00e9is hablar por el chat cuando quer\u00e1is y usar los canales de estudio con audio por si quer\u00e9is estudiar en un mismo sitio.</p> <p>La invitaci\u00f3n al canal es la siguiente \u27a1\ufe0f https://discord.gg/C8yxabVTsS</p>"},{"location":"0%20-%20Fundamentos%20del%20Dise%C3%B1o%20de%20Interfaces%20Web/","title":"0\ufe0f\u20e3 Fundamentos del Dise\u00f1o de Interfaces Web","text":"<p>En este primer tema, nos adentraremos en los pilares b\u00e1sicos que sustentan el dise\u00f1o de interfaces web efectivas y atractivas. Comprenderemos la importancia de la comunicaci\u00f3n visual y c\u00f3mo los principios del dise\u00f1o, como el balance, el contraste, la alineaci\u00f3n y la proximidad, juegan un papel crucial en la creaci\u00f3n de interfaces que no solo sean funcionales, sino tambi\u00e9n est\u00e9ticamente agradables.</p> <p>Exploraremos c\u00f3mo la elecci\u00f3n adecuada de colores y tipograf\u00edas puede influir en la percepci\u00f3n y usabilidad de un sitio web, as\u00ed como las mejores pr\u00e1cticas para presentar la informaci\u00f3n de manera clara y ordenada. Adem\u00e1s, aprenderemos a definir y aplicar una gu\u00eda de estilo, una herramienta esencial para mantener la coherencia visual en cualquier proyecto web.</p> <p>Finalmente, nos familiarizaremos con la creaci\u00f3n y utilizaci\u00f3n de plantillas de dise\u00f1o, que nos permitir\u00e1n estandarizar procesos y garantizar que las interfaces mantengan un aspecto y funcionamiento homog\u00e9neo a lo largo de todo el desarrollo. Este tema sentar\u00e1 las bases para el resto del curso, brind\u00e1ndonos los conocimientos esenciales para abordar los retos del dise\u00f1o de interfaces con seguridad y creatividad.</p>"},{"location":"0%20-%20Fundamentos%20del%20Dise%C3%B1o%20de%20Interfaces%20Web/#01-la-importancia-de-la-comunicacion-visual-en-el-diseno-web","title":"0.1. La Importancia de la Comunicaci\u00f3n Visual en el Dise\u00f1o Web","text":"<p>El dise\u00f1o de interfaces web va m\u00e1s all\u00e1 de la simple creaci\u00f3n de p\u00e1ginas est\u00e9ticamente agradables; se trata de establecer una comunicaci\u00f3n efectiva entre el usuario y el sistema. La comunicaci\u00f3n visual es el medio por el cual los usuarios interpretan y navegan una aplicaci\u00f3n o sitio web. Un buen dise\u00f1o visual gu\u00eda al usuario, facilita la interacci\u00f3n y mejora la experiencia general.</p> <p>Elementos clave de la comunicaci\u00f3n visual</p> <p>La comunicaci\u00f3n visual es el proceso mediante el cual se transmite informaci\u00f3n e ideas a trav\u00e9s de elementos visuales. En el contexto del dise\u00f1o de interfaces web, los elementos visuales no solo decoran la p\u00e1gina, sino que juegan un rol esencial en guiar al usuario, influir en su percepci\u00f3n y mejorar su experiencia. A continuaci\u00f3n, se detallan los elementos clave de la comunicaci\u00f3n visual y su aplicaci\u00f3n en el dise\u00f1o web.</p>"},{"location":"0%20-%20Fundamentos%20del%20Dise%C3%B1o%20de%20Interfaces%20Web/#011-iconografia","title":"\u2728 0.1.1 Iconograf\u00eda","text":"<p>La iconograf\u00eda se refiere al uso de iconos o s\u00edmbolos gr\u00e1ficos para representar objetos, ideas, acciones o funciones de manera visual.</p> <p>En el dise\u00f1o de interfaces web, los iconos son herramientas poderosas que permiten transmitir informaci\u00f3n de forma r\u00e1pida, clara y sin la necesidad de utilizar texto extenso.</p> <p>Los iconos act\u00faan como atajos visuales, mejorando la experiencia de usuario al hacer que la navegaci\u00f3n sea m\u00e1s intuitiva y comprensible.</p>"},{"location":"0%20-%20Fundamentos%20del%20Dise%C3%B1o%20de%20Interfaces%20Web/#012-funciones-esenciales-en-el-diseno-web","title":"\ud83c\udf89 0.1.2 Funciones esenciales en el dise\u00f1o web:","text":"<ul> <li> <p>Simplificaci\u00f3n de la informaci\u00f3n</p> <p>Un icono bien dise\u00f1ado puede comunicar una idea o acci\u00f3n en cuesti\u00f3n de milisegundos, lo que reduce la necesidad de textos explicativos. Esto es especialmente \u00fatil en interfaces m\u00f3viles o en sitios con contenido limitado por espacio.</p> </li> <li> <p>Mejora de la navegaci\u00f3n</p> <p>Al representar acciones o funciones de manera visual, los iconos facilitan que los usuarios identifiquen r\u00e1pidamente los elementos interactivos de la p\u00e1gina, como men\u00fas, botones de acciones y enlaces.</p> </li> <li> <p>Refuerzo de la identidad visual</p> <p>El uso de iconos personalizados alineados con la identidad visual de una marca puede ayudar a crear un dise\u00f1o coherente y distintivo, haciendo que la web sea m\u00e1s memorable.</p> </li> <li> <p>Estandarizaci\u00f3n y familiaridad</p> <p>Los iconos que representan funciones comunes (como el carrito de compras, la lupa de b\u00fasqueda, o la casa para la p\u00e1gina de inicio) son ya entendidos de forma universal por la mayor\u00eda de los usuarios. Esto facilita la navegaci\u00f3n y reduce la curva de aprendizaje.</p> </li> </ul> <p>El ejemplo de DON'T WALK</p> <p></p> <p>En EEUU los sem\u00e1foros no usaban iconos o s\u00edmbolos para decirle al peat\u00f3n cu\u00e1ndo pod\u00eda cruzar la calle, simplemente mostraban el texto \"DONT WALK\" en rojo para que los peatones no cruzaban la calle o \"WALK\" para que la cruzaran.</p>"},{"location":"0%20-%20Fundamentos%20del%20Dise%C3%B1o%20de%20Interfaces%20Web/#013-tipos-de-iconos-y-usos-comunes","title":"\ud83d\udca2 0.1.3 Tipos de iconos y usos comunes","text":"<p>Existen diferentes tipos de iconos en el dise\u00f1o de interfaces web, cada uno con funciones y aplicaciones espec\u00edficas:</p> <p>\ud83c\udf10 <code>Iconos de navegaci\u00f3n</code>  Estos iconos permiten al usuario moverse por la interfaz. Ejemplos comunes son el men\u00fa hamburguesa (tres l\u00edneas horizontales para desplegar un men\u00fa), la flecha de regreso, o la casa que lleva a la p\u00e1gina principal.</p> <p>\ud83c\udfc3\u200d\u2640\ufe0f\u200d\u27a1\ufe0f <code>Iconos de acci\u00f3n</code>  Estos iconos indican al usuario que puede realizar una acci\u00f3n. Por ejemplo, el icono de lupa que permite buscar informaci\u00f3n, el carrito de compras que a\u00f1ade productos, o el icono de descarga.</p> <p>\u2705 <code>Iconos de estado</code> Informan sobre el estado actual de un proceso. Por ejemplo, un check puede se\u00f1alar que una tarea est\u00e1 completada, mientras que un reloj indica que algo est\u00e1 en progreso o pendiente.</p> <p>\ud83d\udedc <code>Iconos de redes sociales</code>  Los iconos que representan plataformas como Facebook, Twitter o Instagram son elementos recurrentes en muchas webs y facilitan la vinculaci\u00f3n de contenido con perfiles o cuentas en redes.</p>"},{"location":"0%20-%20Fundamentos%20del%20Dise%C3%B1o%20de%20Interfaces%20Web/#014-buenas-practicas-en-el-uso-de-iconos","title":"\ud83d\udcd3 0.1.4 Buenas Pr\u00e1cticas en el Uso de iconos","text":"<p>Para que los iconos en una interfaz web sean efectivos, es necesario tener en cuenta varias buenas pr\u00e1cticas en su dise\u00f1o y aplicaci\u00f3n</p> <ul> <li> <p>Claridad y simplicidad: Los iconos deben ser f\u00e1ciles de interpretar, incluso en tama\u00f1os peque\u00f1os. Un icono demasiado detallado puede resultar confuso. La simplicidad es clave para que el usuario comprenda r\u00e1pidamente su funci\u00f3n.</p> </li> <li> <p>Consistencia visual: Todos los iconos de una interfaz deben compartir un estilo coherente, en t\u00e9rminos de l\u00edneas, grosor, tama\u00f1o y color. Esta consistencia asegura que el dise\u00f1o se vea uniforme y profesional.</p> </li> <li> <p>Compatibilidad cultural: Algunos iconos tienen significados diferentes en distintos contextos culturales. Por ejemplo, un icono que simboliza \"OK\" en una cultura puede tener un significado negativo en otra. Es importante considerar las variaciones culturales si la web est\u00e1 dirigida a un p\u00fablico global.</p> </li> <li> <p>Compatibilidad t\u00e9cnica: Los iconos deben renderizarse correctamente en todos los navegadores y dispositivos. Esto incluye tanto las versiones de escritorio como las m\u00f3viles. Los iconos en formato SVG (Scalable Vector Graphics) son una opci\u00f3n popular ya que son escalables sin perder calidad.</p> </li> <li> <p>Accesibilidad: Es fundamental acompa\u00f1ar los iconos con texto alternativo (atributo alt) o etiquetas ARIA para asegurar que los usuarios con discapacidades visuales, que utilicen lectores de pantalla, puedan entender su funci\u00f3n.</p> </li> </ul>"},{"location":"0%20-%20Fundamentos%20del%20Dise%C3%B1o%20de%20Interfaces%20Web/#015-psicologia-y-simbologia-en-la-iconografia","title":"\ud83e\udd2f 0.1.5 Psicolog\u00eda y Simbolog\u00eda en la Iconograf\u00eda","text":"<p>Los iconos, al igual que otros elementos visuales, est\u00e1n profundamente conectados con la psicolog\u00eda del usuario. La interpretaci\u00f3n de un s\u00edmbolo no solo depende de su apariencia, sino tambi\u00e9n de las asociaciones que las personas tienen con \u00e9l. A lo largo del tiempo, algunos iconos se han convertido en universales y sus significados son pr\u00e1cticamente autom\u00e1ticos. Por ejemplo, una papelera es reconocida a nivel global como un s\u00edmbolo para eliminar o descartar contenido, mientras que una flecha hacia abajo a menudo se interpreta como una opci\u00f3n para descargar archivos o desplegar men\u00fas.</p> <p>El uso de estos s\u00edmbolos conocidos en el dise\u00f1o web tiene m\u00faltiples beneficios. En primer lugar, reduce la curva de aprendizaje para los usuarios, ya que no necesitan interpretar nuevos signos o leer explicaciones detalladas para entender una acci\u00f3n. Este conocimiento previo hace que la interacci\u00f3n con la interfaz sea m\u00e1s intuitiva y eficiente. Adem\u00e1s, los s\u00edmbolos universales como estos fomentan la usabilidad, ya que el usuario puede anticipar la funci\u00f3n del icono sin esfuerzo, mejorando as\u00ed su experiencia en la p\u00e1gina.</p> <p>Sin embargo, el uso de iconograf\u00eda tambi\u00e9n debe ir acompa\u00f1ado de una consideraci\u00f3n cultural y del contexto en el que se va a aplicar. En algunos casos, un icono que es evidente para un grupo de usuarios puede no tener el mismo significado para otro grupo. Por lo tanto, es recomendable realizar pruebas de usuario para asegurarse de que los iconos sean interpretados correctamente en el p\u00fablico objetivo.</p>"},{"location":"0%20-%20Fundamentos%20del%20Dise%C3%B1o%20de%20Interfaces%20Web/#016-herramientas-y-tecnologias-para-la-creacion-de-iconos","title":"\ud83e\uddf0 0.1.6 Herramientas y Tecnolog\u00edas para la Creaci\u00f3n de Iconos","text":"<p>Existen varias herramientas que permiten dise\u00f1ar y aplicar iconograf\u00eda en el dise\u00f1o web de forma eficiente:</p> <ul> <li> <p><code>Iconos predise\u00f1ados</code>  Herramientas como Font Awesome, Material Icons o Iconmonstr proporcionan bibliotecas de iconos predise\u00f1ados que pueden ser f\u00e1cilmente integrados en proyectos web mediante c\u00f3digo HTML y CSS.</p> </li> <li> <p><code>Dise\u00f1o personalizado</code>  Para un enfoque m\u00e1s personalizado, herramientas como Adobe Illustrator, Sketch o Figma permiten crear iconos vectoriales \u00fanicos que pueden alinearse perfectamente con la identidad de la marca.</p> </li> <li> <p><code>Iconos en formato SVG</code>  El formato SVG es ideal para usar en la web, ya que estos archivos son ligeros y escalables, lo que garantiza una apariencia n\u00edtida en cualquier tama\u00f1o de pantalla. Adem\u00e1s, los iconos SVG pueden ser estilizados directamente con CSS, lo que permite cambiar colores o tama\u00f1os seg\u00fan sea necesario.</p> </li> </ul> <p>\u00c1rea de recursos</p> <p>Font Awesome | Material Icons | Iconmonstr | Sketch | Figma</p>"},{"location":"0%20-%20Fundamentos%20del%20Dise%C3%B1o%20de%20Interfaces%20Web/#02-los-colores","title":"\ud83c\udf08 0.2 Los Colores","text":"<p>El color es uno de los elementos m\u00e1s poderosos en el dise\u00f1o de interfaces web, ya que tiene la capacidad de influir en la percepci\u00f3n, las emociones y el comportamiento de los usuarios.</p> <p>Una paleta de colores bien seleccionada no solo mejora la est\u00e9tica de la p\u00e1gina, sino que tambi\u00e9n facilita la navegaci\u00f3n, refuerza la identidad de marca y establece una jerarqu\u00eda visual clara.</p> <p>Adem\u00e1s, el uso adecuado del color puede mejorar la accesibilidad y la usabilidad de la interfaz, permitiendo que la informaci\u00f3n sea m\u00e1s comprensible y f\u00e1cil de seguir. En este apartado, exploraremos la importancia de los colores en el dise\u00f1o web, c\u00f3mo seleccionarlos de manera efectiva y c\u00f3mo aplicarlos para mejorar la experiencia del usuario.</p> <p>El uso del color en el dise\u00f1o de interfaces web va mucho m\u00e1s all\u00e1 de un simple elemento decorativo. El color es una herramienta clave para transmitir sensaciones, guiar la navegaci\u00f3n del usuario, crear contrastes que mejoren la legibilidad y, en \u00faltima instancia, generar una experiencia m\u00e1s atractiva y funcional. La selecci\u00f3n adecuada de una paleta de colores no solo afecta la est\u00e9tica de una web, sino tambi\u00e9n la forma en la que los usuarios interact\u00faan con ella, perciben el contenido y toman decisiones.</p> <p>En el dise\u00f1o web, el color se emplea de diversas formas: para dar vida a los elementos visuales, generar coherencia en la identidad de marca, y destacar o agrupar informaci\u00f3n. Adem\u00e1s, la correcta elecci\u00f3n de colores puede impactar directamente en la accesibilidad del sitio, haciendo que este sea m\u00e1s inclusivo para personas con discapacidades visuales o daltonismo.</p>"},{"location":"0%20-%20Fundamentos%20del%20Dise%C3%B1o%20de%20Interfaces%20Web/#021-psicologia-del-color","title":"\ud83d\udde3\ufe0f 0.2.1 Psicolog\u00eda del Color","text":"<p>Uno de los aspectos m\u00e1s importantes del uso del color en el dise\u00f1o web es su capacidad para evocar emociones y transmitir mensajes de manera impl\u00edcita. La psicolog\u00eda del color estudia c\u00f3mo los colores afectan las emociones y comportamientos humanos, algo que los dise\u00f1adores web deben tener en cuenta al seleccionar la paleta de una interfaz.</p> <p>Cada color puede generar diferentes respuestas emocionales, y su elecci\u00f3n debe alinearse con los objetivos del sitio web y la marca.</p> <ul> <li> <p>\u2b55 <code>Rojo</code> Un color asociado con la pasi\u00f3n, la energ\u00eda y la urgencia. Suele utilizarse para crear sensaci\u00f3n de urgencia (como en ofertas o promociones) o para llamar la atenci\u00f3n sobre elementos importantes, aunque en exceso puede generar sensaci\u00f3n de agresividad.</p> </li> <li> <p>\ud83d\udd37 <code>Azul</code> Se asocia con la calma, la confianza y la profesionalidad. Es un color muy utilizado en sitios web corporativos o de servicios financieros, ya que transmite estabilidad y seguridad.</p> </li> <li> <p>\ud83d\udc9a <code>Verde</code> Evoca asociaciones con la naturaleza, el crecimiento y la salud. Suele emplearse en sitios relacionados con el bienestar, el medio ambiente o la sostenibilidad. Tambi\u00e9n est\u00e1 relacionado con conceptos positivos como el \u00e9xito o la aprobaci\u00f3n.</p> </li> <li> <p>\ud83d\udc9b <code>Amarillo</code> El amarillo es un color brillante y optimista que atrae la atenci\u00f3n, aunque en exceso puede resultar abrumador. Se utiliza para generar sensaciones de alegr\u00eda o para resaltar avisos o advertencias.</p> </li> <li> <p>\u26ab <code>Negro</code> Representa elegancia, sofisticaci\u00f3n y modernidad. Es com\u00fan en marcas de lujo o sitios que buscan proyectar una imagen profesional y seria.</p> </li> </ul> <p>Diferentes casos de uso</p> <p>Es importante considerar que la psicolog\u00eda del color puede variar culturalmente. Por ejemplo, en algunos pa\u00edses, el blanco est\u00e1 asociado con la pureza y la paz, mientras que en otros puede tener connotaciones de luto o tristeza. Por lo tanto, los dise\u00f1adores deben investigar las interpretaciones culturales del color en su p\u00fablico objetivo.</p>"},{"location":"0%20-%20Fundamentos%20del%20Dise%C3%B1o%20de%20Interfaces%20Web/#022-teoria-del-color-y-paletas-de-colores","title":"\ud83d\udd8a\ufe0f 0.2.2 Teor\u00eda del Color y Paletas de Colores","text":"<p>La teor\u00eda del color es un conjunto de reglas que describe c\u00f3mo los colores interact\u00faan entre s\u00ed. Esta teor\u00eda ayuda a los dise\u00f1adores a seleccionar combinaciones que sean visualmente arm\u00f3nicas y que transmitan el mensaje adecuado.</p> <p>Existen varios esquemas crom\u00e1ticos utilizados com\u00fanmente en el dise\u00f1o de interfaces web</p> <ul> <li> <p><code>Colores complementarios</code> Son colores opuestos en el c\u00edrculo crom\u00e1tico (como el azul y el naranja, o el rojo y el verde). Estas combinaciones generan un alto contraste, lo que puede ser \u00fatil para destacar elementos clave, como botones de llamada a la acci\u00f3n (CTA), aunque deben utilizarse con moderaci\u00f3n para no abrumar al usuario.</p> </li> <li> <p><code>Colores an\u00e1logos</code> Son aquellos que est\u00e1n pr\u00f3ximos en el c\u00edrculo crom\u00e1tico (como el azul, el verde y el cian). Estas combinaciones tienden a ser armoniosas y relajantes, lo que las hace adecuadas para interfaces que buscan una apariencia suave y equilibrada.</p> </li> <li> <p><code>Colores tri\u00e1dicos</code> Son tres colores equidistantes en el c\u00edrculo crom\u00e1tico (por ejemplo, rojo, amarillo y azul). Este esquema ofrece contraste y balance, aunque es m\u00e1s complicado de implementar sin generar caos visual, por lo que debe usarse con cuidado.</p> </li> <li> <p><code>Monocrom\u00e1tico</code> Utiliza distintas tonalidades, saturaciones y valores de un solo color. Este esquema es elegante y sobrio, y es com\u00fan en sitios web minimalistas o que buscan una est\u00e9tica moderna y uniforme.</p> </li> </ul> <p>Consejo</p> <p>La selecci\u00f3n de una paleta de colores debe considerar no solo la est\u00e9tica, sino tambi\u00e9n la legibilidad y el contraste. Los colores deben usarse para guiar al usuario por la p\u00e1gina, ayud\u00e1ndolo a distinguir entre diferentes tipos de contenido, botones de acci\u00f3n y secciones. El uso del color para jerarquizar la informaci\u00f3n tambi\u00e9n contribuye a una experiencia de usuario m\u00e1s fluida.</p>"},{"location":"0%20-%20Fundamentos%20del%20Dise%C3%B1o%20de%20Interfaces%20Web/#023-contraste-y-legibilidad","title":"\ud83c\udf04 0.2.3 Contraste y Legibilidad","text":"<p>El contraste entre el fondo y el texto o los elementos interactivos es crucial para la legibilidad de una web. Un buen contraste facilita que los usuarios lean el contenido sin esfuerzo y que distingan f\u00e1cilmente los elementos de la interfaz. </p> <p>Un ejemplo com\u00fan es el texto negro sobre fondo blanco, que proporciona el mayor nivel de contraste posible. Cuando los colores utilizados no generan suficiente contraste, puede volverse dif\u00edcil para el usuario leer el texto o identificar las acciones que puede realizar.</p> <p>Adem\u00e1s, una mala elecci\u00f3n de contraste puede afectar gravemente la accesibilidad para personas con problemas visuales, como aquellos con baja visi\u00f3n o daltonismo.</p> <p>Para asegurarse de que los niveles de contraste sean adecuados, existen herramientas como WCAG Contrast Checker, que permite verificar si los colores cumplen con las pautas de accesibilidad establecidas por la Web Content Accessibility Guidelines (WCAG).</p> <p>Ideas para elegir una buena paleta de colores</p> <p>En la red social Pinterest pod\u00e9is encontrar muy buenos ejemplos de elecci\u00f3n de colores para una p\u00e1gina web. Pod\u00e9is probar a buscar con el t\u00e9rmino Web Palette Colors. Otra web bastante interesante para el tema de los colores en una web es \ud83d\udc96 Colour Lovers</p>"},{"location":"0%20-%20Fundamentos%20del%20Dise%C3%B1o%20de%20Interfaces%20Web/#024-uso-del-color-para-la-navegacion-y-jerarquia-visual","title":"\ud83c\udf6d 0.2.4 Uso del Color para la Navegaci\u00f3n y Jerarqu\u00eda Visual","text":"<p>El color tambi\u00e9n desempe\u00f1a un papel crucial en la organizaci\u00f3n y presentaci\u00f3n de la informaci\u00f3n. A trav\u00e9s del color, los dise\u00f1adores pueden establecer una jerarqu\u00eda visual clara, lo que ayuda al usuario a identificar la importancia de diferentes elementos de la p\u00e1gina. Esto se puede lograr mediante varios enfoques:</p> <p>\ud83e\ude87 <code>Resaltar botones de acci\u00f3n</code>  Utilizar colores contrastantes y llamativos para botones de acciones clave, como el registro, la compra o el env\u00edo de formularios. Los colores c\u00e1lidos como el rojo, naranja o amarillo son comunes para este tipo de elementos, ya que destacan frente al resto de la paleta.</p> <p>\ud83d\udcda <code>Agrupaci\u00f3n de informaci\u00f3n</code>  Los colores pueden usarse para agrupar visualmente elementos relacionados, lo que ayuda a los usuarios a entender de forma r\u00e1pida las conexiones entre diferentes secciones o contenidos. Por ejemplo, en un formulario largo, diferentes colores pueden separar visualmente cada secci\u00f3n, facilitando la comprensi\u00f3n.</p> <p>\ud83d\udd26 <code>Indicadores visuales</code>  Los colores tambi\u00e9n pueden utilizarse para se\u00f1alar estados o acciones espec\u00edficas, como el uso de verde para indicar que una acci\u00f3n se ha completado con \u00e9xito, o rojo para mostrar errores o advertencias.</p> <p>\ud83c\udfaf <code>Foco en la atenci\u00f3n</code>  Un buen uso del color puede dirigir la atenci\u00f3n del usuario hacia \u00e1reas clave de la p\u00e1gina. Por ejemplo, en una landing page, el color principal se puede usar para dirigir al usuario hacia el bot\u00f3n de compra o registro, mientras que colores secundarios se utilizan para otros elementos menos importantes.</p>"},{"location":"0%20-%20Fundamentos%20del%20Dise%C3%B1o%20de%20Interfaces%20Web/#025-colores-y-accesibilidad","title":"\ud83d\uded7 0.2.5 Colores y Accesibilidad","text":"<p>El uso del color tambi\u00e9n tiene un impacto significativo en la accesibilidad de una p\u00e1gina web. No todos los usuarios perciben los colores de la misma manera, lo que significa que los dise\u00f1adores deben ser conscientes de condiciones como el daltonismo (incapacidad para distinguir ciertos colores) o la baja visi\u00f3n.</p> <p>Para garantizar la accesibilidad, es fundamental que los colores no sean el \u00fanico medio para transmitir informaci\u00f3n. Por ejemplo, si un formulario usa \u00fanicamente el color rojo para se\u00f1alar errores, los usuarios con dificultades para distinguir ese color podr\u00edan no notar el mensaje de error. En lugar de depender \u00fanicamente del color, se pueden agregar otros indicadores, como \u00edconos o mensajes de texto que proporcionen la misma informaci\u00f3n de manera visual y accesible.</p> <p>Existen herramientas, como Color Oracle, que permiten simular c\u00f3mo un sitio web se ve para usuarios con distintas discapacidades visuales, facilitando as\u00ed el ajuste de la paleta de colores para que sea accesible para todos.</p>"},{"location":"0%20-%20Fundamentos%20del%20Dise%C3%B1o%20de%20Interfaces%20Web/#026-tendencias-actuales-en-el-uso-del-color-en-web","title":"\ud83e\udded 0.2.6 Tendencias Actuales en el Uso del Color en Web","text":"<p>Las tendencias en el uso del color en el dise\u00f1o web evolucionan constantemente, influenciadas por cambios en la tecnolog\u00eda, el dise\u00f1o de dispositivos y las preferencias del usuario. Algunas de las tendencias actuales incluyen:</p> <p><code>Modos oscuro y claro</code>  Muchas interfaces web ahora ofrecen a los usuarios la opci\u00f3n de cambiar entre modo oscuro y claro, lo que requiere la adaptaci\u00f3n de la paleta de colores para ambas configuraciones. El modo oscuro reduce la fatiga visual en condiciones de poca luz, mientras que el modo claro es m\u00e1s adecuado para entornos con buena iluminaci\u00f3n.</p> <p><code>Colores vivos y saturados</code>  En contraste con los dise\u00f1os m\u00e1s sobrios y minimalistas del pasado, muchos sitios web ahora utilizan colores intensos y saturados para captar la atenci\u00f3n y generar un impacto visual fuerte.</p> <p><code>Gradientes de color</code>  Los gradientes han vuelto a ser populares, proporcionando profundidad y dinamismo a los fondos o elementos visuales. Este tipo de aplicaci\u00f3n de color puede ser sutil o audaz, dependiendo del dise\u00f1o.</p>"},{"location":"0%20-%20Fundamentos%20del%20Dise%C3%B1o%20de%20Interfaces%20Web/#127-herramientas-para-la-seleccion-de-colores","title":"\ud83d\udee0\ufe0f1.2.7 Herramientas para la Selecci\u00f3n de Colores","text":"<p>Hoy en d\u00eda, los dise\u00f1adores web cuentan con diversas herramientas que facilitan la elecci\u00f3n de una paleta de colores adecuada para una interfaz. Estas herramientas permiten explorar combinaciones crom\u00e1ticas, verificar el contraste y garantizar que los colores seleccionados se alineen con los objetivos de la p\u00e1gina web. Algunas de las herramientas m\u00e1s populares son:</p> <p>Adobe Color Esta plataforma es una de las m\u00e1s utilizadas para crear y explorar paletas de colores. Permite generar esquemas de color basados en reglas como colores complementarios, an\u00e1logos, tri\u00e1dicos o monocrom\u00e1ticos, y tambi\u00e9n permite ajustar el brillo, la saturaci\u00f3n y otros par\u00e1metros. Adem\u00e1s, Adobe Color incluye una herramienta de accesibilidad que permite verificar si una paleta es apropiada para usuarios con dificultades visuales.</p> <p>Coolors Una herramienta sencilla que permite generar paletas de colores con solo presionar un bot\u00f3n. Coolors tambi\u00e9n ofrece funcionalidades para ajustar las paletas, verificar el contraste y exportar los colores en diferentes formatos (RGB, HEX, CMYK).</p> <p>Material Design Color Tool Esta herramienta, dise\u00f1ada por Google, permite seleccionar colores basados en las directrices de dise\u00f1o de Material Design. Es \u00fatil para aquellos que buscan crear una experiencia coherente y bien estructurada a partir de la filosof\u00eda de dise\u00f1o de Google.</p> <p>ColorZilla Una extensi\u00f3n para navegadores que permite a los dise\u00f1adores extraer colores directamente desde sitios web existentes. Es \u00fatil para obtener inspiraci\u00f3n de otras interfaces o para asegurarse de que los colores se mantengan consistentes en todo el sitio.</p> <p>Contrast Ratio Una herramienta centrada en verificar la accesibilidad de las combinaciones de colores. Proporciona la relaci\u00f3n de contraste entre un color de fondo y un color de primer plano (texto, \u00edconos, etc.), y asegura que cumplan con los est\u00e1ndares de accesibilidad establecidos por la WCAG (Web Content Accessibility Guidelines).</p>"},{"location":"0%20-%20Fundamentos%20del%20Dise%C3%B1o%20de%20Interfaces%20Web/#028-implementacion-del-color-en-css","title":"\ud83e\uddd1\ud83c\udffb\u200d\ud83d\udcbb 0.2.8 Implementaci\u00f3n del Color en CSS","text":"<p>Una vez seleccionada la paleta de colores para una interfaz, la implementaci\u00f3n en c\u00f3digo CSS es un paso crucial para garantizar que los colores se apliquen correctamente en la p\u00e1gina web.</p> <p>El uso de colores en CSS es vers\u00e1til, permitiendo definir colores tanto en valores HEX <code>#FF5733</code>, RGB <code>rgb(255, 87, 51)</code> como en HSL <code>hsl(9, 100%, 60%)</code>. Cada uno de estos formatos tiene ventajas en diferentes contextos.</p> <p><code>HEX</code> Es el formato m\u00e1s com\u00fan para definir colores en CSS. Su simplicidad y universalidad lo convierten en la opci\u00f3n preferida para la mayor\u00eda de los desarrolladores.</p> <p><code>RGB</code> Es ideal cuando se necesita controlar los niveles de transparencia o cuando se quiere realizar c\u00e1lculos de color din\u00e1micos mediante CSS o JavaScript.</p> <p><code>HSL</code> Este formato permite definir colores mediante matiz, saturaci\u00f3n y luminosidad, lo que facilita los ajustes de color, ya que refleja c\u00f3mo los humanos percibimos los colores, en lugar de basarse solo en valores de rojo, verde y azul.</p> <p>El uso de variables de CSS (--primary-color, --secondary-color, etc.) facilita la reutilizaci\u00f3n de los colores a lo largo del c\u00f3digo, permitiendo cambios m\u00e1s r\u00e1pidos en toda la interfaz si es necesario ajustar la paleta. Esto es especialmente \u00fatil en proyectos grandes o al implementar temas oscuros y claros, ya que los colores pueden ser cambiados globalmente sin necesidad de modificar cada estilo individualmente.</p> <pre><code>/* Definir las variables de color en el selector :root para que sean globales */\n:root {\n    --primary-color: #3498db; /* Azul claro */\n    --secondary-color: #2ecc71; /* Verde */\n    --text-color: #333333; /* Texto oscuro */\n    --background-color: #f4f4f4; /* Fondo claro */\n    --button-hover-color: #2980b9; /* Azul m\u00e1s oscuro para hover */\n    --border-color: #bdc3c7; /* Color del borde gris claro */\n}\n\n/* Aplicar las variables de color a diferentes elementos */\nbody {\n    background-color: var(--background-color);\n    color: var(--text-color);\n    font-family: Arial, sans-serif;\n    margin: 0;\n    padding: 20px;\n}\n\nh1 {\n    color: var(--primary-color);\n    font-size: 2.5em;\n}\n\np {\n    color: var(--text-color);\n    line-height: 0.6;\n}\n\nbutton {\n    background-color: var(--primary-color);\n    color: white;\n    border: none;\n    padding: 10px 20px;\n    font-size: 1em;\n    cursor: pointer;\n    border-radius: 5px;\n    transition: background-color 0.3s ease;\n}\n\nbutton:hover {\n    background-color: var(--button-hover-color);\n}\n\n.container {\n    border: 1px solid var(--border-color);\n    padding: 20px;\n    border-radius: 10px;\n    background-color: white;\n    max-width: 600px;\n    margin: 20px auto;\n    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n}\n</code></pre>"},{"location":"0%20-%20Fundamentos%20del%20Dise%C3%B1o%20de%20Interfaces%20Web/#029-colores-en-el-diseno-responsive","title":"\ud83c\udfa8 0.2.9 Colores en el Dise\u00f1o Responsive","text":"<p>El dise\u00f1o web moderno exige que las interfaces sean responsivas, lo que significa que deben adaptarse y verse bien en una variedad de dispositivos y tama\u00f1os de pantalla, desde tel\u00e9fonos m\u00f3viles hasta pantallas de escritorio. Esto incluye el uso inteligente del color para garantizar que los elementos sean legibles y visualmente atractivos sin importar el dispositivo que se est\u00e9 utilizando.</p> <p>Uno de los desaf\u00edos en el dise\u00f1o responsivo es que los colores pueden percibirse de manera diferente en pantallas peque\u00f1as en comparaci\u00f3n con pantallas m\u00e1s grandes. Por ejemplo, un color de fondo oscuro que se ve bien en un monitor de escritorio puede volverse demasiado opaco y dificultar la legibilidad en una pantalla de m\u00f3vil. De igual manera, los colores brillantes o saturados pueden parecer abrumadores en pantallas m\u00e1s peque\u00f1as. Por eso, es esencial que los dise\u00f1adores ajusten los colores, el contraste y los estilos de los elementos dependiendo del dispositivo.</p> <p>CSS ofrece herramientas como media queries que permiten cambiar el estilo de una p\u00e1gina web seg\u00fan el tama\u00f1o de la pantalla. Esto incluye ajustar las paletas de colores, por ejemplo, aclarar el fondo o cambiar el color de los botones en pantallas peque\u00f1as para mejorar la visibilidad y la usabilidad.</p> <p>Tambi\u00e9n es posible ajustar otros factores relacionados con el color, como el grosor de las l\u00edneas de los \u00edconos o las sombras, para hacer que los elementos visuales sean m\u00e1s claros en dispositivos m\u00f3viles.</p>"},{"location":"0%20-%20Fundamentos%20del%20Dise%C3%B1o%20de%20Interfaces%20Web/#0210-evaluacion-y-ajustes-de-color-en-el-proceso-de-diseno","title":"\u270f 0.2.10 Evaluaci\u00f3n y Ajustes de Color en el Proceso de Dise\u00f1o","text":"<p>Una vez que la paleta de colores ha sido implementada en el dise\u00f1o, es importante realizar una evaluaci\u00f3n continua y ajustarla seg\u00fan las necesidades del usuario y los objetivos del sitio.</p> <p>Esto se puede hacer a trav\u00e9s de pruebas de usuario, an\u00e1lisis de accesibilidad y monitoreo del rendimiento del sitio.</p> <p><code>Pruebas de usuario</code> Las pruebas con usuarios reales son fundamentales para verificar que los colores elegidos cumplen con las expectativas y necesidades del p\u00fablico objetivo. Estas pruebas pueden revelar si ciertos colores est\u00e1n generando confusi\u00f3n, si hay suficiente contraste en las \u00e1reas clave, o si los usuarios est\u00e1n ignorando elementos importantes debido a su falta de prominencia.</p> <p><code>Pruebas de accesibilidad</code> Herramientas como WAVE o ss permiten verificar si el sitio web cumple con las pautas de accesibilidad en t\u00e9rminos de contraste de color, uso adecuado de textos alternativos y elementos visuales. Esto es esencial para asegurar que el sitio sea inclusivo para todos los usuarios.</p> <p><code>Monitoreo del rendimiento</code> Adem\u00e1s del rendimiento t\u00e9cnico del sitio (velocidad de carga, interactividad), el color tambi\u00e9n puede influir en las m\u00e9tricas de comportamiento del usuario, como el tiempo de permanencia en el sitio, las tasas de clic en botones de acci\u00f3n, y la conversi\u00f3n en formularios o p\u00e1ginas de venta. Un an\u00e1lisis de estos datos puede ofrecer informaci\u00f3n valiosa sobre si los colores est\u00e1n ayudando o perjudicando la experiencia del usuario.</p> <p>Dinamismo en el dise\u00f1o web</p> <p>El color en el dise\u00f1o web no es una decisi\u00f3n est\u00e1tica. A medida que evoluciona el sitio, crece la audiencia o cambian las tendencias del dise\u00f1o, los colores deben ser revisados y ajustados para seguir cumpliendo con los objetivos de la p\u00e1gina.</p>"},{"location":"0%20-%20Fundamentos%20del%20Dise%C3%B1o%20de%20Interfaces%20Web/#03-tipografia","title":"\ud83d\udd20 0.3 Tipograf\u00eda","text":"<p>La tipograf\u00eda es un elemento fundamental en el dise\u00f1o de interfaces web, ya que impacta directamente en la legibilidad, la percepci\u00f3n y la experiencia del usuario. Seleccionar y aplicar correctamente las tipograf\u00edas en una p\u00e1gina web no solo contribuye a la est\u00e9tica del sitio, sino que tambi\u00e9n mejora la accesibilidad, la jerarquizaci\u00f3n de la informaci\u00f3n y la usabilidad.</p> <p>En este apartado, abordaremos diversos aspectos clave de la tipograf\u00eda en dise\u00f1o web, incluyendo la selecci\u00f3n de fuentes, el uso de sistemas tipogr\u00e1ficos como Google Fonts, las propiedades CSS m\u00e1s importantes para manipular texto, y c\u00f3mo implementar una jerarqu\u00eda tipogr\u00e1fica que facilite la navegaci\u00f3n y comprensi\u00f3n de los contenidos.</p>"},{"location":"0%20-%20Fundamentos%20del%20Dise%C3%B1o%20de%20Interfaces%20Web/#031-la-importancia-de-la-tipografia-en-el-diseno-web","title":"0.3.1 La Importancia de la Tipograf\u00eda en el Dise\u00f1o Web","text":"<p>La tipograf\u00eda no es simplemente la elecci\u00f3n de una fuente atractiva, sino una herramienta crucial que define c\u00f3mo los usuarios perciben y procesan la informaci\u00f3n presentada en la web. En t\u00e9rminos de experiencia de usuario (UX), una tipograf\u00eda mal seleccionada o mal implementada puede generar confusi\u00f3n, dificultar la lectura y hacer que el usuario abandone el sitio.</p> <p>Una buena tipograf\u00eda en la web debe cumplir con varios requisitos:</p> <p><code>Legibilidad</code> Las fuentes deben ser f\u00e1ciles de leer en pantallas de diferentes tama\u00f1os y resoluciones. Es esencial seleccionar una tipograf\u00eda que funcione bien tanto en dispositivos m\u00f3viles como en pantallas grandes.</p> <p><code>Jerarqu\u00eda visual</code> Una correcta aplicaci\u00f3n de diferentes tama\u00f1os, pesos y estilos tipogr\u00e1ficos permite establecer niveles de importancia entre los textos, como titulares, subt\u00edtulos, p\u00e1rrafos y enlaces.</p> <p><code>Coherencia</code> La tipograf\u00eda debe alinearse con la identidad visual del sitio, es decir, debe ser coherente con los colores, el dise\u00f1o general y los objetivos del sitio.</p> <p><code>Accesibilidad</code> La elecci\u00f3n de la tipograf\u00eda tambi\u00e9n debe tener en cuenta la accesibilidad para personas con discapacidades visuales, permitiendo que el texto sea lo m\u00e1s claro y legible posible.</p> <p>D\u00f3nde encontrar fuentes</p> <p>Existen muchas p\u00e1ginas de donde poder descargar fuentes para el uso web o incluso, vincular directamente el archivo de fuente sin necesidad de descargarlo previamente. Algunos ejemplos son Google Fonts | Font Squirrel | Awwwards | Font Space</p>"},{"location":"0%20-%20Fundamentos%20del%20Dise%C3%B1o%20de%20Interfaces%20Web/#032-tipos-de-fuentes-en-la-web","title":"0.3.2 Tipos de Fuentes en la Web","text":"<p>Las fuentes tipogr\u00e1ficas se dividen tradicionalmente en tres grandes categor\u00edas, cada una con caracter\u00edsticas espec\u00edficas que influyen en su uso en el dise\u00f1o web.</p> <p><code>Fuentes Serif</code> Se caracterizan por tener peque\u00f1as l\u00edneas o remates al final de cada letra. Estas fuentes son ideales para textos largos, como art\u00edculos o posts, ya que facilitan la lectura al guiar el ojo de una letra a otra. Ejemplos comunes son Times New Roman, Georgia o Merriweather.</p> <p><code>Fuentes Sans Serif</code> Son fuentes sin remates, m\u00e1s simples y modernas, que se utilizan a menudo en interfaces digitales por su claridad y legibilidad en pantallas. Las fuentes Arial, Helvetica y Roboto son ejemplos comunes. Son ideales para t\u00edtulos, botones y cualquier texto que deba ser r\u00e1pidamente identificable.</p> <p><code>Fuentes Display o Decorativas</code> Estas fuentes suelen ser m\u00e1s art\u00edsticas o expresivas y se utilizan con moderaci\u00f3n, principalmente en elementos destacados, como logotipos, t\u00edtulos grandes o campa\u00f1as promocionales. Ejemplos incluyen Lobster, Pacifico, entre otras.</p> <p>Eligiendo una fuente adecuada</p> <p>La elecci\u00f3n entre estos tipos de fuentes depende del tono y el prop\u00f3sito del sitio web. Un blog formal o una p\u00e1gina de noticias puede beneficiarse de una tipograf\u00eda serif para los cuerpos de texto, mientras que una tienda en l\u00ednea o una app moderna puede optar por una sans serif para lograr un dise\u00f1o m\u00e1s limpio y directo.</p>"},{"location":"0%20-%20Fundamentos%20del%20Dise%C3%B1o%20de%20Interfaces%20Web/#033-uso-de-sistemas-de-fuentes-web-google-fonts","title":"0.3.3 Uso de Sistemas de Fuentes Web (Google Fonts)","text":"<p>Una de las herramientas m\u00e1s \u00fatiles para los dise\u00f1adores web es la amplia gama de fuentes disponibles a trav\u00e9s de sistemas como Google Fonts.</p> <p>Esta plataforma ofrece una vasta colecci\u00f3n de fuentes gratuitas que son f\u00e1ciles de implementar en cualquier p\u00e1gina web, proporcionando control total sobre el dise\u00f1o tipogr\u00e1fico sin depender de las fuentes instaladas localmente en los dispositivos de los usuarios.</p> <p>Ventajas de usar Google Fonts</p> <p><code>Accesibilidad</code> Las fuentes se cargan desde servidores de Google, asegurando que cualquier usuario pueda visualizarlas sin necesidad de tener la fuente instalada en su dispositivo.</p> <p><code>Compatibilidad</code> Google Fonts garantiza que las fuentes funcionen correctamente en todos los navegadores modernos y en diferentes dispositivos, asegurando una experiencia consistente.</p> <p><code>Variedad</code> La plataforma ofrece una amplia selecci\u00f3n de tipograf\u00edas tanto serif como sans serif, as\u00ed como fuentes decorativas, con una gama de pesos y estilos.</p> <p><code>Implementaci\u00f3n en CSS</code> Implementar Google Fonts en una p\u00e1gina web es sencillo y sigue este formato b\u00e1sico:</p> <p><pre><code>&lt;!-- En nuestras cabeceras del archivo HTML a utilizar--&gt;\n\n&lt;link href=\"https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&amp;display=swap\" rel=\"stylesheet\"&gt;\n</code></pre> Haciendo uso de la fuente importada desde Google Fonts.</p> <pre><code>/* En nuestro archivo css \u27a1 style.css */\n\nbody {\n    font-family: 'Roboto', sans-serif;\n}\n</code></pre> <p>Explicaci\u00f3n del c\u00f3digo</p> <p>En este ejemplo, se ha implementado la fuente Roboto con dos pesos diferentes (400 y 700). Tambi\u00e9n es posible especificar m\u00faltiples fuentes de respaldo en la propiedad font-family para garantizar que, si por alguna raz\u00f3n una fuente no se carga correctamente, el texto se muestre con una tipograf\u00eda similar disponible en el sistema del usuario.</p>"},{"location":"0%20-%20Fundamentos%20del%20Dise%C3%B1o%20de%20Interfaces%20Web/#034-jerarquia-tipografica","title":"0.3.4 Jerarqu\u00eda Tipogr\u00e1fica","text":"<p>La jerarqu\u00eda tipogr\u00e1fica se refiere a la organizaci\u00f3n y diferenciaci\u00f3n del texto en funci\u00f3n de su importancia.</p> <p>ssEste concepto es clave en el dise\u00f1o de interfaces web porque permite a los usuarios navegar visualmente por el contenido de manera intuitiva.</p> <p>Para crear una jerarqu\u00eda efectiva, los dise\u00f1adores pueden jugar con varios aspectos de la tipograf\u00eda:</p> <p><code>Tama\u00f1o</code> Los t\u00edtulos (h1, h2, etc.) son m\u00e1s grandes que los subt\u00edtulos y estos, a su vez, son m\u00e1s grandes que los p\u00e1rrafos de texto.</p> <p><code>Peso</code> El uso de negritas o fuentes m\u00e1s gruesas para destacar partes importantes del contenido.</p> <p><code>Color</code> Usar colores diferentes para los t\u00edtulos, enlaces o botones puede guiar la atenci\u00f3n del usuario hacia elementos clave de la p\u00e1gina.</p> <p><code>Espaciado</code> Un mayor espacio entre l\u00edneas o entre bloques de texto puede ayudar a separar visualmente las ideas y mejorar la legibilidad.</p> <p>Ejemplo de una jerarqu\u00eda b\u00e1sica en CSS:</p> <pre><code>h1 {\n    font-size: 3em;\n    font-weight: 700;\n    color: var(--primary-color);\n}\n\nh2 {\n    font-size: 2.25em;\n    font-weight: 600;\n}\n\np {\n    font-size: 1em;\n    line-height: 0.6;\n}\n</code></pre> <p>Explicaci\u00f3n del c\u00f3digo</p> <p>Este enfoque garantiza que el t\u00edtulo principal (h1) sea el elemento m\u00e1s destacado, seguido por el subt\u00edtulo (h2), y que los p\u00e1rrafos sean legibles y tengan suficiente espacio entre l\u00edneas para mejorar la comprensi\u00f3n.</p>"},{"location":"0%20-%20Fundamentos%20del%20Dise%C3%B1o%20de%20Interfaces%20Web/#035-tipografia-responsiva","title":"0.3.5 Tipograf\u00eda Responsiva","text":"<p>En el dise\u00f1o web actual, la tipograf\u00eda debe adaptarse a diferentes tama\u00f1os de pantalla y resoluciones. Un texto que se ve bien en un monitor grande puede ser ilegible en un tel\u00e9fono m\u00f3vil si no se ajusta correctamente. Para lograr una tipograf\u00eda responsiva, es posible utilizar media queries y unidades relativas.</p> <p>Por ejemplo, se puede ajustar el tama\u00f1o del texto en pantallas m\u00e1s peque\u00f1as de esta manera:</p> <pre><code>body {\n    font-size: 18px;\n}\n\n@media (max-width: 600px) {\n    body {\n        font-size: 16px;\n    }\n}\n</code></pre> <p>Unidades de medida en CSS</p> <p>Tambi\u00e9n se pueden usar unidades como rem o em en lugar de p\u00edxeles, lo que permite que el texto sea m\u00e1s flexible y se ajuste de forma autom\u00e1tica al tama\u00f1o de pantalla.</p>"},{"location":"1%20-%20Introducci%C3%B3n%20al%20Desarrollo%20de%20Interfaces%20de%20Usuario/","title":"1\ufe0f\u20e3 Introducci\u00f3n al desarrollo de interfaces de usuario con HTML5, CSS y JavaScript","text":"<p>Una interfaz gr\u00e1fica de usuario (UI) es la capa de interacci\u00f3n entre el usuario y la aplicaci\u00f3n. En este sentido, las UI web deben cumplir con los principios de usabilidad, accesibilidad y est\u00e9tica, ya que de ellas depende gran parte de la experiencia del usuario (UX). Este tema se centra en la construcci\u00f3n de UI utilizando tecnolog\u00edas web que permiten a los usuarios interactuar de manera visual y din\u00e1mica con las aplicaciones.</p>"},{"location":"1%20-%20Introducci%C3%B3n%20al%20Desarrollo%20de%20Interfaces%20de%20Usuario/#conceptos-basicos-de-una-interfaz-grafica-de-usuario","title":"Conceptos b\u00e1sicos de una interfaz gr\u00e1fica de usuario:","text":"<ul> <li>UI (User Interface): Se refiere a los componentes visuales con los que interact\u00faa un usuario en una p\u00e1gina web o aplicaci\u00f3n.</li> <li>UX (User Experience): Se refiere a la experiencia general que tiene un usuario al interactuar con una UI, considerando factores como facilidad de uso, satisfacci\u00f3n y accesibilidad.</li> </ul>"},{"location":"1%20-%20Introducci%C3%B3n%20al%20Desarrollo%20de%20Interfaces%20de%20Usuario/#caracteristicas-de-una-interfaz-de-usuario-efectiva","title":"Caracter\u00edsticas de una interfaz de usuario efectiva:","text":"<ol> <li>Usabilidad: La interfaz debe ser f\u00e1cil de usar y aprender, minimizando la curva de aprendizaje del usuario.</li> <li>Accesibilidad: La interfaz debe ser accesible para usuarios con discapacidades, respetando los est\u00e1ndares como WCAG (Web Content Accessibility Guidelines).</li> <li>Est\u00e9tica: La interfaz debe ser visualmente atractiva y coherente, utilizando colores, tipograf\u00edas y distribuciones que sigan patrones de dise\u00f1o reconocidos.</li> </ol>"},{"location":"1%20-%20Introducci%C3%B3n%20al%20Desarrollo%20de%20Interfaces%20de%20Usuario/#11-html5-la-estructura-de-las-interfaces","title":"1.1 HTML5 \ud83d\udc49\ud83c\udffb La estructura de las interfaces","text":"<p><code>HTML5</code> es la tecnolog\u00eda base utilizada para estructurar las p\u00e1ginas web. Define el esqueleto de la UI mediante el uso de etiquetas y atributos sem\u00e1nticos que facilitan la organizaci\u00f3n del contenido y su accesibilidad.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Aplicaci\u00f3n Web B\u00e1sica&lt;/title&gt;\n    &lt;link rel=\"stylesheet\" href=\"styles.css\"&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;header&gt;\n      &lt;h1&gt;Mi Aplicaci\u00f3n Web&lt;/h1&gt;\n    &lt;/header&gt;\n    &lt;main&gt;\n      &lt;section id=\"formulario\"&gt;\n        &lt;h2&gt;Formulario de Contacto&lt;/h2&gt;\n        &lt;form id=\"contactForm\"&gt;\n          &lt;label for=\"name\"&gt;Nombre:&lt;/label&gt;\n          &lt;input type=\"text\" id=\"name\" name=\"name\" required&gt;\n\n          &lt;label for=\"email\"&gt;Email:&lt;/label&gt;\n          &lt;input type=\"email\" id=\"email\" name=\"email\" required&gt;\n\n          &lt;label for=\"message\"&gt;Mensaje:&lt;/label&gt;\n          &lt;textarea id=\"message\" name=\"message\" required&gt;&lt;/textarea&gt;\n\n          &lt;button type=\"submit\"&gt;Enviar&lt;/button&gt;\n        &lt;/form&gt;\n      &lt;/section&gt;\n    &lt;/main&gt;\n    &lt;footer&gt;\n      &lt;p&gt;&amp;copy; 2024 Mi Aplicaci\u00f3n&lt;/p&gt;\n    &lt;/footer&gt;\n    &lt;script src=\"app.js\"&gt;&lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"1%20-%20Introducci%C3%B3n%20al%20Desarrollo%20de%20Interfaces%20de%20Usuario/#componentes-clave-de-html5-en-interfaces-graficas","title":"Componentes clave de HTML5 en interfaces gr\u00e1ficas:","text":"<ol> <li> <p>Etiquetas sem\u00e1nticas:</p> <ul> <li> <p><code>&lt;header&gt;</code>, <code>&lt;footer&gt;</code>, <code>&lt;section&gt;</code>, <code>&lt;article&gt;</code>: Estructuran el contenido de forma sem\u00e1ntica, facilitando la comprensi\u00f3n del contenido tanto para usuarios como para motores de b\u00fasqueda.</p> </li> <li> <p>Inputs y controles de formularios: Elementos como <code>&lt;input&gt;</code>, <code>&lt;textarea&gt;</code>, <code>&lt;select&gt;</code> son esenciales en la captura de datos del usuario.</p> </li> </ul> </li> <li> <p>Atributos de accesibilidad:</p> <ul> <li><code>for</code> y <code>id</code>: En etiquetas <code>&lt;label&gt;</code>, se usan para mejorar la accesibilidad, vinculando etiquetas con campos de formulario.</li> <li>Atributos obligatorios: <code>required</code>, <code>placeholder</code>, y <code>aria-*</code> para ayudar a la accesibilidad y usabilidad.</li> </ul> </li> <li> <p>Formularios en HTML5:</p> <ul> <li>HTML5 permite la creaci\u00f3n de formularios con validaci\u00f3n b\u00e1sica integrada a trav\u00e9s de atributos como <code>required</code>, <code>pattern</code>, y tipos de datos como <code>email</code>, <code>tel</code>, y <code>url</code>.</li> <li>Ejemplo de un formulario b\u00e1sico:   <pre><code>  &lt;form action=\"/submit\" method=\"POST\"&gt;\n      &lt;label for=\"name\"&gt;Nombre:&lt;/label&gt;\n      &lt;input type=\"text\" id=\"name\" name=\"name\" required&gt;\n      &lt;button type=\"submit\"&gt;Enviar&lt;/button&gt;\n  &lt;/form&gt;\n</code></pre></li> </ul> </li> </ol>"},{"location":"1%20-%20Introducci%C3%B3n%20al%20Desarrollo%20de%20Interfaces%20de%20Usuario/#12-css3-estilo-y-presentacion-de-interfaces","title":"1.2 CSS3 \ud83d\udc49\ud83c\udffb Estilo y presentaci\u00f3n de interfaces","text":"<p>CSS3 se utiliza para controlar la apariencia de los elementos HTML, definiendo aspectos como colores, tipograf\u00eda, m\u00e1rgenes, alineaci\u00f3n y comportamiento visual. CSS es fundamental para hacer las interfaces atractivas y funcionales en diferentes dispositivos.</p>"},{"location":"1%20-%20Introducci%C3%B3n%20al%20Desarrollo%20de%20Interfaces%20de%20Usuario/#reglas-basicas-de-css","title":"Reglas b\u00e1sicas de CSS","text":"<ul> <li>Selectores: Seleccionan los elementos que se van a estilizar (por ejemplo, <code>p { color: blue; }</code>).</li> <li>Propiedades y valores: Definen el estilo de los elementos (por ejemplo, <code>color</code>, <code>background-color</code>, <code>margin</code>, <code>padding</code>).</li> </ul>"},{"location":"1%20-%20Introducci%C3%B3n%20al%20Desarrollo%20de%20Interfaces%20de%20Usuario/#estilos-comunes-para-interfaces","title":"Estilos comunes para interfaces","text":"<pre><code>body {\n  font-family: Arial, sans-serif;\n  background-color: #f0f0f0;\n  margin: 0;\n  padding: 20px;\n}\nh1, h2 {\n  color: #333;\n}\nform {\n  background-color: #fff;\n  padding: 20px;\n  border-radius: 8px;\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n}\ninput, textarea {\n  width: 100%;\n  padding: 10px;\n  margin: 10px 0;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n}\nbutton {\n  background-color: #28a745;\n  color: white;\n  padding: 10px 20px;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n}\n</code></pre>"},{"location":"1%20-%20Introducci%C3%B3n%20al%20Desarrollo%20de%20Interfaces%20de%20Usuario/#diseno-responsivo","title":"Dise\u00f1o responsivo","text":"<ul> <li>Media Queries: Permiten ajustar los estilos seg\u00fan el tama\u00f1o de la pantalla.   <pre><code>@media (max-width: 600px) {\n  form {\n    width: 100%;\n  }\n}\n</code></pre></li> </ul>"},{"location":"1%20-%20Introducci%C3%B3n%20al%20Desarrollo%20de%20Interfaces%20de%20Usuario/#disposicion-de-elementos-con-flexbox-y-grid","title":"Disposici\u00f3n de elementos con Flexbox y Grid","text":"<ul> <li>Flexbox: Se usa para organizar elementos en una fila o columna flexible.   <pre><code>.container {\n  display: flex;\n  justify-content: space-between;\n}\n</code></pre></li> <li>Grid: Se usa para crear disposiciones m\u00e1s complejas.   <pre><code>.grid {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n}\n</code></pre></li> </ul>"},{"location":"1%20-%20Introducci%C3%B3n%20al%20Desarrollo%20de%20Interfaces%20de%20Usuario/#13-javascript-comportamiento-y-eventos-en-la-interfaz","title":"1.3. JavaScript \ud83d\udc49\ud83c\udffb Comportamiento y eventos en la interfaz","text":"<p>JavaScript a\u00f1ade interactividad a las interfaces, permitiendo que los elementos respondan a acciones del usuario, como clics, env\u00edo de formularios o cambios en los campos de texto.</p>"},{"location":"1%20-%20Introducci%C3%B3n%20al%20Desarrollo%20de%20Interfaces%20de%20Usuario/#introduccion-al-dom-document-object-model","title":"Introducci\u00f3n al DOM (Document Object Model)","text":"<ul> <li>El DOM representa la estructura del documento HTML como un \u00e1rbol de objetos manipulables por JavaScript.</li> <li>Selecci\u00f3n de elementos: Se utilizan m\u00e9todos como <code>document.getElementById()</code> o <code>document.querySelector()</code>.   <pre><code>const form = document.getElementById('contactForm');\n</code></pre></li> </ul>"},{"location":"1%20-%20Introducci%C3%B3n%20al%20Desarrollo%20de%20Interfaces%20de%20Usuario/#manejo-de-eventos-en-javascript","title":"Manejo de eventos en JavaScript","text":"<ul> <li>Los eventos permiten asociar acciones a interacciones del usuario, como <code>click</code>, <code>input</code>, <code>submit</code>.   <pre><code>document.querySelector('button').addEventListener('click', function() {\n  alert('\u00a1Bot\u00f3n clicado!');\n});\n</code></pre></li> </ul>"},{"location":"1%20-%20Introducci%C3%B3n%20al%20Desarrollo%20de%20Interfaces%20de%20Usuario/#validacion-y-manipulacion-de-formularios","title":"Validaci\u00f3n y manipulaci\u00f3n de formularios","text":"<ul> <li>Validar datos de formulario antes de su env\u00edo:   <pre><code>form.addEventListener('submit', function(event) {\n  const name = document.getElementById('name').value;\n  if (name === '') {\n    alert('Por favor, ingrese su nombre');\n    event.preventDefault();\n  }\n});\n</code></pre></li> </ul>"},{"location":"1%20-%20Introducci%C3%B3n%20al%20Desarrollo%20de%20Interfaces%20de%20Usuario/#14-desarrollo-de-una-aplicacion-web-basica","title":"1.4 Desarrollo de una aplicaci\u00f3n web b\u00e1sica","text":"<ol> <li>Crear un formulario de contacto que incluya los campos de nombre, correo electr\u00f3nico y mensaje.</li> <li>Validar los campos con JavaScript para asegurarse de que el usuario completa correctamente el formulario.</li> <li>Mostrar un mensaje de \u00e9xito o error dependiendo de si la validaci\u00f3n es correcta o no.</li> </ol> \ud83d\udfe2 index.html\ud83d\udfe1 script.js\ud83d\udd35 style.css <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Aplicaci\u00f3n de Contacto&lt;/title&gt;\n    &lt;script src=\"script.js\"&gt;&lt;/script&gt;&lt;!-- \ud83d\udfe1 --&gt;\n    &lt;link rel=\"stylesheet\" href=\"styles.css\"&gt;&lt;!-- \ud83d\udd35 --&gt;\n\n\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=\"contactForm\"&gt;\n        &lt;label for=\"name\"&gt;\n            Nombre:\n        &lt;/label&gt;\n\n        &lt;input\n            id=\"name\"\n            type=\"text\"\n            placeholder=\"Nombre\"\n            required\n        &gt;\n        &lt;label for=\"email\"&gt;\n            Correo electr\u00f3nico:\n        &lt;/label&gt;\n\n        &lt;input\n            id=\"email\"\n            type=\"email\"\n            placeholder=\"e-mail\"\n            required\n        &gt;\n\n        &lt;label for=\"message\"&gt;\n            Mensaje:\n        &lt;/label&gt;\n\n        &lt;textarea\n            id=\"message\"\n            placeholder=\"Todo este espacio es para ti\"\n            required\n        &gt;&lt;/textarea&gt;\n\n        &lt;button type=\"submit\"&gt;\n            Enviar\n        &lt;/button&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>    // Seleccionar el formulario\n    const form = document.getElementById('contactForm');\n\n    // Agregar un listener para el evento de env\u00edo\n    form.addEventListener('submit', function(event) {\n        // Prevenir el comportamiento predeterminado del formulario\n        event.preventDefault();\n\n        // Obtener los valores de los campos\n        const name = document.getElementById('name').value;\n        const email = document.getElementById('email').value;\n        const message = document.getElementById('message').value;\n\n        // Validar que los campos no est\u00e9n vac\u00edos\n        if (name === '' || email === '' || message === '') {\n        alert('Por favor, complete todos los campos');\n        } else {\n        alert('Formulario enviado exitosamente');\n        // Aqu\u00ed es donde normalmente se enviar\u00eda el formulario al servidor\n        }\n    });\n</code></pre> <pre><code>    body {\n        font-family: Arial, sans-serif;\n        background-color: #f7f7f7;\n        margin: 0;\n        padding: 50px;\n    }\n    form {\n        background-color: #fff;\n        padding: 20px;\n        border-radius: 8px;\n        box-shadow: 0 0 15px rgba(0, 0, 0, 0.1);\n    }\n\n    label {\n        display: block;\n        margin-bottom: 8px;\n        font-weight: bold;\n    }\n\n    input, textarea {\n        width: 100%;\n        padding: 10px;\n        margin-bottom: 20px;\n        border: 1px solid #ccc;\n        border-radius: 4px;\n    }\n\n    button {\n        background-color: #28a745;\n        color: white;\n        padding: 10px 20px;\n        border: none;\n        border-radius: 4px;\n        cursor: pointer;\n    }\n\n        button:hover {\n            background-color: #218838;\n        }\n</code></pre>"},{"location":"1%20-%20Introducci%C3%B3n%20al%20Desarrollo%20de%20Interfaces%20de%20Usuario/#descripcion-del-codigo-de-la-aplicacion","title":"Descripci\u00f3n del c\u00f3digo de la aplicaci\u00f3n","text":"<ol> <li>HTML5:</li> <li>El formulario contiene tres campos: un campo de texto para el nombre (<code>&lt;input type=\"text\"&gt;</code>), un campo de correo electr\u00f3nico (<code>&lt;input type=\"email\"&gt;</code>), y un \u00e1rea de texto para el mensaje (<code>&lt;textarea&gt;</code>).</li> <li> <p>El formulario est\u00e1 configurado para disparar una validaci\u00f3n cuando se env\u00ede.</p> </li> <li> <p>CSS (estilo b\u00e1sico):</p> </li> <li>Estilos b\u00e1sicos: Se aplican estilos simples para darle un dise\u00f1o limpio y profesional al formulario.</li> <li> <p>Interactividad: El bot\u00f3n de env\u00edo cambia de color al pasar el cursor por encima, lo que mejora la experiencia del usuario (UX).</p> </li> <li> <p>JavaScript:</p> </li> <li>El c\u00f3digo de JavaScript maneja la l\u00f3gica de la validaci\u00f3n del formulario, asegur\u00e1ndose de que los campos no est\u00e9n vac\u00edos antes de permitir el env\u00edo.</li> <li>El m\u00e9todo <code>addEventListener()</code> escucha el evento de \"submit\" en el formulario y previene que se env\u00ede si la validaci\u00f3n falla. En un contexto real, despu\u00e9s de la validaci\u00f3n, los datos se enviar\u00edan a un servidor o procesar\u00edan en el frontend.</li> </ol>"},{"location":"1%20-%20Introducci%C3%B3n%20al%20Desarrollo%20de%20Interfaces%20de%20Usuario/#15-modificacion-del-codigo-y-manipulacion-del-dom","title":"1.5 Modificaci\u00f3n del c\u00f3digo y manipulaci\u00f3n del DOM","text":"<p>Una parte importante del desarrollo de interfaces con HTML5, CSS y JavaScript es aprender c\u00f3mo modificar la estructura de la p\u00e1gina y su comportamiento din\u00e1micamente.</p> <ul> <li>Modificaci\u00f3n din\u00e1mica de elementos: Con JavaScript, podemos modificar los elementos HTML y sus propiedades. Esto incluye cambiar textos, estilos o agregar nuevos elementos al DOM.</li> </ul> <p>Ejemplo:    <pre><code>const header = document.querySelector('h1');\nheader.textContent = 'Nuevo T\u00edtulo de la Aplicaci\u00f3n';\nheader.style.color = 'blue';\n</code></pre></p> <p>En este caso, cambiamos el contenido de la etiqueta <code>&lt;h1&gt;</code> y le asignamos un nuevo color con JavaScript.</p> <ul> <li>Interacci\u00f3n basada en eventos: Los eventos en JavaScript permiten que los elementos reaccionen a las acciones del usuario. El uso de eventos como <code>click</code>, <code>focus</code>, <code>input</code>, y <code>submit</code> es esencial para crear interfaces interactivas.</li> </ul>"},{"location":"1%20-%20Introducci%C3%B3n%20al%20Desarrollo%20de%20Interfaces%20de%20Usuario/#herramientas-para-manipular-el-dom","title":"Herramientas para manipular el DOM","text":"<p>En JavaScript, al manipular el DOM (Document Object Model), es com\u00fan interactuar con el contenido de los elementos HTML. Existen varias formas de hacerlo, y entre las m\u00e1s usadas est\u00e1n las propiedades <code>innerHTML</code>, <code>innerText</code>, y el m\u00e9todo <code>append</code>. Cada una tiene caracter\u00edsticas \u00fanicas y es importante entender c\u00f3mo y cu\u00e1ndo usarlas de manera efectiva.</p> <p>A continuaci\u00f3n, exploraremos cada una de estas propiedades y m\u00e9todos, explicando su uso con ejemplos claros y detallados.</p>"},{"location":"1%20-%20Introducci%C3%B3n%20al%20Desarrollo%20de%20Interfaces%20de%20Usuario/#innerhtml","title":"<code>innerHTML</code>","text":"<p><code>innerHTML</code> es una propiedad que permite acceder o modificar el contenido HTML de un elemento. Esto incluye tanto el texto como las etiquetas HTML. Al utilizar <code>innerHTML</code>, puedes reemplazar todo el contenido interno del elemento por otro, incluyendo etiquetas HTML, lo que hace que sea una herramienta muy poderosa para insertar o cambiar estructuras HTML completas.</p> <p>Uso de <code>innerHTML</code></p> <ul> <li>Lectura del contenido HTML: Puedes acceder al contenido HTML de un elemento.</li> <li>Escritura de contenido HTML: Puedes reemplazar o cambiar el contenido HTML de un elemento.</li> </ul> <p>Ejemplo b\u00e1sico:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n  &lt;title&gt;Ejemplo de innerHTML&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;div id=\"miDiv\"&gt;\n    &lt;p&gt;Este es un &lt;strong&gt;parrafo&lt;/strong&gt; dentro de un div.&lt;/p&gt;\n  &lt;/div&gt;\n\n  &lt;button onclick=\"cambiarContenido()\"&gt;Cambiar Contenido&lt;/button&gt;\n\n  &lt;script&gt;\n    function cambiarContenido() {\n      document.getElementById('miDiv').innerHTML = '&lt;h1&gt;Contenido cambiado&lt;/h1&gt;&lt;p&gt;Este es el nuevo contenido con etiquetas HTML&lt;/p&gt;';\n    }\n  &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <ul> <li>Explicaci\u00f3n: En este ejemplo, el contenido original del <code>div</code> es un p\u00e1rrafo. Al hacer clic en el bot\u00f3n, se cambia el contenido usando <code>innerHTML</code>, lo que inserta un nuevo <code>h1</code> y un nuevo p\u00e1rrafo con HTML embebido.</li> </ul> <p>Consideraciones de seguridad con <code>innerHTML</code></p> <p>Uno de los riesgos de <code>innerHTML</code> es que puede ser una fuente de vulnerabilidades de XSS (Cross-Site Scripting) si no se controla el contenido que se inserta. Si los datos que introduces provienen de usuarios, debes asegurarte de que est\u00e9n adecuadamente filtrados o escapados.</p>"},{"location":"1%20-%20Introducci%C3%B3n%20al%20Desarrollo%20de%20Interfaces%20de%20Usuario/#innertext","title":"<code>innerText</code>","text":"<p><code>innerText</code> es una propiedad que permite acceder o modificar el texto visible de un elemento, sin incluir etiquetas HTML. A diferencia de <code>innerHTML</code>, <code>innerText</code> se enfoca solo en el texto, ignorando cualquier estructura HTML interna que pueda tener el elemento.</p> <p>Uso de <code>innerText</code></p> <ul> <li>Lectura del texto visible: Puedes obtener el texto que es visible para el usuario (sin las etiquetas HTML).</li> <li>Escritura de texto: Puedes reemplazar el texto visible de un elemento. Cualquier HTML que insertes ser\u00e1 tratado como texto plano.</li> </ul> <p>Ejemplo b\u00e1sico:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n  &lt;title&gt;Ejemplo de innerText&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;div id=\"miTexto\"&gt;\n    &lt;p&gt;Este es un &lt;strong&gt;texto en negrita&lt;/strong&gt; que contiene etiquetas HTML.&lt;/p&gt;\n  &lt;/div&gt;\n\n  &lt;button onclick=\"cambiarTexto()\"&gt;Cambiar Texto&lt;/button&gt;\n\n  &lt;script&gt;\n    function cambiarTexto() {\n      document.getElementById('miTexto').innerText = 'Este es un texto simple, sin HTML.';\n    }\n  &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <ul> <li>Explicaci\u00f3n: El contenido original del <code>div</code> incluye un p\u00e1rrafo con una etiqueta <code>&lt;strong&gt;</code>. Sin embargo, al hacer clic en el bot\u00f3n, se reemplaza con texto plano que no incluye ninguna etiqueta HTML. Cualquier intento de insertar HTML ser\u00e1 tratado como texto normal.</li> </ul>"},{"location":"1%20-%20Introducci%C3%B3n%20al%20Desarrollo%20de%20Interfaces%20de%20Usuario/#append","title":"<code>append</code>","text":"<p><code>append</code> es un m\u00e9todo que permite agregar nodos o texto al final del contenido de un elemento. A diferencia de <code>innerHTML</code> o <code>innerText</code>, <code>append</code> no reemplaza el contenido existente, sino que lo a\u00f1ade al final. Adem\u00e1s, <code>append</code> permite insertar tanto texto como nodos DOM (elementos HTML).</p> <p>Uso de <code>append</code></p> <ul> <li>Agregar nodos o texto al final del contenido de un elemento.</li> <li>No reemplaza el contenido existente, solo a\u00f1ade nuevos elementos.</li> </ul> <p>Ejemplo b\u00e1sico:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n  &lt;title&gt;Ejemplo de append&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;div id=\"contenedor\"&gt;\n    &lt;p&gt;Primer p\u00e1rrafo en el contenedor.&lt;/p&gt;\n  &lt;/div&gt;\n\n  &lt;button onclick=\"agregarElemento()\"&gt;Agregar Elemento&lt;/button&gt;\n\n  &lt;script&gt;\n    function agregarElemento() {\n      const nuevoParrafo = document.createElement('p');\n      nuevoParrafo.innerText = 'Este es un nuevo p\u00e1rrafo a\u00f1adido al final.';\n\n      document.getElementById('contenedor').append(nuevoParrafo);\n    }\n  &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <ul> <li>Explicaci\u00f3n: El contenido inicial del <code>div</code> es un p\u00e1rrafo. Al hacer clic en el bot\u00f3n, se crea un nuevo p\u00e1rrafo mediante <code>createElement</code> y luego se a\u00f1ade al final del contenedor usando <code>append</code>. Como resultado, se a\u00f1ade contenido nuevo sin borrar el existente.</li> </ul> <p>Agregar texto directamente con <code>append</code></p> <p>Tambi\u00e9n puedes a\u00f1adir texto directamente sin necesidad de crear un nuevo nodo:</p> <pre><code>document.getElementById('contenedor').append('Texto adicional');\n</code></pre> <p>Esto agregar\u00eda el texto \"Texto adicional\" al final del contenedor.</p> <p>Comparaci\u00f3n entre <code>innerHTML</code>, <code>innerText</code> y <code>append</code></p> Caracter\u00edstica <code>innerHTML</code> <code>innerText</code> <code>append</code> Inserta etiquetas HTML S\u00ed No S\u00ed (si se utiliza <code>createElement</code>) Manipulaci\u00f3n del DOM Reemplaza todo el contenido del elemento Reemplaza solo el texto visible A\u00f1ade nuevos nodos o texto Seguridad (XSS) Vulnerable si se usa con datos no seguros No permite insertar HTML, m\u00e1s seguro Seguro si se usan nodos creados manualmente Aplicaciones comunes Insertar HTML din\u00e1micamente Reemplazar o leer texto plano A\u00f1adir m\u00e1s contenido sin borrar el actual"},{"location":"1%20-%20Introducci%C3%B3n%20al%20Desarrollo%20de%20Interfaces%20de%20Usuario/#appendchild","title":"<code>appendChild</code>","text":"<p><code>appendChild</code> es un m\u00e9todo en JavaScript utilizado para agregar un nodo hijo al final de la lista de hijos de un nodo padre. A diferencia de <code>append</code>, que puede agregar tanto nodos como texto, <code>appendChild</code> solo puede a\u00f1adir nodos del DOM, como elementos HTML (tags), fragmentos de documentos, o incluso otros nodos de texto. Este m\u00e9todo es muy \u00fatil cuando quieres construir o modificar din\u00e1micamente la estructura de una p\u00e1gina web agregando nuevos elementos.</p> <p>Sintaxis b\u00e1sica</p> <pre><code>const contenedor = document.querySelector('#mi-contenedor');\nconst elementoHijo = document.createElement('p');\n\nelementoHijo.innerText = 'Este es el elemento hijo';\n\ncontenedor.appendChild(elementoHijo);\n</code></pre> <ul> <li>contenedor: El nodo padre donde se va a insertar el nuevo nodo.</li> <li>childNode: El nodo hijo que se va a agregar al nodo padre.</li> </ul> <p>El nodo hijo ser\u00e1 agregado al final de los nodos hijos ya existentes dentro del nodo padre.</p> Antes de ejecutar JavaScriptDespu\u00e9s de ejecutar JavaScript <pre><code>&lt;div id=\"mi-contenedor\"&gt;&lt;/div&gt;\n</code></pre> <pre><code>&lt;div id=\"mi-contenedor\"&gt;\n    &lt;p&gt;Este es el elemento hijo&lt;/p&gt;\n&lt;/div&gt;\n</code></pre> <p>Ejemplo b\u00e1sico: Agregar un nuevo elemento al final</p> <p>Vamos a crear un nuevo elemento <code>&lt;li&gt;</code> y agregarlo a una lista <code>&lt;ul&gt;</code> ya existente en la p\u00e1gina:</p> <p>HTML inicial:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n  &lt;title&gt;Ejemplo de appendChild&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;ul id=\"miLista\"&gt;\n    &lt;li&gt;Elemento 1&lt;/li&gt;\n    &lt;li&gt;Elemento 2&lt;/li&gt;\n  &lt;/ul&gt;\n\n  &lt;button onclick=\"agregarElemento()\"&gt;Agregar Elemento&lt;/button&gt;\n\n  &lt;script&gt;\n    function agregarElemento() {\n      // 1. Crear un nuevo elemento li\n      const nuevoElemento = document.createElement('li');\n\n      // 2. Agregar texto al nuevo elemento\n      nuevoElemento.innerText = 'Elemento 3';\n\n      // 3. A\u00f1adir el nuevo elemento como hijo de la lista\n      document.getElementById('miLista').appendChild(nuevoElemento);\n    }\n  &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Explicaci\u00f3n del c\u00f3digo:</p> <ol> <li>Crear un nuevo elemento: Usamos <code>document.createElement('li')</code> para crear un nuevo nodo de lista <code>&lt;li&gt;</code>.</li> <li>A\u00f1adir contenido al nuevo elemento: Utilizamos <code>innerText</code> para insertar el texto \"Elemento 3\" dentro del nuevo nodo <code>&lt;li&gt;</code>.</li> <li>Agregar el nuevo elemento al DOM: El m\u00e9todo <code>appendChild</code> agrega el nuevo elemento <code>&lt;li&gt;</code> al final de la lista no ordenada <code>&lt;ul&gt;</code>.</li> </ol> <p>Cuando el usuario haga clic en el bot\u00f3n, se agregar\u00e1 el nuevo elemento al final de la lista.</p> <p>Agregar m\u00faltiples nodos</p> <p><code>appendChild</code> solo puede agregar un nodo a la vez. Si deseas agregar varios nodos, deber\u00e1s llamarlo varias veces o usar un fragmento de documento para mejorar la eficiencia:</p> <p>Ejemplo: Agregar varios nodos con un <code>DocumentFragment</code></p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n  &lt;title&gt;Ejemplo de appendChild con Fragmento&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;ul id=\"miLista\"&gt;\n    &lt;li&gt;Elemento 1&lt;/li&gt;\n    &lt;li&gt;Elemento 2&lt;/li&gt;\n  &lt;/ul&gt;\n\n  &lt;button onclick=\"agregarVariosElementos()\"&gt;Agregar Varios Elementos&lt;/button&gt;\n\n  &lt;script&gt;\n    function agregarVariosElementos() {\n      // Crear un fragmento de documento para contener los nuevos elementos\n      const fragmento = document.createDocumentFragment();\n\n      // Crear 3 nuevos elementos li\n      for (let i = 3; i &lt;= 5; i++) {\n        const nuevoElemento = document.createElement('li');\n        nuevoElemento.innerText = 'Elemento ' + i;\n        fragmento.appendChild(nuevoElemento);\n      }\n\n      // A\u00f1adir el fragmento al DOM\n      document.getElementById('miLista').appendChild(fragmento);\n    }\n  &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Explicaci\u00f3n:</p> <ol> <li>Se crea un fragmento de documento (<code>DocumentFragment</code>), que es un contenedor temporal en memoria.</li> <li>Se a\u00f1aden varios elementos <code>&lt;li&gt;</code> al fragmento.</li> <li>Finalmente, se inserta el fragmento completo en el DOM con un solo <code>appendChild</code>. Esto es m\u00e1s eficiente que llamar <code>appendChild</code> varias veces porque las modificaciones del DOM se hacen una sola vez.</li> </ol> <p>Mover un nodo con <code>appendChild</code></p> <p>Una caracter\u00edstica interesante de <code>appendChild</code> es que si el nodo ya existe en el DOM, no lo duplicar\u00e1, sino que lo mover\u00e1 a la nueva posici\u00f3n.</p> <p>Ejemplo: Mover un nodo existente</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n  &lt;title&gt;Ejemplo de mover un nodo con appendChild&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;div id=\"contenedor1\"&gt;\n    &lt;p id=\"miParrafo\"&gt;Este p\u00e1rrafo ser\u00e1 movido.&lt;/p&gt;\n  &lt;/div&gt;\n  &lt;div id=\"contenedor2\"&gt;\n    &lt;!-- Contenedor vac\u00edo --&gt;\n  &lt;/div&gt;\n\n  &lt;button onclick=\"moverParrafo()\"&gt;Mover P\u00e1rrafo&lt;/button&gt;\n\n  &lt;script&gt;\n    function moverParrafo() {\n      const parrafo = document.getElementById('miParrafo');\n      const nuevoContenedor = document.getElementById('contenedor2');\n      nuevoContenedor.appendChild(parrafo); // Mover\u00e1 el p\u00e1rrafo al nuevo contenedor\n    }\n  &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Explicaci\u00f3n:</p> <p>Cuando el bot\u00f3n es presionado, el p\u00e1rrafo <code>#miParrafo</code> se quita del <code>#contenedor1</code> y movido al <code>#contenedor2</code> usando <code>appendChild</code>. No se duplica, simplemente se cambia de lugar.</p> <p>Diferencias entre <code>append</code> y <code>appendChild</code></p> <ul> <li>Compatibilidad de tipos: <code>append</code> permite insertar tanto nodos como cadenas de texto directamente, mientras que <code>appendChild</code> solo permite nodos.</li> </ul> <p>Ejemplo de <code>append</code> (inserta nodos y texto):</p> <pre><code>parentNode.append('Texto', document.createElement('div'));\n</code></pre> <ul> <li> <p>Retorno: <code>appendChild</code> retorna el nodo insertado, mientras que <code>append</code> no retorna nada (<code>undefined</code>).</p> </li> <li> <p>Compatibilidad de navegadores: <code>append</code> es m\u00e1s moderno, mientras que <code>appendChild</code> est\u00e1 disponible en navegadores m\u00e1s antiguos.</p> </li> </ul>"},{"location":"1%20-%20Introducci%C3%B3n%20al%20Desarrollo%20de%20Interfaces%20de%20Usuario/#16-manipulando-el-css","title":"1.6 Manipulando el CSS","text":"<p>En JavaScript, la manipulaci\u00f3n de clases de elementos HTML es una parte esencial del desarrollo web, ya que te permite cambiar la apariencia y el comportamiento de los elementos din\u00e1micamente. Para facilitar esta tarea, se pueden usar los m\u00e9todos <code>addClass</code>, <code>removeClass</code>, <code>toggleClass</code> y <code>style</code></p>"},{"location":"1%20-%20Introducci%C3%B3n%20al%20Desarrollo%20de%20Interfaces%20de%20Usuario/#addclass","title":"<code>addClass</code>","text":"<p>El m\u00e9todo <code>addClass</code> se utiliza para agregar una clase a un elemento, a\u00f1adiendo una nueva clase al atributo <code>class</code> sin eliminar las clases ya existentes.</p> <p>M\u00e9todo equivalente en JavaScript nativo: <pre><code>element.classList.add('className');\n</code></pre></p> <p>Ejemplo de uso: Imagina que tienes un bot\u00f3n y deseas cambiar su estilo al hacer clic, agregando la clase <code>active</code> que le aplica un nuevo estilo.</p> \ud83d\udfe2 HTML\ud83d\udfe1 JavaScript\ud83d\udd35 CSS <pre><code>    &lt;button id=\"miBoton\"&gt;Haz clic en m\u00ed&lt;/button&gt;\n</code></pre> <pre><code>    document.getElementById('miBoton').addEventListener('click', function() {\n        this.classList.add('active');\n    });\n</code></pre> <pre><code>    .active {\n        background-color: green;\n        color: white;\n    }\n</code></pre> <p>Cuando el bot\u00f3n es clicado, se le a\u00f1adir\u00e1 la clase <code>active</code>, cambiando el color de fondo y el color del texto.</p>"},{"location":"1%20-%20Introducci%C3%B3n%20al%20Desarrollo%20de%20Interfaces%20de%20Usuario/#removeclass","title":"<code>removeClass</code>","text":"<p>El m\u00e9todo <code>removeClass</code> se usa para eliminar una clase de un elemento. Si el elemento no tiene la clase especificada, no ocurre nada.</p> <p>M\u00e9todo equivalente en JavaScript nativo: <pre><code>element.classList.remove('className');\n</code></pre></p> <p>Ejemplo de uso: Supongamos que, tras hacer clic en un bot\u00f3n, queremos eliminar la clase <code>active</code> de ese elemento.</p> <pre><code>document.getElementById('miBoton').addEventListener('click', function() {\n  this.classList.remove('active');\n});\n</code></pre>"},{"location":"1%20-%20Introducci%C3%B3n%20al%20Desarrollo%20de%20Interfaces%20de%20Usuario/#toggleclass","title":"<code>toggleClass</code>","text":"<p>El m\u00e9todo <code>toggleClass</code> permite alternar una clase en un elemento. Si el elemento ya tiene la clase, la elimina; si no la tiene, la agrega. Este m\u00e9todo es muy \u00fatil cuando quieres cambiar el estado de un elemento al hacer clic, como en el caso de botones que activan o desactivan un estado.</p> <p>M\u00e9todo equivalente en JavaScript nativo: <pre><code>    element.classList.toggle('className');\n</code></pre></p> <p>Ejemplo de uso: Vamos a crear un bot\u00f3n que pueda activar y desactivar la clase <code>active</code> cada vez que se hace clic sobre \u00e9l.</p> <pre><code>document.getElementById('miBoton').addEventListener('click', function() {\n  this.classList.toggle('active');\n});\n</code></pre> <p>Al hacer clic en el bot\u00f3n: - Si la clase <code>active</code> est\u00e1 presente, ser\u00e1 eliminada. - Si la clase <code>active</code> no est\u00e1 presente, ser\u00e1 a\u00f1adida.</p> <p>Esto se puede usar para efectos como mostrar y ocultar un men\u00fa, cambiar el estado de un bot\u00f3n, entre otros.</p> <p>Ejemplo completo: <code>addClass</code>, <code>removeClass</code> y <code>toggleClass</code></p> \ud83d\udfe2 HTML\ud83d\udfe1 JavaScript\ud83d\udd35 CSS <pre><code>    &lt;button id=\"addClassBtn\"&gt;Agregar Clase&lt;/button&gt;\n    &lt;button id=\"removeClassBtn\"&gt;Remover Clase&lt;/button&gt;\n    &lt;button id=\"toggleClassBtn\"&gt;Alternar Clase&lt;/button&gt;\n\n    &lt;div id=\"miElemento\"&gt;Elemento de prueba&lt;/div&gt;\n</code></pre> <pre><code>    // Referencia al elemento\n    const miElemento = document.getElementById('miElemento');\n\n    // Agregar la clase \"active\"\n    document.getElementById('addClassBtn').addEventListener('click', function() {\n        miElemento.classList.add('active');\n    });\n\n    // Eliminar la clase \"active\"\n    document.getElementById('removeClassBtn').addEventListener('click', function() {\n        miElemento.classList.remove('active');\n    });\n\n    // Alternar la clase \"active\"\n    document.getElementById('toggleClassBtn').addEventListener('click', function() {\n        miElemento.classList.toggle('active');\n    });\n</code></pre> <pre><code>    .active {\n        background-color: lightblue;\n        padding: 10px;\n        border: 2px solid blue;\n    }\n</code></pre> <p>Explicaci\u00f3n: - El bot\u00f3n \"Agregar Clase\" agrega la clase <code>active</code> al elemento. - El bot\u00f3n \"Remover Clase\" elimina la clase <code>active</code> si est\u00e1 presente. - El bot\u00f3n \"Alternar Clase\" agrega o elimina la clase dependiendo de si ya est\u00e1 aplicada.</p>"},{"location":"1%20-%20Introducci%C3%B3n%20al%20Desarrollo%20de%20Interfaces%20de%20Usuario/#style","title":"<code>style</code>","text":"<p>El uso de la propiedad <code>style</code> en JavaScript permite modificar directamente los estilos CSS de un elemento HTML desde el c\u00f3digo. La propiedad <code>style</code> proporciona acceso a los atributos de estilo \"en l\u00ednea\" (inline styles), lo que significa que modifica el atributo <code>style</code> del elemento en el DOM, aplicando estilos de manera directa y din\u00e1mica.</p> <p>Modificar Estilos con la Propiedad <code>style</code> La propiedad <code>style</code> es un objeto que contiene todas las propiedades CSS disponibles para un elemento. Las propiedades CSS que normalmente tienen guiones (como <code>background-color</code>) se transforman en camelCase (por ejemplo, <code>backgroundColor</code>) para ser utilizadas en JavaScript.</p> <p>Sintaxis b\u00e1sica:</p> <pre><code>    element.style.property = \"value\";\n</code></pre> <p>Por ejemplo, si quieres cambiar el color de fondo de un elemento:</p> <pre><code>    document.getElementById(\"miElemento\").style.backgroundColor = \"yellow\";\n</code></pre> <p>Ejemplo b\u00e1sico: <pre><code>    &lt;div id=\"miDiv\" style=\"width: 100px; height: 100px; background-color: lightblue;\"&gt;Div de prueba&lt;/div&gt;\n    &lt;button id=\"boton\"&gt;Cambiar color&lt;/button&gt;\n\n    &lt;script&gt;\n    document.getElementById('boton').addEventListener('click', function() {\n        document.getElementById('miDiv').style.backgroundColor = 'red';\n    });\n    &lt;/script&gt;\n</code></pre></p> <p>En este caso, al hacer clic en el bot\u00f3n, el fondo del <code>div</code> cambiar\u00e1 de azul claro a rojo.</p> <p>Propiedades CSS en JavaScript</p> <p>A diferencia de CSS, donde se utilizan guiones para separar palabras, en JavaScript las propiedades CSS siguen una convenci\u00f3n de camelCase. Aqu\u00ed tienes algunos ejemplos de c\u00f3mo se traducen las propiedades CSS a JavaScript:</p> Propiedad CSS Propiedad en JavaScript <code>background-color</code> <code>backgroundColor</code> <code>font-size</code> <code>fontSize</code> <code>margin-top</code> <code>marginTop</code> <code>border-radius</code> <code>borderRadius</code> <code>text-align</code> <code>textAlign</code> <p>Acceder a m\u00faltiples estilos Puedes modificar varias propiedades de estilo usando el objeto <code>style</code>. Simplemente accedes a cada propiedad y le asignas un valor.</p> <p>Ejemplo de m\u00faltiples cambios de estilo:</p> <pre><code>    const miElemento = document.getElementById('miDiv');\n    miElemento.style.width = '200px';\n    miElemento.style.height = '200px';\n    miElemento.style.border = '2px solid black';\n    miElemento.style.backgroundColor = 'lightgreen';\n</code></pre> <p>Resetear estilos Cuando modificas los estilos de un elemento utilizando <code>style</code>, solo cambias los estilos en l\u00ednea (inline). Los estilos definidos en hojas de estilo externas o internas no se tocan, lo cual es \u00fatil. Si deseas eliminar un estilo que fue a\u00f1adido mediante JavaScript, puedes asignarle una cadena vac\u00eda (<code>\"\"</code>):</p> <p>Ejemplo: <pre><code>    miElemento.style.backgroundColor = \"\";  // Elimina el estilo de fondo en l\u00ednea\n</code></pre></p> <p>Alternativas al uso directo de <code>style</code></p> <p>Aunque la propiedad <code>style</code> es \u00fatil, modificar estilos en l\u00ednea puede ser problem\u00e1tico en aplicaciones grandes, ya que dificulta la separaci\u00f3n entre la estructura del contenido (HTML) y la presentaci\u00f3n (CSS). Como alternativa, generalmente es m\u00e1s recomendable cambiar clases de CSS, y dejar que las hojas de estilo se encarguen de los detalles del dise\u00f1o.</p> <p>Por ejemplo, en lugar de modificar directamente un estilo en l\u00ednea:</p> <pre><code>    miElemento.style.backgroundColor = \"yellow\";\n</code></pre> <p>Es preferible cambiar la clase:</p> <pre><code>    miElemento.classList.add(\"nuevoEstilo\");\n</code></pre> <p>Con un CSS como este:</p> <pre><code>.nuevoEstilo {\n  background-color: yellow;\n}\n</code></pre> <p>Esto hace que el c\u00f3digo sea m\u00e1s mantenible y f\u00e1cil de gestionar, especialmente en proyectos m\u00e1s grandes.</p> <p>Ejemplo completo: Cambiar estilos con <code>style</code> y <code>classList</code></p> \ud83d\udfe2 HTML <pre><code>&lt;div id=\"miDiv\" style=\"width: 150px; height: 150px; background-color: lightgray;\"&gt;Cuadro&lt;/div&gt;\n&lt;button id=\"styleBtn\"&gt;Cambiar Estilo (style)&lt;/button&gt;\n&lt;button id=\"classBtn\"&gt;Cambiar Estilo (class)&lt;/button&gt;\n\n&lt;style&gt;\n.nuevoEstilo {\n    background-color: blue;\n    border-radius: 10px;\n    color: white;\n}\n&lt;/style&gt;\n\n&lt;script&gt;\n// Cambiar estilos en l\u00ednea con 'style'\ndocument.getElementById('styleBtn').addEventListener('click', function() {\n    const div = document.getElementById('miDiv');\n    div.style.backgroundColor = 'green';\n    div.style.width = '300px';\n    div.style.height = '300px';\n    div.style.color = 'white';\n});\n\n// Cambiar estilos con 'classList'\ndocument.getElementById('classBtn').addEventListener('click', function() {\n    document.getElementById('miDiv').classList.toggle('nuevoEstilo');\n});\n&lt;/script&gt;\n</code></pre> <p>Explicaci\u00f3n:</p> <ol> <li>El bot\u00f3n \"Cambiar Estilo (style)\" modifica directamente los estilos en l\u00ednea (ancho, alto, color de fondo y color de texto) del <code>div</code> al hacer clic.</li> <li>El bot\u00f3n \"Cambiar Estilo (class)\" alterna la clase <code>nuevoEstilo</code>, que aplica un nuevo estilo CSS predefinido (fondo azul, bordes redondeados y texto blanco).</li> </ol> <p>Cuidado con esto</p> <p>Que no se te olvide el orden de preferencia de los estilos CSS \ud83d\udc49\ud83c\udffb las clases <code>.mi-clase</code> tienen menos peso que los identificadores <code>#mi-identificador</code> que a su vez, tienen menos relevancia que los estilos definidos en l\u00ednea <code>style=\"\"</code> y en primer lugar, est\u00e1 el <code>!important</code>.</p>"},{"location":"2%20-%20Manejo%20de%20datos/","title":"2\ufe0f\u20e3 Manejo de datos","text":"<p>En el desarrollo de interfaces web, el acceso a datos desde el lado del cliente con JavaScript permite que las aplicaciones web puedan interactuar con datos de forma din\u00e1mica, sin recargar la p\u00e1gina. Con JavaScript y tecnolog\u00edas de acceso a datos en el navegador, como la API Fetch y almacenamiento en el navegador, los desarrolladores pueden crear aplicaciones m\u00e1s responsivas que recuperan y manipulan informaci\u00f3n desde APIs o almacenamiento local.</p> <p>En este tema, aprenderemos a conectar aplicaciones web con fuentes de datos externas, como APIs REST, que proveen informaci\u00f3n en tiempo real. Tambi\u00e9n veremos c\u00f3mo gestionar datos dentro del navegador, utilizando opciones como el almacenamiento local y de sesi\u00f3n, para recordar informaci\u00f3n entre interacciones del usuario.</p> <p>Explorar estas t\u00e9cnicas nos permite desarrollar interfaces interactivas, donde el usuario puede visualizar, modificar y almacenar datos de forma instant\u00e1nea, asegurando una experiencia m\u00e1s fluida y personalizable sin necesidad de una infraestructura de backend directa en esta asignatura.</p>"},{"location":"2%20-%20Manejo%20de%20datos/#arrays","title":"Arrays","text":"<p>Los arrays en JavaScript son una estructura fundamental para almacenar m\u00faltiples valores dentro de una sola variable. Los arrays permiten organizar datos en listas y manipularlos de forma eficiente, usando m\u00e9todos espec\u00edficos que facilitan agregar, eliminar, buscar y transformar elementos.</p> <p>Un array se puede crear f\u00e1cilmente utilizando corchetes []:</p> <p><pre><code>let frutas = [\"manzana\", \"banana\", \"naranja\"];\n</code></pre> Aqu\u00ed, el array frutas contiene tres elementos, que se pueden acceder usando un \u00edndice (la posici\u00f3n dentro del array), como frutas[0] para \"manzana\".</p> <p>\u00bfPuedo meter m\u00e1s de un tipo de dato en un mismo array?</p> <p>S\u00ed, en JavaScript es posible crear arrays con datos de diferentes tipos. Un solo array puede contener strings, n\u00fameros, booleanos, objetos, incluso otros arrays (arrays anidados). Esto se debe a que JavaScript es un lenguaje con tipado din\u00e1mico, lo que permite esta flexibilidad.</p> <p>Aqu\u00ed tienes un ejemplo de un array con datos mixtos:</p> <pre><code>let datosMixtos = [\"texto\", 42, true, { nombre: \"Carlos\" }, [1, 2, 3]];\n</code></pre> <p>En este caso:</p> <ul> <li><code>\"texto\"</code> es un string</li> <li><code>42</code> es un n\u00famero</li> <li><code>true</code> es un booleano</li> <li><code>{ nombre: \"Carlos\" }</code> es un objeto</li> <li><code>[1, 2, 3]</code> es un array anidado</li> </ul> <p>Puedes acceder y manipular estos elementos igual que en un array con un solo tipo de datos, pero es importante recordar que esta mezcla puede hacer el c\u00f3digo m\u00e1s dif\u00edcil de leer o mantener si no se usa con cuidado.</p>"},{"location":"2%20-%20Manejo%20de%20datos/#creacion-de-arrays","title":"Creaci\u00f3n de Arrays","text":"<p>Un array se puede crear f\u00e1cilmente utilizando corchetes <code>[]</code>:</p> <pre><code>let frutas = [\"manzana\", \"banana\", \"naranja\"];\n</code></pre> <p>Aqu\u00ed, el array <code>frutas</code> contiene tres elementos, que se pueden acceder usando un \u00edndice (la posici\u00f3n dentro del array), como <code>frutas[0]</code> para \"manzana\".</p>"},{"location":"2%20-%20Manejo%20de%20datos/#metodos-de-arrays-mas-utilizados","title":"M\u00e9todos de Arrays M\u00e1s Utilizados","text":"<p>Para trabajar con datos almacenados en arrays, JavaScript nos proporciona una serie de m\u00e9todos espec\u00edficos que facilitan operaciones como agregar, eliminar, buscar o modificar elementos. Estos m\u00e9todos permiten manipular los datos dentro del array sin tener que implementar procesos complejos, simplificando tareas comunes y optimizando el c\u00f3digo.</p> <p>En esta secci\u00f3n, exploraremos algunos de los m\u00e9todos m\u00e1s utilizados en arrays, como .push(), .pop(), .includes(), y otros, que son fundamentales para realizar operaciones esenciales en aplicaciones web. Estos m\u00e9todos no solo ayudan a mejorar la legibilidad y eficiencia del c\u00f3digo, sino que tambi\u00e9n permiten manejar los datos de manera flexible, adapt\u00e1ndose a diversas situaciones en el desarrollo de interfaces web interactivas.</p> <p><code>.push()</code> \u2013 Agrega un elemento al final del array.</p> <p>Este m\u00e9todo modifica el array original a\u00f1adiendo un nuevo elemento al final.</p> <pre><code>let frutas = [\"manzana\", \"banana\"];\nfrutas.push(\"naranja\"); // [\"manzana\", \"banana\", \"naranja\"]\n</code></pre> <p><code>.pop()</code> \u2013 Elimina el \u00faltimo elemento del array y lo devuelve.</p> <p>Si necesitamos eliminar el \u00faltimo elemento, <code>.pop()</code> es el m\u00e9todo adecuado.</p> <pre><code>let frutas = [\"manzana\", \"banana\", \"naranja\"];\nlet ultimaFruta = frutas.pop(); // \"naranja\"\nconsole.log(frutas); // [\"manzana\", \"banana\"]\n</code></pre> <p><code>.includes()</code> \u2013 Verifica si un elemento existe dentro del array.</p> <p>Este m\u00e9todo devuelve <code>true</code> si el elemento est\u00e1 en el array, y <code>false</code> en caso contrario. Muy \u00fatil para realizar b\u00fasquedas r\u00e1pidas.</p> <pre><code>let frutas = [\"manzana\", \"banana\", \"naranja\"];\nlet tieneBanana = frutas.includes(\"banana\"); // true\nlet tieneUva = frutas.includes(\"uva\"); // false\n</code></pre> <p><code>.shift()</code> \u2013 Elimina el primer elemento del array y lo devuelve.</p> <p>Similar a <code>.pop()</code>, pero elimina el primer elemento en lugar del \u00faltimo.</p> <pre><code>let frutas = [\"manzana\", \"banana\", \"naranja\"];\nlet primeraFruta = frutas.shift(); // \"manzana\"\nconsole.log(frutas); // [\"banana\", \"naranja\"]\n</code></pre> <p><code>.unshift()</code> \u2013 Agrega un elemento al inicio del array.</p> <p>Al contrario de <code>.push()</code>, este m\u00e9todo a\u00f1ade el nuevo elemento al principio del array.</p> <pre><code>let frutas = [\"banana\", \"naranja\"];\nfrutas.unshift(\"manzana\"); // [\"manzana\", \"banana\", \"naranja\"]\n</code></pre> <p><code>.indexOf()</code> \u2013 Encuentra el \u00edndice de un elemento en el array.</p> <p>Devuelve el \u00edndice de la primera aparici\u00f3n del elemento especificado, o <code>-1</code> si no lo encuentra.</p> <pre><code>let frutas = [\"manzana\", \"banana\", \"naranja\"];\nlet indiceBanana = frutas.indexOf(\"banana\"); // 1\nlet indiceUva = frutas.indexOf(\"uva\"); // -1\n</code></pre> <p>Estos m\u00e9todos b\u00e1sicos son sumamente \u00fatiles para manipular datos en arrays y constituyen una base s\u00f3lida para trabajar con estructuras m\u00e1s complejas en JavaScript. Para m\u00e1s m\u00e9todos sobre arrays puedes visitar la web de MDN</p>"},{"location":"2%20-%20Manejo%20de%20datos/#spread-operator","title":"Spread Operator","text":"<p>el spread operator (<code>...</code>) en JavaScript es una caracter\u00edstica poderosa que te permite expandir (o \"desplegar\") elementos de un array, objeto u otra estructura iterable en lugares donde se esperan elementos individuales. Con arrays, el spread operator se usa mucho para copiar, combinar, y manipular de forma f\u00e1cil los contenidos de arrays.</p> <p>1. Crear una Copia de un Array</p> <p>El spread operator es \u00fatil para crear copias de arrays sin modificar el array original. En lugar de hacer una copia directa (que solo copiar\u00eda la referencia y podr\u00eda causar problemas si cambias algo), el spread operator hace una copia completa de los elementos.</p> <pre><code>const originalArray = [1, 2, 3];\nconst copiedArray = [...originalArray];\n\nconsole.log(copiedArray); // [1, 2, 3]\n</code></pre> <p>Aqu\u00ed, <code>copiedArray</code> es una copia nueva e independiente de <code>originalArray</code>.</p> <p>2. Combinar Arrays</p> <p>Tambi\u00e9n puedes usar el spread operator para combinar arrays. Es como concatenar arrays, pero mucho m\u00e1s sencillo y directo.</p> <pre><code>const array1 = [1, 2, 3];\nconst array2 = [4, 5, 6];\nconst combinedArray = [...array1, ...array2];\n\nconsole.log(combinedArray); // [1, 2, 3, 4, 5, 6]\n</code></pre> <p>Aqu\u00ed, los elementos de <code>array1</code> y <code>array2</code> se combinan en un solo array llamado <code>combinedArray</code>.</p> <p>3. A\u00f1adir o Insertar Elementos en un Array</p> <p>Puedes insertar elementos adicionales al inicio, en el medio o al final del array usando el spread operator. Es muy \u00fatil cuando quieres agregar elementos a un array sin modificar el original.</p> <pre><code>const originalArray = [2, 3, 4];\nconst newArray = [1, ...originalArray, 5];\n\nconsole.log(newArray); // [1, 2, 3, 4, 5]\n</code></pre> <p>En este caso, <code>newArray</code> tiene el elemento <code>1</code> al principio y <code>5</code> al final, envolviendo los elementos del array original.</p> <p>4. Pasar Arrays como Argumentos en Funciones</p> <p>El spread operator es muy \u00fatil cuando necesitas pasar elementos de un array como argumentos individuales en una funci\u00f3n.</p> <pre><code>const numbers = [10, 20, 30];\nconst maxNumber = Math.max(...numbers);\n\nconsole.log(maxNumber); // 30\n</code></pre> <p>Aqu\u00ed, <code>Math.max(...numbers)</code> expande los elementos de <code>numbers</code> para que <code>Math.max</code> los reciba como si hubi\u00e9ramos escrito <code>Math.max(10, 20, 30)</code>.</p> <p>5. Eliminar o Ignorar Elementos Espec\u00edficos al Crear un Nuevo Array</p> <p>Puedes usar el spread operator junto con <code>filter</code> o combinando arrays para crear una copia que omita ciertos elementos.</p> <pre><code>const originalArray = [1, 2, 3, 4, 5];\nconst arrayWithoutTwo = originalArray.filter(num =&gt; num !== 2);\n\nconsole.log(arrayWithoutTwo); // [1, 3, 4, 5]\n</code></pre> <p>Ejemplo Completo</p> <p>Supongamos que tienes un array de estudiantes y quieres crear un nuevo array donde agregas un estudiante adicional al principio y otro al final:</p> <pre><code>const estudiantes = [\"Carlos\", \"Ana\", \"Luis\"];\nconst nuevosEstudiantes = [\"Maria\", ...estudiantes, \"Jos\u00e9\"];\n\nconsole.log(nuevosEstudiantes); // [\"Maria\", \"Carlos\", \"Ana\", \"Luis\", \"Jos\u00e9\"]\n</code></pre>"},{"location":"2%20-%20Manejo%20de%20datos/#json-javascript-object-notation","title":"JSON (JavaScript Object Notation)","text":"<p>JSON, o JavaScript Object Notation, es un formato de texto ligero y estructurado utilizado para almacenar y transportar datos. Aunque tiene sus ra\u00edces en JavaScript, JSON es ampliamente compatible con muchos lenguajes de programaci\u00f3n, lo que lo convierte en una opci\u00f3n est\u00e1ndar para el intercambio de datos entre sistemas, especialmente en aplicaciones web y APIs.</p>"},{"location":"2%20-%20Manejo%20de%20datos/#caracteristicas-principales-de-json","title":"Caracter\u00edsticas Principales de JSON","text":"<ul> <li>Simplicidad y legibilidad: JSON es f\u00e1cil de leer y escribir, lo que facilita el trabajo tanto para desarrolladores como para sistemas que lo procesan.</li> <li>Formato estructurado: Los datos en JSON se organizan de manera clara usando pares clave-valor para representar objetos, y listas de valores para representar arrays.</li> <li>Basado en texto: Como se trata de un formato de texto plano, los datos JSON pueden transportarse a trav\u00e9s de redes y ser f\u00e1cilmente interpretados por distintos lenguajes y plataformas.</li> </ul>"},{"location":"2%20-%20Manejo%20de%20datos/#estructura-de-json","title":"Estructura de JSON","text":"<p>La estructura de JSON es muy similar a la de los objetos en JavaScript, con llaves <code>{}</code> para representar objetos y corchetes <code>[]</code> para arrays. Aqu\u00ed tienes un ejemplo b\u00e1sico de JSON:</p> <pre><code>{\n  \"nombre\": \"Carlos\",\n  \"edad\": 30,\n  \"esEstudiante\": false,\n  \"habilidades\": [\"HTML\", \"CSS\", \"JavaScript\"],\n  \"direccion\": {\n    \"calle\": \"123 Calle Principal\",\n    \"ciudad\": \"Madrid\"\n  }\n}\n</code></pre> <p>En este ejemplo:</p> <ul> <li><code>\"nombre\"</code>, <code>\"edad\"</code>, <code>\"esEstudiante\"</code>, <code>\"habilidades\"</code>, y <code>\"direccion\"</code> son claves.</li> <li>Cada clave est\u00e1 asociada con un valor, que puede ser un string, n\u00famero, booleano, array, u otro objeto.</li> </ul>"},{"location":"2%20-%20Manejo%20de%20datos/#usando-json-en-javascript","title":"Usando JSON en JavaScript","text":"<p>En JavaScript, los datos JSON se pueden manipular f\u00e1cilmente usando los m\u00e9todos <code>JSON.stringify()</code> y <code>JSON.parse()</code>:</p> <ul> <li><code>JSON.stringify(objeto)</code>: Convierte un objeto de JavaScript en una cadena JSON.</li> <li><code>JSON.parse(cadenaJSON)</code>: Convierte una cadena JSON en un objeto de JavaScript.</li> </ul> <p>JSON es una herramienta esencial para trabajar con datos estructurados en el desarrollo de interfaces web, ya que permite una comunicaci\u00f3n clara y eficiente entre el frontend y el backend de una aplicaci\u00f3n.</p>"},{"location":"2%20-%20Manejo%20de%20datos/#ventajas-de-json","title":"Ventajas de JSON","text":"<ol> <li>Formato Universal: JSON es ampliamente aceptado y es compatible con casi todos los lenguajes de programaci\u00f3n, lo que lo convierte en el est\u00e1ndar de facto para intercambiar datos entre servicios y aplicaciones.</li> <li>Ligero y Eficiente: Al ser un formato basado en texto, JSON tiene una carga de datos relativamente baja y es f\u00e1cil de comprimir y descomprimir, optimizando la transferencia de datos en la web.</li> <li>Legible por Humanos y M\u00e1quinas: Su estructura es simple y se asemeja a la sintaxis de los objetos JavaScript, lo que facilita tanto su escritura como su interpretaci\u00f3n y depuraci\u00f3n.</li> </ol>"},{"location":"2%20-%20Manejo%20de%20datos/#tipos-de-datos-en-json","title":"Tipos de Datos en JSON","text":"<p>Los tipos de datos en JSON son limitados pero efectivos, lo que asegura la interoperabilidad entre diferentes sistemas. Los tipos permitidos incluyen:</p> <ul> <li>String: Textos entre comillas dobles. Ejemplo: <code>\"nombre\": \"Carlos\"</code></li> <li>Number: N\u00fameros, ya sean enteros o decimales. Ejemplo: <code>\"edad\": 30</code></li> <li>Boolean: Valores de verdad <code>true</code> o <code>false</code>. Ejemplo: <code>\"esEstudiante\": false</code></li> <li>Array: Listas ordenadas entre corchetes. Ejemplo: <code>\"habilidades\": [\"HTML\", \"CSS\", \"JavaScript\"]</code></li> <li>Object: Objetos definidos por pares clave-valor. Ejemplo: <code>\"direccion\": { \"calle\": \"123 Calle Principal\", \"ciudad\": \"Madrid\" }</code></li> <li>null: Un valor nulo. Ejemplo: <code>\"apellido\": null</code></li> </ul>"},{"location":"2%20-%20Manejo%20de%20datos/#metodos-de-conversion-de-json-en-javascript","title":"M\u00e9todos de Conversi\u00f3n de JSON en JavaScript","text":"<p>JavaScript ofrece m\u00e9todos integrados para trabajar con JSON y facilitar su manipulaci\u00f3n y conversi\u00f3n:</p> <ul> <li>JSON.stringify(): Convierte un objeto JavaScript en una cadena JSON. Es \u00fatil para preparar datos para enviarlos a un servidor o almacenarlos en un sistema de almacenamiento de texto (como <code>localStorage</code>).</li> </ul> <pre><code>const usuario = {\n  nombre: \"Carlos\",\n  edad: 30,\n  esEstudiante: false\n};\n\nconst usuarioJSON = JSON.stringify(usuario);\nconsole.log(usuarioJSON); // {\"nombre\":\"Carlos\",\"edad\":30,\"esEstudiante\":false}\n</code></pre> <ul> <li>JSON.parse(): Convierte una cadena JSON en un objeto JavaScript, permitiendo acceder y manipular los datos como en cualquier otro objeto. Este m\u00e9todo es com\u00fan para procesar respuestas de APIs o datos obtenidos de sistemas de almacenamiento.</li> </ul> <pre><code>const usuarioJSON = '{\"nombre\":\"Carlos\",\"edad\":30,\"esEstudiante\":false}';\n\nconst usuario = JSON.parse(usuarioJSON);\nconsole.log(usuario.nombre); // Carlos\n</code></pre>"},{"location":"2%20-%20Manejo%20de%20datos/#buenas-practicas-al-trabajar-con-json","title":"Buenas Pr\u00e1cticas al Trabajar con JSON","text":"<ol> <li> <p>Validez de JSON: JSON es estricto en su formato. Por ejemplo, las claves deben estar entre comillas dobles (<code>\"nombre\"</code>) y no se permiten comas adicionales al final de listas o objetos.</p> </li> <li> <p>Serializaci\u00f3n: A veces, cuando conviertes un objeto a JSON, puedes querer omitir ciertos datos o formatearlo. <code>JSON.stringify()</code> acepta un segundo par\u00e1metro para un \u201creplacer\u201d, que puede ser un array de claves que quieres incluir o una funci\u00f3n que personaliza la salida.</p> </li> </ol> <pre><code>const usuario = { nombre: \"Carlos\", edad: 30, esEstudiante: false };\nconst usuarioFiltrado = JSON.stringify(usuario, [\"nombre\", \"edad\"]);\nconsole.log(usuarioFiltrado); // {\"nombre\":\"Carlos\",\"edad\":30}\n</code></pre> <ol> <li>Espaciado y Formato Legible: Para facilitar la legibilidad, <code>JSON.stringify()</code> permite un tercer par\u00e1metro que indica el nivel de indentaci\u00f3n:</li> </ol> <pre><code>const usuario = { nombre: \"Carlos\", edad: 30, esEstudiante: false };\nconst usuarioJSON = JSON.stringify(usuario, null, 2);\nconsole.log(usuarioJSON);\n/* \n{\n  \"nombre\": \"Carlos\",\n  \"edad\": 30,\n  \"esEstudiante\": false\n}\n*/\n</code></pre> <ol> <li>Seguridad: Al recibir JSON de fuentes externas, especialmente desde APIs, es importante validar los datos antes de usarlos en la aplicaci\u00f3n para evitar inyecciones o errores no deseados. JSON.parse() solo acepta JSON bien formado, pero no garantiza que los datos sean seguros o v\u00e1lidos seg\u00fan la l\u00f3gica de tu aplicaci\u00f3n.</li> </ol>"},{"location":"2%20-%20Manejo%20de%20datos/#json-y-apis","title":"JSON y APIs","text":"<p>En aplicaciones web, JSON es la principal forma de comunicarse con APIs RESTful. Las solicitudes a APIs a menudo devuelven JSON como respuesta, y los datos se env\u00edan en este mismo formato. As\u00ed, en JavaScript, puedes usar <code>fetch()</code> para realizar una solicitud, procesar la respuesta como JSON y luego manipular los datos.</p> <pre><code>fetch(\"https://api.example.com/usuarios/1\")\n  .then(response =&gt; response.json()) // Convertir a JSON\n  .then(data =&gt; {\n    console.log(data.nombre); // Usar los datos recibidos\n  })\n  .catch(error =&gt; console.error(\"Error:\", error));\n</code></pre>"},{"location":"2%20-%20Manejo%20de%20datos/#json-en-almacenamiento-local","title":"JSON en Almacenamiento Local","text":"<p>En el frontend, el almacenamiento de datos en JSON tambi\u00e9n es com\u00fan con <code>localStorage</code> o <code>sessionStorage</code>, ya que estos sistemas solo admiten valores de texto. Usar <code>JSON.stringify()</code> y <code>JSON.parse()</code> permite guardar y recuperar datos complejos.</p> <pre><code>const usuario = { nombre: \"Carlos\", edad: 30 };\nlocalStorage.setItem(\"usuario\", JSON.stringify(usuario));\n\nconst usuarioGuardado = JSON.parse(localStorage.getItem(\"usuario\"));\nconsole.log(usuarioGuardado.nombre); // Carlos\n</code></pre> <p>JSON es, en esencia, un pilar en la comunicaci\u00f3n de datos en aplicaciones modernas, y su versatilidad lo hace indispensable en el desarrollo de interfaces web y sistemas de intercambio de informaci\u00f3n.</p>"},{"location":"2%20-%20Manejo%20de%20datos/#ejemplo-de-filtrado-de-datos-en-json","title":"Ejemplo de filtrado de datos en JSON","text":"<p>Para hacer el filtrado de un objeto JSON que est\u00e9 almacenado en una constante, vamos a suponer que tenemos un JSON con una estructura como la siguiente y que se almacena en una constante llamada <code>misDatos</code>.</p> <p>Supongamos que tenemos la siguiente estructura de datos con notaci\u00f3n JSON:</p> <pre><code>// JSON almacenado en la constante\nconst misDatos = [\n  { nombre: \"Carlos\", apellido: \"Hern\u00e1ndez\", edad: 30 },\n  { nombre: \"Ana\", apellido: \"P\u00e9rez\", edad: 25 },\n  { nombre: \"Luis\", apellido: \"Hern\u00e1ndez\", edad: 28 },\n  { nombre: \"Mar\u00eda\", apellido: \"Garc\u00eda\", edad: 35 }\n];\n\n// Filtrar los datos para obtener aquellos donde apellido sea \"Hern\u00e1ndez\"\nconst resultado = misDatos.filter(persona =&gt; persona.apellido === \"Hern\u00e1ndez\");\n\nconsole.log(resultado);\n</code></pre>"},{"location":"2%20-%20Manejo%20de%20datos/#explicacion-del-codigo","title":"Explicaci\u00f3n del C\u00f3digo","text":"<ol> <li> <p>Estructura de <code>misDatos</code>: En este caso, <code>misDatos</code> es un array de objetos JSON, donde cada objeto representa informaci\u00f3n sobre una persona, incluyendo <code>nombre</code>, <code>apellido</code> y <code>edad</code>.</p> </li> <li> <p>Uso de <code>filter()</code>: Usamos el m\u00e9todo <code>.filter()</code> para recorrer el array <code>misDatos</code> y buscar objetos que cumplan la condici\u00f3n <code>persona.apellido === \"Hern\u00e1ndez\"</code>. El m\u00e9todo <code>.filter()</code> devuelve un nuevo array que incluye todos los objetos que cumplen con la condici\u00f3n.</p> </li> <li> <p>Salida: Al final, <code>resultado</code> contendr\u00e1 todos los objetos de <code>misDatos</code> donde el <code>apellido</code> sea igual a <code>\"Hern\u00e1ndez\"</code>. En este caso, el <code>console.log(resultado);</code> mostrar\u00eda:</p> </li> </ol> <pre><code>[\n  { nombre: \"Carlos\", apellido: \"Hern\u00e1ndez\", edad: 30 },\n  { nombre: \"Luis\", apellido: \"Hern\u00e1ndez\", edad: 28 }\n]\n</code></pre>"},{"location":"2%20-%20Manejo%20de%20datos/#explicacion-del-resultado","title":"Explicaci\u00f3n del Resultado","text":"<p>Este filtrado devuelve un array con dos objetos, ya que en <code>misDatos</code> hay dos personas con el <code>apellido</code> <code>\"Hern\u00e1ndez\"</code>. Cada objeto incluye la informaci\u00f3n completa de esas personas, tal como la edad y el nombre.</p>"},{"location":"2%20-%20Manejo%20de%20datos/#api-acceso-a-datos-remotos","title":"API \u27a1\ufe0f Acceso a datos remotos","text":"<p>El m\u00e9todo <code>fetch()</code> en JavaScript es una herramienta poderosa para hacer solicitudes HTTP y obtener datos de un servidor de manera as\u00edncrona. Se utiliza ampliamente para conectarse con APIs y obtener o enviar datos sin necesidad de recargar la p\u00e1gina. <code>fetch()</code> devuelve una Promesa, lo que significa que podemos trabajar con el resultado de la solicitud de manera as\u00edncrona utilizando <code>.then()</code> o <code>async/await</code>.</p>"},{"location":"2%20-%20Manejo%20de%20datos/#sintaxis-basica-de-fetch","title":"Sintaxis b\u00e1sica de <code>fetch()</code>","text":"<pre><code>fetch(url, options)\n  .then(response =&gt; {\n    // Manipular la respuesta aqu\u00ed\n  })\n  .catch(error =&gt; {\n    // Manejar errores aqu\u00ed\n  });\n</code></pre> <ul> <li><code>url</code>: La direcci\u00f3n del recurso o API que queremos solicitar.</li> <li><code>options</code> (opcional): Un objeto de configuraci\u00f3n para especificar detalles adicionales de la solicitud, como el m\u00e9todo (<code>GET</code>, <code>POST</code>, etc.), encabezados, cuerpo de la solicitud, etc.</li> </ul>"},{"location":"2%20-%20Manejo%20de%20datos/#ejemplos-de-uso-de-fetch","title":"Ejemplos de Uso de <code>fetch()</code>","text":""},{"location":"2%20-%20Manejo%20de%20datos/#1-hacer-una-solicitud-get-basica","title":"1. Hacer una Solicitud GET B\u00e1sica","text":"<p>Vamos a realizar una solicitud <code>GET</code> para obtener datos de una API p\u00fablica, por ejemplo, una API de usuarios ficticios.</p> <pre><code>fetch('https://jsonplaceholder.typicode.com/users')\n  .then(response =&gt; {\n    if (!response.ok) {\n      throw new Error('Error en la solicitud');\n    }\n    return response.json(); // Convertir la respuesta a JSON\n  })\n  .then(data =&gt; {\n    console.log(data); // Aqu\u00ed podr\u00edamos procesar los datos\n  })\n  .catch(error =&gt; {\n    console.error('Hubo un problema con la solicitud:', error);\n  });\n</code></pre> <p>En este ejemplo:</p> <ul> <li><code>fetch()</code> realiza una solicitud <code>GET</code> a la URL proporcionada.</li> <li><code>response.json()</code> convierte la respuesta a un objeto JSON que podemos usar en el c\u00f3digo.</li> <li>Si ocurre un error en la solicitud (por ejemplo, una URL incorrecta), el bloque <code>catch</code> manejar\u00e1 el error.</li> </ul>"},{"location":"2%20-%20Manejo%20de%20datos/#2-uso-de-fetch-con-asyncawait","title":"2. Uso de <code>fetch()</code> con Async/Await","text":"<p>Podemos usar <code>async/await</code> para hacer el c\u00f3digo m\u00e1s limpio y legible:</p> <pre><code>async function obtenerUsuarios() {\n  try {\n    const response = await fetch('https://jsonplaceholder.typicode.com/users');\n    if (!response.ok) {\n      throw new Error('Error en la solicitud');\n    }\n    const data = await response.json();\n    console.log(data);\n  } catch (error) {\n    console.error('Hubo un problema con la solicitud:', error);\n  }\n}\n\nobtenerUsuarios();\n</code></pre> <p>En este caso, <code>async/await</code> nos permite escribir c\u00f3digo de manera m\u00e1s secuencial. La funci\u00f3n <code>obtenerUsuarios</code> espera el resultado de <code>fetch()</code> y convierte la respuesta a JSON antes de continuar. Esto hace que el c\u00f3digo sea m\u00e1s f\u00e1cil de leer.</p>"},{"location":"2%20-%20Manejo%20de%20datos/#3-hacer-una-solicitud-post-con-fetch","title":"3. Hacer una Solicitud POST con <code>fetch()</code>","text":"<p>Para enviar datos a una API, podemos usar el m\u00e9todo <code>POST</code>. A continuaci\u00f3n, se muestra c\u00f3mo hacerlo configurando el <code>body</code> y los <code>headers</code> de la solicitud:</p> <pre><code>async function agregarUsuario(nuevoUsuario) {\n  try {\n    const response = await fetch('https://jsonplaceholder.typicode.com/users', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(nuevoUsuario), // Convertir el objeto a JSON\n    });\n    if (!response.ok) {\n      throw new Error('Error en la solicitud');\n    }\n    const data = await response.json();\n    console.log('Usuario agregado:', data);\n  } catch (error) {\n    console.error('Hubo un problema con la solicitud:', error);\n  }\n}\n\nconst usuario = { name: 'Juan', email: 'juan@example.com' };\nagregarUsuario(usuario);\n</code></pre> <p>En este ejemplo:</p> <ul> <li><code>method: 'POST'</code> especifica que estamos enviando datos.</li> <li><code>headers</code> define el tipo de contenido que estamos enviando, en este caso, <code>application/json</code>.</li> <li><code>body</code> env\u00eda los datos JSON convertidos a un string con <code>JSON.stringify()</code>.</li> </ul> <p>Consideraciones Importantes</p> <ul> <li>Verificaci\u00f3n de Errores: Siempre es \u00fatil verificar si <code>response.ok</code> es <code>true</code> para asegurar que la solicitud fue exitosa.</li> <li>Promesas y Async/Await: Ambos enfoques son v\u00e1lidos para manejar <code>fetch()</code>. <code>async/await</code> tiende a ser m\u00e1s legible en operaciones complejas.</li> <li>CORS: Al hacer solicitudes a otros dominios, se pueden enfrentar problemas de CORS (Cross-Origin Resource Sharing) que bloquean el acceso a ciertas APIs debido a restricciones de seguridad.</li> </ul>"},{"location":"2%20-%20Manejo%20de%20datos/#pero-que-es-una-promesa","title":"Pero... \u00bfQu\u00e9 es una Promesa?","text":"<p>Imagina que quieres pedir una pizza a domicilio. Llamas a la pizzer\u00eda, haces el pedido y te dicen: \"Tu pizza estar\u00e1 lista en 30 minutos.\" Este es un ejemplo de una promesa.</p> <p>La promesa es que recibir\u00e1s la pizza (tu resultado final), pero no ocurre de inmediato. Durante esos 30 minutos, no tienes que quedarte esperando sin hacer nada; puedes ver una pel\u00edcula o hacer otra cosa. Una vez que la pizza llega, puedes disfrutarla o, si hay un problema (la pizza no llega o llega equivocada), tendr\u00e1s que manejar esa situaci\u00f3n.</p> <p>As\u00ed es una promesa en programaci\u00f3n: es algo que pide el programa y que se cumplir\u00e1 en el futuro (cuando se resuelve la promesa) o que puede fallar (cuando la promesa se rechaza). Mientras tanto, el programa puede seguir haciendo otras cosas.</p>"},{"location":"2%20-%20Manejo%20de%20datos/#vale-si-entonces-que-es-asincrono","title":"Vale si, entonces \u00bfQu\u00e9 es \"As\u00edncrono\"?","text":"<p>\"As\u00edncrono\" significa que las cosas no suceden todas al mismo tiempo o en un orden estricto; pueden pasar en momentos diferentes. Esto es diferente a las tareas \"s\u00edncronas\", donde cada cosa debe esperar que la anterior termine antes de empezar.</p> <p>Imagina que tienes que lavar ropa, hacer la cena y regar las plantas. Si lo haces de manera \"s\u00edncrona\", significar\u00eda que:</p> <ol> <li>Lavas toda la ropa.</li> <li>Luego, haces la cena.</li> <li>Por \u00faltimo, riegas las plantas.</li> </ol> <p>Pero, si lo haces de manera as\u00edncrona, puedes poner la lavadora (que tardar\u00e1 un rato en lavar) y, mientras tanto, ir haciendo la cena o regando las plantas. De esta forma, no pierdes tiempo y puedes hacer varias cosas a la vez sin necesidad de esperar.</p> <p>En programaci\u00f3n, cuando trabajamos de manera as\u00edncrona, el programa puede pedir datos, esperar una respuesta, y al mismo tiempo continuar con otras tareas. As\u00ed, el usuario no tiene que esperar sin hacer nada hasta que se complete cada tarea.</p>"},{"location":"2%20-%20Manejo%20de%20datos/#como-funcionan-promesas-y-asincronia-juntos","title":"\u00bfC\u00f3mo funcionan Promesas y Asincron\u00eda Juntos?","text":"<p>Imagina que el programa hace un \"pedido\" a un servidor, como si llamara a la pizzer\u00eda. Este pedido se env\u00eda de manera as\u00edncrona, lo que significa que el programa no se queda esperando hasta que llegue la respuesta, sino que puede seguir haciendo otras cosas. Cuando llega la respuesta, el programa puede actuar sobre ella (como recibir la pizza y comerla), o manejar cualquier error que haya ocurrido.</p> <p>Estas t\u00e9cnicas ayudan a que las aplicaciones web funcionen de manera fluida, sin hacer que el usuario espere innecesariamente.</p> <p>En resumen</p> <p>As\u00edncrono es un estilo de trabajo, una manera de gestionar tareas. Significa que el programa puede ejecutar otras cosas sin tener que esperar a que una tarea particular termine. Es un enfoque que permite que las cosas pasen \"en paralelo\" o de manera independiente, sin una espera obligatoria.</p> <p>Promesa es un tipo de herramienta en JavaScript dise\u00f1ada para manejar operaciones as\u00edncronas. Una promesa representa el compromiso de que se recibir\u00e1 un resultado en el futuro, permitiendo al programa reaccionar cuando este resultado est\u00e9 disponible.</p> <p>\ud83d\udca1 Las promesas son, de hecho, una forma de manejar la asincron\u00eda en JavaScript de manera organizada.</p>"},{"location":"2%20-%20Manejo%20de%20datos/#ejemplo-rapido-async-en-javascript","title":"Ejemplo r\u00e1pido \ud83d\udc49\ud83c\udffb <code>async</code> en JavaScript \ud83d\udc48\ud83c\udffb","text":"<p>En JavaScript, la palabra clave <code>async</code> marca una funci\u00f3n como as\u00edncrona. Esto significa que esa funci\u00f3n puede incluir operaciones que no necesitan completarse inmediatamente para que el resto del c\u00f3digo siga funcionando. </p> <p>Cuando declaras una funci\u00f3n con <code>async</code>, est\u00e1s dici\u00e9ndole a JavaScript que esta funci\u00f3n puede tener tareas que \"se retrasen\" y que, por lo tanto, deber\u00eda trabajar de manera no bloqueante. La funci\u00f3n <code>async</code> regresa una promesa autom\u00e1ticamente. De esta manera, puedes esperar el resultado de esa funci\u00f3n usando <code>await</code>.</p>"},{"location":"2%20-%20Manejo%20de%20datos/#ejemplo-rapido","title":"Ejemplo r\u00e1pido","text":"<pre><code>async function obtenerDatos() {\n  let respuesta = await fetch('https://api.example.com/datos');\n  let datos = await respuesta.json();\n  return datos;\n}\n</code></pre> <p>Aqu\u00ed: - La funci\u00f3n <code>obtenerDatos()</code> es as\u00edncrona. - Con <code>await</code>, pausamos la ejecuci\u00f3n hasta que <code>fetch</code> termine (sin bloquear el resto del programa). - La funci\u00f3n devuelve una promesa que se resuelve cuando los datos est\u00e1n listos.</p>"},{"location":"2%20-%20Manejo%20de%20datos/#ejemplo-php-y-acceso-a-api-con-js","title":"Ejemplo <code>PHP</code> y acceso a API con <code>JS</code>","text":"<p>Para crear una API muy sencilla en PHP que responda con el mensaje \"Hola mundo\", puedes usar este c\u00f3digo en un archivo llamado <code>miapi.php</code>. Este archivo servir\u00e1 como el punto final de la API, y cada vez que lo consultes con <code>fetch</code> desde JavaScript (o cualquier otra herramienta que haga peticiones HTTP), te devolver\u00e1 un texto plano con \"Hola mundo\".</p> <pre><code>&lt;?php\n// Establecemos la cabecera para indicar que la respuesta es de tipo JSON\nheader('Content-Type: application/json');\n\n// Creamos un array con el mensaje que queremos devolver\n$response = [\n    \"mensaje\" =&gt; \"Hola mundo\"\n];\n\n// Convertimos el array a formato JSON y lo devolvemos\necho json_encode($response);\n?&gt;\n</code></pre>"},{"location":"2%20-%20Manejo%20de%20datos/#explicacion-del-codigo_1","title":"Explicaci\u00f3n del C\u00f3digo","text":"<ol> <li> <p>Cabecera JSON: <code>header('Content-Type: application/json');</code> indica al cliente (quien haga la petici\u00f3n) que la respuesta es de tipo JSON.</p> </li> <li> <p>Respuesta: Definimos un array con el mensaje <code>\"Hola mundo\"</code> para tener una estructura m\u00e1s clara y organizada.</p> </li> <li> <p>Conversi\u00f3n a JSON: <code>json_encode($response);</code> convierte el array PHP en una cadena JSON antes de enviarla.</p> </li> </ol>"},{"location":"2%20-%20Manejo%20de%20datos/#ejemplo-de-uso-con-fetch","title":"Ejemplo de uso con <code>fetch</code>","text":"<pre><code>fetch('miapi.php')\n  .then(response =&gt; response.json())\n  .then(data =&gt; {\n    console.log(data.mensaje); // Deber\u00eda imprimir \"Hola mundo\" en la consola\n  })\n  .catch(error =&gt; console.error('Error:', error));\n</code></pre>"},{"location":"2%20-%20Manejo%20de%20datos/#resultado","title":"Resultado","text":"<p>Al hacer la petici\u00f3n <code>fetch</code> a <code>miapi.php</code>, obtendr\u00e1s el mensaje en formato JSON:</p> <pre><code>{\n  \"mensaje\": \"Hola mundo\"\n}\n</code></pre>"},{"location":"3%20-%20Frameworks/","title":"3\ufe0f\u20e3 Frameworks en JavaScript","text":"<p>En el desarrollo moderno de aplicaciones web, los <code>frameworks</code> de <code>JavaScript</code> para el frontend han transformado la manera en que se crean interfaces de usuario. En sus inicios, <code>JavaScript</code> se utilizaba principalmente para a\u00f1adir interactividad b\u00e1sica a las p\u00e1ginas web mediante scripts independientes. Sin embargo, con el tiempo y el crecimiento exponencial de las aplicaciones web, surgi\u00f3 la necesidad de herramientas m\u00e1s estructuradas y eficientes para manejar el c\u00f3digo, especialmente cuando las aplicaciones se volvieron m\u00e1s complejas, din\u00e1micas y dependientes de la interacci\u00f3n en tiempo real.</p>"},{"location":"3%20-%20Frameworks/#que-son-los-frameworks-de-frontend","title":"\u00bfQu\u00e9 son los Frameworks de Frontend?","text":"<p>Un framework de frontend es un conjunto de herramientas, bibliotecas y convenciones que facilita la creaci\u00f3n de aplicaciones web din\u00e1micas.</p> <p>Estos <code>frameworks</code> proporcionan una estructura base y abstraen muchas de las tareas complejas asociadas con la manipulaci\u00f3n del DOM, la gesti\u00f3n de datos, la actualizaci\u00f3n de la interfaz de usuario y el manejo de eventos.</p> <p>En esencia, permiten que los desarrolladores se concentren m\u00e1s en la l\u00f3gica de la aplicaci\u00f3n y menos en los detalles t\u00e9cnicos subyacentes.  </p> <p>Los <code>frameworks</code> modernos de <code>JavaScript</code>, como Vue.js, React y Angular, est\u00e1n dise\u00f1ados para manejar aplicaciones de una sola p\u00e1gina (Single Page Applications o SPA), donde la mayor parte de la interacci\u00f3n ocurre en el navegador sin necesidad de recargar la p\u00e1gina. Esto da lugar a experiencias m\u00e1s r\u00e1pidas y fluidas para el usuario.</p> <p>Cuidado...</p> <p>No siempre es buena idea hacer una SPA, de la misma manera que tiene ventajas tambi\u00e9n tiene inconvenientes. Depender\u00e1 de las necesidades de nuestro proyecto si hacer una SPA o no, o utilizar herramientas adicionales para convertir una SPA en una aplicaci\u00f3n web m\u00e1s avanzada.</p>"},{"location":"3%20-%20Frameworks/#ventajas-de-los-frameworks-de-frontend","title":"Ventajas de los Frameworks de Frontend","text":"<ol> <li>Modularidad: Los <code>frameworks</code> permiten dividir la aplicaci\u00f3n en componentes reutilizables. Cada componente encapsula su l\u00f3gica, estilo y funcionalidad, lo que facilita la escalabilidad y el mantenimiento del c\u00f3digo.  </li> <li>Gesti\u00f3n eficiente del DOM: La manipulaci\u00f3n directa del DOM puede ser ineficiente y propensa a errores. Los <code>frameworks</code> utilizan un Virtual DOM o t\u00e9cnicas similares para actualizar la interfaz de manera \u00f3ptima.  </li> <li>Enlace de datos (Data Binding): Simplifican la sincronizaci\u00f3n entre los datos de la aplicaci\u00f3n y su representaci\u00f3n visual en la interfaz.  </li> <li>Comunidad activa y ecosistema: Los <code>frameworks</code> tienen una comunidad amplia que desarrolla bibliotecas, herramientas y documentaci\u00f3n. Esto acelera el desarrollo y resuelve problemas comunes.  </li> <li>Compatibilidad con herramientas modernas: La mayor\u00eda de los <code>frameworks</code> est\u00e1n dise\u00f1ados para integrarse con sistemas de construcci\u00f3n (build systems), pruebas automatizadas y otras herramientas de desarrollo modernas.</li> </ol>"},{"location":"3%20-%20Frameworks/#preparando-el-entorno-instalando-nodejs","title":"Preparando el entorno \u27a1 Instalando NodeJS","text":"<p><code>NodeJS</code> es un entorno de ejecuci\u00f3n de JavaScript del lado del servidor que permite a los desarrolladores ejecutar c\u00f3digo JavaScript fuera del navegador. Fue creado en 2009 por Ryan Dahl y se basa en el motor V8 de Google Chrome, el cual es conocido por su alto rendimiento y eficiencia.</p> <p>Antes de <code>NodeJS</code>, JavaScript estaba principalmente limitado a las aplicaciones del lado del cliente. Con <code>NodeJS</code>, se abri\u00f3 la posibilidad de usar JavaScript para construir aplicaciones completas, desde el frontend hasta el backend, convirti\u00e9ndolo en una de las herramientas m\u00e1s populares en el desarrollo de software moderno.</p> <p>\u00bfQu\u00e9 hace especial a <code>NodeJS</code>?</p> <ol> <li> <p>Modelo as\u00edncrono y orientado a eventos: <code>NodeJS</code> adopta un modelo no bloqueante (non-blocking), lo que significa que puede manejar m\u00faltiples solicitudes al mismo tiempo sin necesidad de bloquear el flujo de ejecuci\u00f3n. Esto lo hace extremadamente eficiente en aplicaciones de red o en escenarios donde se manejan grandes cantidades de datos.</p> </li> <li> <p>Plataforma multiplataforma: <code>NodeJS</code> se puede ejecutar en diversos sistemas operativos, como Windows, macOS y Linux, lo que lo convierte en una herramienta vers\u00e1til.</p> </li> <li> <p>\u00danico lenguaje para frontend y backend:    Con <code>NodeJS</code>, los desarrolladores pueden escribir tanto la l\u00f3gica del cliente como del servidor utilizando JavaScript, lo que reduce la curva de aprendizaje y fomenta la colaboraci\u00f3n dentro de los equipos.</p> </li> <li> <p>Gran ecosistema de paquetes: <code>NodeJS</code> cuenta con npm (Node Package Manager), un gestor de paquetes que alberga m\u00e1s de un mill\u00f3n de librer\u00edas. Estas librer\u00edas permiten a los desarrolladores integrar funcionalidades preconstruidas y acelerar el desarrollo de aplicaciones.</p> </li> </ol> <p>Casos de uso de <code>NodeJS</code></p> <p><code>NodeJS</code> es ideal para ciertos tipos de aplicaciones, como: - Aplicaciones en tiempo real (Real-time Apps): chats, sistemas de mensajer\u00eda, colaboraci\u00f3n en l\u00ednea. - APIs y servicios web: construcci\u00f3n de RESTful APIs o GraphQL. - Aplicaciones de streaming: transmisi\u00f3n de video o m\u00fasica en plataformas como Netflix. - Automatizaci\u00f3n de tareas: scripts para compilaci\u00f3n, pruebas o despliegue.</p> <p>Sin embargo, no es la mejor opci\u00f3n para aplicaciones intensivas en CPU, como procesamiento complejo de datos, debido a su modelo de un solo hilo.</p> <p>Ventajas de <code>NodeJS</code></p> <ol> <li> <p>Eficiencia y rendimiento:    Gracias al motor V8 y su arquitectura as\u00edncrona, <code>NodeJS</code> puede manejar miles de conexiones simult\u00e1neas de manera eficiente.</p> </li> <li> <p>Escalabilidad:    Es f\u00e1cil escalar aplicaciones <code>NodeJS</code> horizontalmente (a\u00f1adiendo m\u00e1s servidores) o verticalmente (aumentando los recursos del servidor).</p> </li> <li> <p>Comunidad activa:    La comunidad de <code>NodeJS</code> es enorme y activa, lo que garantiza la disponibilidad de recursos, documentaci\u00f3n y librer\u00edas.</p> </li> <li> <p>Rapidez en el desarrollo:    Con herramientas como npm y la capacidad de usar el mismo lenguaje en el cliente y el servidor, <code>NodeJS</code> facilita la creaci\u00f3n r\u00e1pida de aplicaciones.</p> </li> </ol> <p>\u00bfPor qu\u00e9 aprender <code>NodeJS</code>?</p> <p>Aprender <code>NodeJS</code> es una excelente decisi\u00f3n para cualquier desarrollador web moderno, ya que: - Es uno de los entornos m\u00e1s demandados en el desarrollo backend. - Su simplicidad y eficiencia hacen que sea f\u00e1cil de aprender y usar. - Es el coraz\u00f3n de muchas tecnolog\u00edas modernas, como frameworks (Express.js, Nest.js) y herramientas de desarrollo (Webpack, Babel).</p>"},{"location":"3%20-%20Frameworks/#instalando-nodejs","title":"Instalando NodeJS","text":"<p>Para poder Instalar <code>NodeJS</code> debemos dirigirnos a la web oficial y seleccionar el instalador correspondiente a nuestro sistema operativo.</p> <p>Desde este enlace a la web de NodeJS podr\u00e1s descargarte el paquete que necesitas.</p> <p>Cuidado con las versiones del instalador</p> <p>Si no sabes de qu\u00e9 se trata, intenta SIEMPRE descargarte el paquete que diga LTS</p> <p></p>"},{"location":"3%20-%20Frameworks/#introduccion-al-gestor-de-paquetes-npm","title":"Introducci\u00f3n al gestor de paquetes NPM","text":"<p>Ahora que ya tenemos listo el <code>NodeJS</code> podemos hacer uso de los repositorios de NPM</p> <p>NPM (Node Package Manager) es el gestor de paquetes predeterminado para Node.js, y es una de las herramientas m\u00e1s importantes en el ecosistema de JavaScript. Fue lanzado en 2010 junto con Node.js para facilitar la instalaci\u00f3n, gesti\u00f3n y distribuci\u00f3n de librer\u00edas y paquetes de c\u00f3digo reutilizable. Hoy en d\u00eda, NPM es el repositorio de software m\u00e1s grande del mundo, con millones de paquetes disponibles para desarrolladores de todo el mundo.</p>"},{"location":"3%20-%20Frameworks/#que-es-un-paquete-en-npm","title":"\u00bfQu\u00e9 es un paquete en NPM?","text":"<p>Un paquete en NPM es un conjunto de archivos (normalmente JavaScript) que cumple una funcionalidad espec\u00edfica. Los paquetes pueden ser bibliotecas peque\u00f1as que realizan tareas sencillas o frameworks completos para el desarrollo de aplicaciones. Por ejemplo: - Librer\u00edas: <code>lodash</code> (utilidades para manipular datos), <code>moment</code> (manejo de fechas). - Frameworks: <code>express</code> (framework backend), <code>react</code> (framework frontend). - Herramientas de desarrollo: <code>webpack</code> (empaquetador), <code>eslint</code> (herramienta de linting).</p>"},{"location":"3%20-%20Frameworks/#por-que-es-importante-npm","title":"\u00bfPor qu\u00e9 es importante NPM?","text":"<p>NPM es fundamental para los desarrolladores porque: 1. Facilita el acceso a librer\u00edas: Permite instalar y utilizar f\u00e1cilmente librer\u00edas creadas por otros desarrolladores. 2. Gestiona dependencias: Maneja autom\u00e1ticamente las dependencias que necesitan los proyectos. 3. Promueve la colaboraci\u00f3n y la reutilizaci\u00f3n: Los desarrolladores pueden compartir sus propios paquetes con la comunidad. 4. Optimiza el desarrollo: Evita reinventar la rueda al permitir que los desarrolladores utilicen soluciones existentes para problemas comunes.</p>"},{"location":"3%20-%20Frameworks/#componentes-de-npm","title":"Componentes de NPM","text":"<ol> <li> <p>El cliente de NPM (<code>npm</code>):    Es una herramienta de l\u00ednea de comandos que viene preinstalada con Node.js. Permite instalar, actualizar, eliminar y gestionar paquetes.</p> </li> <li> <p>El registro de NPM:    Es el repositorio en l\u00ednea que almacena todos los paquetes disponibles. Puedes explorar estos paquetes en npmjs.com.</p> </li> <li> <p>El archivo <code>package.json</code>:    Es un archivo clave en cualquier proyecto de Node.js. Contiene informaci\u00f3n sobre el proyecto, como su nombre, versi\u00f3n, dependencias y scripts. Por ejemplo:</p> </li> </ol> <pre><code>{\n  \"name\": \"mi-proyecto\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Un proyecto b\u00e1sico con Node.js y NPM\",\n  \"dependencies\": {\n    \"express\": \"^4.18.2\"\n  },\n  \"scripts\": {\n    \"start\": \"node app.js\"\n  }\n}\n</code></pre> <p>Este archivo ayuda a que otros desarrolladores puedan instalar las dependencias de tu proyecto con un solo comando (<code>npm install</code>).</p>"},{"location":"3%20-%20Frameworks/#comandos-basicos-de-npm","title":"Comandos B\u00e1sicos de NPM","text":"<ol> <li>Instalar un paquete: <pre><code>npm install nombre-paquete\n</code></pre>    Este comando descarga e instala un paquete del registro de NPM en la carpeta <code>node_modules</code>.</li> </ol> <p>Ejemplo:    <pre><code>npm install express\n</code></pre>    Esto instala el framework Express para construir servidores en Node.js.</p> <ol> <li> <p>Instalar dependencias globales: <pre><code>npm install -g nombre-paquete\n</code></pre>    Esto instala un paquete de forma global, permiti\u00e9ndote usarlo en cualquier proyecto. Ejemplo: instalar el CLI de <code>nodemon</code>:    <pre><code>npm install -g nodemon\n</code></pre></p> </li> <li> <p>Crear un proyecto con <code>package.json</code>:    Para inicializar un proyecto con un archivo <code>package.json</code>, se usa:    <pre><code>npm init\n</code></pre>    Este comando interactivo te gu\u00eda para configurar tu proyecto.</p> </li> <li> <p>Actualizar un paquete: <pre><code>npm update nombre-paquete\n</code></pre></p> </li> <li> <p>Eliminar un paquete: <pre><code>npm uninstall nombre-paquete\n</code></pre></p> </li> <li> <p>Listar los paquetes instalados: <pre><code>npm list\n</code></pre>    O, para ver los paquetes instalados globalmente:    <pre><code>npm list -g\n</code></pre></p> </li> </ol>"},{"location":"3%20-%20Frameworks/#introduccion-a-vuejs","title":"Introducci\u00f3n a Vue.js","text":"<p>Vue.js es uno de los <code>frameworks</code> de <code>JavaScript</code> m\u00e1s populares, junto a React y Angular, en la actualidad, especialmente conocido por su facilidad de uso, flexibilidad y rendimiento.</p> <p>Fue creado por <code>Evan You</code> en 2014 con el objetivo de ofrecer una herramienta m\u00e1s ligera y accesible en comparaci\u00f3n con <code>frameworks</code> como Angular, pero con caracter\u00edsticas potentes que lo hacen adecuado para proyectos tanto peque\u00f1os como grandes.</p>"},{"location":"3%20-%20Frameworks/#caracteristicas-principales-de-vuejs","title":"Caracter\u00edsticas principales de Vue.js","text":"<ol> <li>Progresividad: Vue est\u00e1 dise\u00f1ado como un framework progresivo, lo que significa que puedes integrarlo gradualmente en un proyecto existente. Puedes empezar utilizando Vue simplemente para manejar una parte espec\u00edfica de tu aplicaci\u00f3n y, si lo deseas, escalarlo para controlar toda la aplicaci\u00f3n.  </li> <li>Sintaxis intuitiva: La curva de aprendizaje de Vue es menos pronunciada que la de otros <code>frameworks</code>. Utiliza HTML y <code>JavaScript</code> extendidos con una sintaxis sencilla, lo que lo hace atractivo tanto para principiantes como para desarrolladores avanzados.  </li> <li>Componentes reutilizables: Al igual que otros <code>frameworks</code> modernos, Vue permite estructurar la aplicaci\u00f3n en componentes independientes que encapsulan su l\u00f3gica, estilos y presentaci\u00f3n.  </li> <li>Enlace bidireccional (Two-Way Data Binding): Vue facilita la sincronizaci\u00f3n de los datos entre el modelo y la vista, lo que simplifica la actualizaci\u00f3n de la interfaz de usuario en tiempo real.  </li> <li>Virtual DOM: Aunque Vue no fue el primero en introducir esta t\u00e9cnica, utiliza un DOM virtual para realizar actualizaciones r\u00e1pidas y eficientes en la interfaz de usuario.  </li> <li>Ecosistema rico: Con herramientas como Vue Router (para gestionar rutas) y Vuex (para la gesti\u00f3n del estado), Vue ofrece una soluci\u00f3n integral para el desarrollo de aplicaciones modernas.</li> </ol>"},{"location":"3%20-%20Frameworks/#por-que-elegir-vuejs","title":"\u00bfPor qu\u00e9 elegir Vue.js?","text":"<ol> <li>Ligereza: Vue es un framework ligero y r\u00e1pido, lo que lo hace ideal para aplicaciones que priorizan el rendimiento.  </li> <li>Comunidad activa: Aunque Vue no es tan masivo como React, su comunidad ha crecido considerablemente, proporcionando soporte, recursos y extensiones.  </li> <li>Flexibilidad: Es adaptable tanto para proyectos peque\u00f1os como para aplicaciones web grandes y complejas.  </li> <li>Documentaci\u00f3n excelente: Vue es conocido por tener una de las documentaciones m\u00e1s claras y completas entre los <code>frameworks</code> de <code>JavaScript</code>.  </li> </ol>"},{"location":"4%20-%20VueJS/","title":"4\ufe0f\u20e3 VueJS","text":"<p>\u00bfQu\u00e9 es Vue.js?</p> <p>Vue.js es un framework progresivo para construir interfaces de usuario y aplicaciones web interactivas. Es especialmente popular por su facilidad de integraci\u00f3n y su enfoque en ser reactivo y componentizado. Esto significa que puedes agregar Vue a una p\u00e1gina web existente sin complicaciones o construir aplicaciones completas usando su poderoso sistema de componentes.</p> <p>\ud83e\uddfa Caracter\u00edsticas clave de Vue.js:</p> <ol> <li>Enlace de datos bidireccional (Two-way data binding):</li> <li> <p>Vue permite que los datos en tu modelo se sincronicen autom\u00e1ticamente con la vista (lo que ves en la interfaz de usuario) y viceversa. Esto se logra a trav\u00e9s de directivas como <code>v-model</code>.</p> </li> <li> <p>Componentes:</p> </li> <li>Vue est\u00e1 basado en un sistema de componentes. Un componente es una pieza reutilizable de la interfaz de usuario que tiene su propia l\u00f3gica y estilo.</li> <li> <p>Los componentes permiten dividir la UI en partes peque\u00f1as y f\u00e1ciles de manejar, lo que mejora la mantenibilidad y la escalabilidad.</p> </li> <li> <p>Directivas:</p> </li> <li> <p>Las directivas son instrucciones especiales en el HTML que agregan comportamiento a los elementos del DOM. Por ejemplo, <code>v-if</code> para condiciones, <code>v-for</code> para bucles, o <code>v-bind</code> para vincular atributos.</p> </li> <li> <p>Reactividad:</p> </li> <li> <p>Vue.js observa las propiedades de los datos y actualiza la interfaz de usuario autom\u00e1ticamente cuando los datos cambian. No necesitas manipular manualmente el DOM cuando los datos cambian.</p> </li> <li> <p>Enrutamiento y manejo de estados:</p> </li> <li>Vue tambi\u00e9n ofrece herramientas como Vue Router para manejar rutas y navegaci\u00f3n, y Vuex para manejar el estado global de la aplicaci\u00f3n en aplicaciones m\u00e1s complejas.</li> </ol>"},{"location":"4%20-%20VueJS/#estructura-basica","title":"\ud83e\udd45 Estructura b\u00e1sica","text":"<p>Todo archivo de VueJS tiene como extensi\u00f3n <code>.vue</code> y su c\u00f3digo b\u00e1sico est\u00e1 dividio en 3 bloques principales:</p> <p>\ud83d\udfe1 <code>script</code> \u00b7 En este bloque ubicaremos toda la l\u00f3gica, hecha con JavaScript, que usaremos en el componente.</p> <p>\ud83d\udfe2 <code>template</code> \u00b7 Este bloque se encarga de formar la estructura HTML de nuestro componente.</p> <p>\ud83d\udd35 <code>style</code> \u00b7 En este \u00faltimo bloque escribiremos el c\u00f3digo CSS de nuestro componente</p> \ud83d\udd30App.vue <pre><code>&lt;script&gt;\n  export default {\n    data() {\n        return {\n          message: \"\u00a1Hola desde Vue.js!\"\n        };\n    }\n  };\n&lt;/script&gt;\n\n&lt;template&gt;\n  &lt;div&gt;\n    &lt;h1&gt;{{ message }}&lt;/h1&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;style scoped&gt;\n    h1 {\n    color: blue;\n    }\n&lt;/style&gt;\n</code></pre>"},{"location":"4%20-%20VueJS/#variables","title":"\ud83d\udd22 Variables","text":"<p>En Vue.js, las variables son utilizadas para almacenar datos que luego puedes mostrar en la interfaz de usuario. Estas variables se definen dentro de la opci\u00f3n <code>data</code> de un componente. Vue hace que estas variables sean reactivas, lo que significa que cuando cambian, la vista (lo que el usuario ve en el navegador) se actualiza autom\u00e1ticamente.</p>"},{"location":"4%20-%20VueJS/#1-definiendo-variables","title":"1. Definiendo Variables","text":"<p>Las variables en Vue se definen dentro de la funci\u00f3n <code>data</code>, que devuelve un objeto con todas las propiedades (o variables) que quieres usar en tu componente. </p> <pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;h1&gt;{{ message }}&lt;/h1&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  data() {\n    return {\n      message: \"\u00a1Hola Mundo!\"  // Definimos una variable llamada 'message'\n    };\n  }\n}\n&lt;/script&gt;\n</code></pre> <p>Explicaci\u00f3n del c\u00f3digo</p> <ul> <li><code>message</code> es una variable definida dentro de <code>data</code>.</li> <li>Esta variable contiene el valor <code>\"\u00a1Hola Mundo!\"</code>.</li> <li>En el bloque <code>&lt;template&gt;</code>, usamos la sintaxis <code>{{ message }}</code> para mostrar el valor de la variable en la interfaz.</li> </ul>"},{"location":"4%20-%20VueJS/#2-usando-las-variables-en-la-plantilla","title":"2. Usando las Variables en la Plantilla","text":"<p>Una vez que defines una variable en <code>data</code>, puedes usarla dentro de la plantilla HTML del componente para mostrarla en la p\u00e1gina. Vue autom\u00e1ticamente actualiza la vista si el valor de la variable cambia.</p> <pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;p&gt;{{ message }}&lt;/p&gt;  &lt;!-- Mostramos el valor de 'message' en el HTML --&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  data() {\n    return {\n      message: \"\u00a1Bienvenidos a Vue.js!\"  // Definimos la variable 'message'\n    };\n  }\n}\n&lt;/script&gt;\n</code></pre> <p>Explicaci\u00f3n del c\u00f3digo</p> <ul> <li>Usamos <code>{{ message }}</code> dentro de la etiqueta <code>&lt;p&gt;</code>. Esto har\u00e1 que el valor de <code>message</code> se muestre en la p\u00e1gina.</li> <li>Si el valor de <code>message</code> cambia, Vue se encarga de actualizar autom\u00e1ticamente la interfaz sin que tengas que hacer nada m\u00e1s.</li> </ul>"},{"location":"4%20-%20VueJS/#3-variables-con-diferentes-tipos-de-datos","title":"3. Variables con Diferentes Tipos de Datos","text":"<p>Las variables en Vue pueden ser de diferentes tipos de datos, como cadenas de texto (strings), n\u00fameros, booleanos (true/false), listas (arrays) y objetos.</p> <pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;p&gt;{{ message }}&lt;/p&gt;\n    &lt;p&gt;{{ count }}&lt;/p&gt;\n    &lt;p&gt;{{ isActive }}&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  data() {\n    return {\n      message: \"\u00a1Hola desde Vue!\",  // Variable de tipo string\n      count: 5,                    // Variable de tipo n\u00famero\n      isActive: true               // Variable de tipo booleano\n    };\n  }\n}\n&lt;/script&gt;\n</code></pre> <p>Explicaci\u00f3n del c\u00f3digo</p> <ul> <li><code>message</code> es una cadena de texto.</li> <li><code>count</code> es un n\u00famero.</li> <li><code>isActive</code> es un valor booleano (<code>true</code> o <code>false</code>).</li> </ul> <p>\ud83d\udd25\ud83d\udd25 Puedes mostrar cualquiera de estas variables en el HTML de la misma manera usando <code>{{ variable }}</code>.</p>"},{"location":"4%20-%20VueJS/#metodos-o-funciones","title":"\ud83d\udcad M\u00e9todos o funciones","text":"<p>En Vue.js, las funciones o m\u00e9todos son una parte esencial del componente para manejar la l\u00f3gica. Puedes definirlas dentro de la opci\u00f3n <code>methods</code> del componente. Estas funciones pueden realizar tareas como procesar eventos, manipular datos, o interactuar con la interfaz del usuario.</p>"},{"location":"4%20-%20VueJS/#definir-y-usar-metodos","title":"Definir y Usar M\u00e9todos","text":"<ol> <li> <p>Definici\u00f3n Los m\u00e9todos se declaran dentro de la propiedad <code>methods</code> de un componente Vue.</p> </li> <li> <p>Uso en la plantilla (template) Puedes llamarlos en la plantilla a trav\u00e9s de directivas como <code>v-on</code>, o utilizarlos dentro de otras expresiones en el template.</p> </li> </ol> <p>Ejemplo B\u00e1sico\"</p> <pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;h1&gt;Hola, {{ nombre }}&lt;/h1&gt;\n    &lt;button @click=\"saludar\"&gt;Saludar&lt;/button&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  data() {\n    return {\n      nombre: \"Mundo\",\n    };\n  },\n  methods: {\n    saludar() {\n      alert(`\u00a1Hola, ${this.nombre}!`);\n    },\n  },\n};\n&lt;/script&gt;\n</code></pre> <p>\ud83d\udc49\ud83c\udffb Explicaci\u00f3n del c\u00f3digo:</p> <ul> <li>La funci\u00f3n <code>saludar</code> se define en <code>methods</code>.</li> <li>Al hacer clic en el bot\u00f3n, se ejecuta gracias a la directiva <code>v-on:click</code> (abreviada como <code>@click</code>).</li> </ul>"},{"location":"4%20-%20VueJS/#metodos-con-argumentos","title":"M\u00e9todos con Argumentos","text":"<p>Los m\u00e9todos pueden aceptar argumentos si los pasas desde la plantilla.</p> <pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;button @click=\"mostrarMensaje('\u00a1Hola!')\"&gt;Mostrar Mensaje&lt;/button&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  methods: {\n    mostrarMensaje(mensaje) {\n      alert(mensaje);\n    },\n  },\n};\n&lt;/script&gt;\n</code></pre> <p>\ud83d\udc49\ud83c\udffb Explicaci\u00f3n: </p> <ul> <li>El m\u00e9todo <code>mostrarMensaje</code> toma un argumento <code>mensaje</code> y lo muestra en una alerta.</li> </ul>"},{"location":"4%20-%20VueJS/#acceso-a-datos-y-otras-propiedades","title":"Acceso a Datos y Otras Propiedades","text":"<p>Los m\u00e9todos pueden acceder a las propiedades definidas en <code>data</code>, <code>computed</code>, o incluso invocar otros m\u00e9todos, utilizando <code>this</code>.</p> <pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;p&gt;Contador: {{ contador }}&lt;/p&gt;\n    &lt;button @click=\"incrementar\"&gt;Incrementar&lt;/button&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  data() {\n    return {\n      contador: 0,\n    };\n  },\n  methods: {\n    incrementar() {\n      this.contador++;\n    },\n  },\n};\n&lt;/script&gt;\n</code></pre> <p>\ud83d\udc49\ud83c\udffb Explicaci\u00f3n: </p> <ul> <li><code>this.contador</code> accede a la propiedad <code>contador</code> definida en <code>data</code> y la incrementa.</li> </ul>"},{"location":"4%20-%20VueJS/#metodos-en-expresiones-del-template","title":"M\u00e9todos en Expresiones del Template","text":"<p>Los m\u00e9todos tambi\u00e9n se pueden usar directamente dentro de las expresiones en el template, pero esto no es una pr\u00e1ctica recomendada porque puede afectar al rendimiento.</p> <pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;p&gt;{{ obtenerMensaje() }}&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  methods: {\n    obtenerMensaje() {\n      return \"Hola desde un m\u00e9todo\";\n    },\n  },\n};\n&lt;/script&gt;\n</code></pre>"},{"location":"4%20-%20VueJS/#usar-metodos-en-eventos-de-formularios","title":"Usar M\u00e9todos en Eventos de Formularios","text":"<p>Los m\u00e9todos son \u00fatiles para manejar eventos como <code>submit</code> en formularios.</p> <pre><code>&lt;template&gt;\n  &lt;form @submit.prevent=\"procesarFormulario\"&gt;\n    &lt;input v-model=\"nombre\" placeholder=\"Escribe tu nombre\" /&gt;\n    &lt;button type=\"submit\"&gt;Enviar&lt;/button&gt;\n  &lt;/form&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  data() {\n    return {\n      nombre: \"\",\n    };\n  },\n  methods: {\n    procesarFormulario() {\n      alert(`Formulario enviado por: ${this.nombre}`);\n    },\n  },\n};\n&lt;/script&gt;\n</code></pre> <p>\ud83d\udc49\ud83c\udffb Explicaci\u00f3n: </p> <ul> <li><code>@submit.prevent</code> evita que el formulario recargue la p\u00e1gina.</li> <li>El m\u00e9todo <code>procesarFormulario</code> muestra un mensaje con el valor de <code>nombre</code>.</li> </ul>"},{"location":"4%20-%20VueJS/#llamar-metodos-desde-otros-metodos","title":"Llamar M\u00e9todos Desde Otros M\u00e9todos","text":"<p>Puedes llamar un m\u00e9todo dentro de otro m\u00e9todo, ideal para evitar repetir c\u00f3digo.</p> <pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;button @click=\"manejarEvento\"&gt;Haz clic&lt;/button&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  methods: {\n    manejarEvento() {\n      this.saludar();\n    },\n    saludar() {\n      alert(\"Hola desde otro m\u00e9todo\");\n    },\n  },\n};\n&lt;/script&gt;\n</code></pre> <p>\ud83d\udc49\ud83c\udffb Explicaci\u00f3n: - <code>manejarEvento</code> llama al m\u00e9todo <code>saludar</code> usando <code>this</code>.</p> <p>Cuando Usar M\u00e9todos</p> <ol> <li>Para manejar eventos: Responder a clics, entradas de texto, env\u00edos de formularios, etc.</li> <li>Para procesar datos: Realizar c\u00e1lculos o manipulaciones antes de mostrarlos en la interfaz.</li> <li>Para organizar l\u00f3gica: Separar tareas en funciones m\u00e1s peque\u00f1as para mayor claridad.</li> </ol> <p>Buenas Pr\u00e1cticas</p> <ol> <li>Evita l\u00f3gica compleja en el template: Usa m\u00e9todos para encapsular la l\u00f3gica.</li> <li>Nombres descriptivos: Dale nombres que expliquen lo que hacen, como <code>calcularTotal</code> o <code>validarFormulario</code>.</li> <li>Reutilizaci\u00f3n: Divide las funciones en m\u00e9todos reutilizables siempre que sea posible.</li> </ol>"},{"location":"4%20-%20VueJS/#directivas","title":"\ud83c\udf00 Directivas","text":"<p>En Vue.js, las directivas son atributos especiales que se agregan a los elementos HTML para manipular el DOM (Document Object Model) de manera reactiva. Estas directivas son precedidas por el prefijo <code>v-</code>, lo que las distingue de los atributos normales.</p> <p>A continuaci\u00f3n, se mencionan algunas de las directivas m\u00e1s comunes en Vue.js:</p> <p>v-bind</p> <p><code>v-bind</code> se utiliza para enlazar un atributo o una propiedad de un componente con una variable o expresi\u00f3n en el componente. Esto permite modificar din\u00e1micamente los atributos HTML de un elemento.</p> <pre><code>&lt;img v-bind:src=\"imageSource\" /&gt;\n</code></pre> <p>v-model</p> <p><code>v-model</code> se usa para crear un enlace bidireccional entre un campo de entrada y una variable. Esto es \u00fatil para formularios y otros elementos interactivos.</p> <pre><code>&lt;input v-model=\"message\" /&gt;\n</code></pre> <p>v-for</p> <p><code>v-for</code> se utiliza para renderizar una lista de elementos basados en una colecci\u00f3n, como un array u objeto. Es muy \u00fatil para crear elementos din\u00e1micos.</p> <pre><code>&lt;ul&gt;\n    &lt;li v-for=\"item in items\" :key=\"item.id\"&gt;{{ item.name }}&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre> <p>v-if</p> <p><code>v-if</code> renderiza condicionalmente un bloque de c\u00f3digo solo si la expresi\u00f3n es verdadera. Es \u00fatil para mostrar u ocultar elementos basados en ciertas condiciones.</p> <pre><code>&lt;p v-if=\"isVisible\"&gt;Este mensaje se muestra si esVisible es verdadero&lt;/p&gt;\n</code></pre> <p>v-else</p> <p><code>v-else</code> se usa junto con <code>v-if</code> para renderizar un bloque cuando la expresi\u00f3n de <code>v-if</code> es falsa. Es \u00fatil para crear bloques alternativos.</p> <pre><code>&lt;p v-if=\"isVisible\"&gt;Este mensaje es visible&lt;/p&gt;\n&lt;p v-else&gt;Este mensaje aparece cuando isVisible es falso&lt;/p&gt;\n</code></pre> <p>v-show</p> <p><code>v-show</code> es similar a <code>v-if</code>, pero en lugar de agregar o eliminar el elemento del DOM, solo cambia su visibilidad (usando <code>display: none</code>).</p> <pre><code>&lt;p v-show=\"isVisible\"&gt;Este mensaje se muestra si isVisible es verdadero&lt;/p&gt;\n</code></pre> <p>v-on</p> <p><code>v-on</code> se utiliza para escuchar eventos DOM y ejecutar m\u00e9todos cuando esos eventos son disparados. Permite manejar interacciones del usuario.</p> <pre><code>&lt;button v-on:click=\"submitForm\"&gt;Enviar&lt;/button&gt;\n</code></pre> <p>v-slot</p> <p><code>v-slot</code> permite pasar contenido a los componentes hijo a trav\u00e9s de slots. Facilita la creaci\u00f3n de componentes reutilizables con contenido din\u00e1mico.</p> <pre><code>&lt;my-component v-slot:header&gt;\n    &lt;h1&gt;Contenido de encabezado&lt;/h1&gt;\n&lt;/my-component&gt;\n</code></pre> <p>v-cloak</p> <p><code>v-cloak</code> es utilizado para ocultar un elemento y su contenido hasta que Vue haya terminado de compilar el componente. Es \u00fatil para evitar ver el contenido sin procesar durante la carga.</p> <pre><code>&lt;div v-cloak&gt;\n    &lt;p&gt;{{ message }}&lt;/p&gt;\n&lt;/div&gt;\n</code></pre> <p>v-pre</p> <p><code>v-pre</code> evita que Vue compile el contenido de un elemento y sus descendientes. Esto es \u00fatil cuando sabes que no necesitas que Vue procese un bloque espec\u00edfico de contenido.</p> <pre><code>&lt;div v-pre&gt;\n    {{ rawContent }}\n&lt;/div&gt;\n</code></pre> <p>v-text</p> <p><code>v-text</code> se utiliza para actualizar el contenido de texto de un elemento, reemplazando cualquier texto dentro de \u00e9l. Es \u00fatil para manipular solo el texto.</p> <pre><code>&lt;p v-text=\"message\"&gt;&lt;/p&gt;\n</code></pre> <p>v-html</p> <p><code>v-html</code> permite inyectar contenido HTML en el DOM. Esto puede ser \u00fatil, pero ten cuidado con el contenido no confiable para evitar vulnerabilidades de seguridad (como XSS).</p> <pre><code>&lt;div v-html=\"rawHtml\"&gt;&lt;/div&gt;\n</code></pre> <p>Estas directivas permiten interactuar con el DOM y manejar datos de manera eficiente en las aplicaciones Vue.js, proporcionando funcionalidades clave como enlace de datos, control de flujo y manejo de eventos.</p>"},{"location":"4%20-%20VueJS/#v-bind","title":"\u2699 v-bind","text":"<p>La directiva <code>v-bind</code> se utiliza en Vue.js para enlazar din\u00e1micamente atributos o propiedades de un elemento HTML a una expresi\u00f3n de Vue (generalmente una variable o propiedad del componente). De esta manera, puedes modificar el valor de un atributo de forma reactiva, lo que significa que si la variable asociada cambia, el atributo en el DOM tambi\u00e9n se actualizar\u00e1 autom\u00e1ticamente.</p> Sintaxis b\u00e1sica <pre><code>&lt;v-bind:atributo=\"expresi\u00f3n\"&gt;\n</code></pre> <p>Donde...</p> <ul> <li><code>atributo</code> es el nombre del atributo HTML al que quieres enlazar un valor.</li> <li><code>expresi\u00f3n</code> es la variable o expresi\u00f3n de Vue que contiene el valor que se asignar\u00e1 al atributo.</li> </ul> <p>\ud83d\udca2 Ejemplo de uso</p> <p>Imagina que tienes una propiedad <code>imageSource</code> en tu componente Vue y deseas que el atributo <code>src</code> de una etiqueta <code>&lt;img&gt;</code> se actualice autom\u00e1ticamente cuando el valor de <code>imageSource</code> cambie.</p> Usando v-bind <pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;!-- v-bind enlaza el atributo src con la propiedad imageSource --&gt;\n    &lt;img v-bind:src=\"imageSource\" /&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  data() {\n    return {\n      imageSource: 'https://example.com/imagen.jpg'\n    };\n  }\n};\n&lt;/script&gt;\n</code></pre> <p>En este ejemplo... \ud83d\udc46</p> <ul> <li><code>v-bind:src=\"imageSource\"</code> enlaza el atributo <code>src</code> de la etiqueta <code>&lt;img&gt;</code> con la propiedad <code>imageSource</code> de Vue. </li> <li>Si en alg\u00fan momento <code>imageSource</code> cambia (por ejemplo, si se actualiza mediante una funci\u00f3n o evento), el valor de <code>src</code> en el DOM tambi\u00e9n cambiar\u00e1 autom\u00e1ticamente.</li> </ul> <p>\u2652 Uso de <code>v-bind</code> con m\u00faltiples atributos</p> <p>Puedes usar <code>v-bind</code> para enlazar m\u00faltiples atributos a la vez, usando un objeto de JavaScript. Esto es \u00fatil cuando deseas enlazar varios atributos de un elemento din\u00e1micamente.</p> Multiples atributos <pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;!-- Usando un objeto para enlazar varios atributos --&gt;\n    &lt;button v-bind=\"buttonAttributes\"&gt;Haz clic aqu\u00ed&lt;/button&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  data() {\n    return {\n      buttonAttributes: {\n        type: 'button',\n        class: 'btn btn-primary',\n        disabled: false\n      }\n    };\n  }\n};\n&lt;/script&gt;\n</code></pre> <p>En este caso</p> <p><code>v-bind=\"buttonAttributes\"</code> pasa todos los atributos definidos en el objeto <code>buttonAttributes</code> al bot\u00f3n, de manera que el bot\u00f3n tendr\u00e1 el <code>type</code>, <code>class</code> y <code>disabled</code> que est\u00e1n definidos en el objeto.</p>"},{"location":"4%20-%20VueJS/#v-model","title":"\u2699 v-model","text":"<p>La directiva <code>v-model</code> en Vue.js se utiliza para crear un enlace bidireccional entre una entrada de datos (como un campo de texto, casillas de verificaci\u00f3n, selectores, etc.) y una propiedad en el modelo de Vue. Esto significa que cualquier cambio en la entrada de datos actualiza autom\u00e1ticamente el modelo de Vue, y cualquier cambio en el modelo de Vue actualiza autom\u00e1ticamente la entrada de datos.</p> <p>\ud83d\udd04 \u00bfQu\u00e9 es el enlace bidireccional?</p> <p>Un enlace bidireccional significa que el valor de la propiedad de Vue y el valor del campo de entrada est\u00e1n sincronizados en todo momento. Si el valor de la propiedad cambia, el campo de entrada se actualiza, y si el valor del campo de entrada cambia (por ejemplo, el usuario escribe algo), la propiedad de Vue tambi\u00e9n se actualiza.</p> Sintaxis b\u00e1sica <pre><code>&lt;input v-model=\"variable\"&gt;\n</code></pre> <p>Donde</p> <p><code>variable</code> es la propiedad o variable de Vue que est\u00e1 vinculada al campo de entrada.</p> <p>\ud83d\udca2 Ejemplo de uso</p> <p>Imagina que quieres crear un campo de texto en el que el usuario pueda escribir algo, y que al mismo tiempo, el valor escrito se refleje autom\u00e1ticamente en la propiedad <code>message</code> de Vue.</p> <pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;!-- El valor del input est\u00e1 vinculado a la propiedad message --&gt;\n    &lt;input v-model=\"message\" placeholder=\"Escribe algo...\"&gt;\n    &lt;p&gt;El mensaje es: {{ message }}&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  data() {\n    return {\n      message: ''\n    };\n  }\n};\n&lt;/script&gt;\n</code></pre> <p>En este ejemplo</p> <ul> <li><code>v-model=\"message\"</code> vincula el valor del campo de texto con la propiedad <code>message</code> en el modelo de Vue.</li> <li>Si el usuario escribe algo en el campo de texto, el valor de <code>message</code> se actualiza en tiempo real, y viceversa: si cambias la propiedad <code>message</code> desde el c\u00f3digo, el campo de texto tambi\u00e9n se actualizar\u00e1 autom\u00e1ticamente.</li> </ul> <p>\ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc66 <code>v-model</code> en diferentes tipos de elementos</p> <p>Aunque en el ejemplo anterior hemos visto el uso de <code>v-model</code> en un campo de texto, tambi\u00e9n se puede usar con otros tipos de elementos HTML interactivos, como:</p> <ol> <li>Casillas de verificaci\u00f3n (<code>checkbox</code>)</li> </ol> <p>Para un checkbox, <code>v-model</code> se enlaza con un valor booleano (verdadero o falso).</p> <pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;input type=\"checkbox\" v-model=\"isChecked\"&gt;\n    &lt;p&gt;\u00bfEst\u00e1 marcado? {{ isChecked ? 'S\u00ed' : 'No' }}&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  data() {\n    return {\n      isChecked: false\n    };\n  }\n};\n&lt;/script&gt;\n</code></pre> <ol> <li>Botones de opci\u00f3n (<code>radio</code>)</li> </ol> <p>Para un grupo de botones de opci\u00f3n, <code>v-model</code> se enlaza con una variable cuyo valor corresponde al valor del bot\u00f3n seleccionado.</p> <pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;input type=\"radio\" id=\"option1\" value=\"Opci\u00f3n 1\" v-model=\"selectedOption\"&gt;\n    &lt;label for=\"option1\"&gt;Opci\u00f3n 1&lt;/label&gt;\n\n    &lt;input type=\"radio\" id=\"option2\" value=\"Opci\u00f3n 2\" v-model=\"selectedOption\"&gt;\n    &lt;label for=\"option2\"&gt;Opci\u00f3n 2&lt;/label&gt;\n\n    &lt;p&gt;Opci\u00f3n seleccionada: {{ selectedOption }}&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  data() {\n    return {\n      selectedOption: 'Opci\u00f3n 1'\n    };\n  }\n};\n&lt;/script&gt;\n</code></pre> <ol> <li>Elementos <code>select</code> (listas desplegables)</li> </ol> <p>Para un <code>select</code>, <code>v-model</code> se puede usar para obtener el valor de la opci\u00f3n seleccionada.</p> <pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;select v-model=\"selectedValue\"&gt;\n      &lt;option disabled value=\"\"&gt;Seleccione una opci\u00f3n&lt;/option&gt;\n      &lt;option value=\"1\"&gt;Opci\u00f3n 1&lt;/option&gt;\n      &lt;option value=\"2\"&gt;Opci\u00f3n 2&lt;/option&gt;\n      &lt;option value=\"3\"&gt;Opci\u00f3n 3&lt;/option&gt;\n    &lt;/select&gt;\n    &lt;p&gt;Opci\u00f3n seleccionada: {{ selectedValue }}&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  data() {\n    return {\n      selectedValue: ''\n    };\n  }\n};\n&lt;/script&gt;\n</code></pre> <p>\ud83d\udca6 Modificadores de <code>v-model</code></p> <p><code>v-model</code> puede utilizar ciertos modificadores para ajustar su comportamiento. Los m\u00e1s comunes son:</p> <p>1\ufe0f\u20e3 <code>.lazy</code>: Solo actualiza la propiedad cuando el campo de texto pierde el foco (en lugar de actualizarla en cada pulsaci\u00f3n de tecla).</p> <pre><code>&lt;input v-model.lazy=\"message\"&gt;\n</code></pre> <p>2\ufe0f\u20e3 <code>.number</code>: Convierte el valor de entrada en un n\u00famero cuando se asigna a la propiedad.</p> <pre><code>&lt;input v-model.number=\"age\" type=\"number\"&gt;\n</code></pre> <p>3\ufe0f\u20e3 <code>.trim</code>: Elimina los espacios en blanco al principio y al final del valor.</p> <pre><code>&lt;input v-model.trim=\"message\"&gt;\n</code></pre> <p>Resumen</p> <ul> <li><code>v-model</code> crea un enlace bidireccional entre un campo de entrada y una propiedad en el modelo de Vue.</li> <li>Puedes usarlo con elementos como <code>&lt;input&gt;</code>, <code>&lt;checkbox&gt;</code>, <code>&lt;select&gt;</code>, y otros campos interactivos.</li> <li>Al cambiar el valor en el campo de entrada, la propiedad vinculada se actualiza autom\u00e1ticamente y viceversa.</li> <li>Existen modificadores como <code>.lazy</code>, <code>.number</code>, y <code>.trim</code> para ajustar el comportamiento de <code>v-model</code>.</li> </ul> <p>Es una de las directivas m\u00e1s utilizadas para formularios y entradas de usuario, ya que facilita la reactividad y la sincronizaci\u00f3n autom\u00e1tica de los datos en la interfaz.</p>"},{"location":"4%20-%20VueJS/#v-if-v-else","title":"\u2699 v-if \u00b7\u00b7\u00b7 v-else","text":"<p>Las directivas <code>v-if</code> y <code>v-else</code> en Vue.js se utilizan para renderizar condicionalmente un bloque de c\u00f3digo HTML en funci\u00f3n del valor de una expresi\u00f3n booleana. Son muy \u00fatiles cuando quieres mostrar u ocultar partes de tu interfaz de usuario en funci\u00f3n de ciertas condiciones.</p> <p>\ud83d\udcab Sintaxis b\u00e1sica</p> <pre><code>&lt;div v-if=\"condici\u00f3n\"&gt;Contenido visible si la condici\u00f3n es verdadera&lt;/div&gt;\n&lt;div v-else&gt;Contenido visible si la condici\u00f3n es falsa&lt;/div&gt;\n</code></pre> <p>Donde...\"</p> <ul> <li><code>condici\u00f3n</code> es una expresi\u00f3n que eval\u00faa a <code>true</code> o <code>false</code>.</li> <li>Si la condici\u00f3n es <code>true</code>, el bloque asociado a <code>v-if</code> se renderiza. Si es <code>false</code>, el bloque asociado a <code>v-else</code> se renderiza.</li> </ul> <p>\ud83d\udca2 Ejemplo de uso</p> <p>Imagina que quieres mostrar un mensaje que cambie dependiendo de si el usuario ha iniciado sesi\u00f3n o no. Usar\u00edas <code>v-if</code> y <code>v-else</code> para manejar estas condiciones.</p> <pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;p v-if=\"isLoggedIn\"&gt;\u00a1Bienvenido de nuevo!&lt;/p&gt;\n    &lt;p v-else&gt;Por favor, inicia sesi\u00f3n.&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  data() {\n    return {\n      isLoggedIn: false // Cambia a true para probar\n    };\n  }\n};\n&lt;/script&gt;\n</code></pre> <p>En este ejemplo</p> <ul> <li>Si <code>isLoggedIn</code> es <code>true</code>, se mostrar\u00e1 el mensaje \"\u00a1Bienvenido de nuevo!\".</li> <li>Si <code>isLoggedIn</code> es <code>false</code>, se mostrar\u00e1 el mensaje \"Por favor, inicia sesi\u00f3n\".</li> </ul> <p>\ud83e\udd28 \u00bfC\u00f3mo funcionan <code>v-if</code> y <code>v-else</code>?</p> <ul> <li><code>v-if</code>: Renderiza el bloque solo si la expresi\u00f3n evaluada es <code>true</code>.</li> <li><code>v-else</code>: Renderiza el bloque solo si la expresi\u00f3n de <code>v-if</code> es <code>false</code>. Es importante que el bloque de <code>v-else</code> siempre est\u00e9 justo despu\u00e9s de un bloque <code>v-if</code> o <code>v-else-if</code>.</li> </ul> <p>Puedes combinar <code>v-if</code>, <code>v-else-if</code>, y <code>v-else</code> para manejar m\u00faltiples condiciones de forma m\u00e1s estructurada.</p> <pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;p v-if=\"status === 'loading'\"&gt;Cargando...&lt;/p&gt;\n    &lt;p v-else-if=\"status === 'error'\"&gt;Hubo un error&lt;/p&gt;\n    &lt;p v-else&gt;Contenido cargado correctamente&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  data() {\n    return {\n      status: 'loading' // Cambia el valor para probar\n    };\n  }\n};\n&lt;/script&gt;\n</code></pre> <p>En este caso</p> <ul> <li>Si <code>status</code> es <code>'loading'</code>, se muestra \"Cargando...\".</li> <li>Si <code>status</code> es <code>'error'</code>, se muestra \"Hubo un error\".</li> <li>Si <code>status</code> tiene cualquier otro valor, se muestra \"Contenido cargado correctamente\".</li> </ul> <p>\ud83d\udc40 Consideraciones de rendimiento</p> <ul> <li><code>v-if</code>: Es m\u00e1s costoso en t\u00e9rminos de rendimiento si la condici\u00f3n cambia frecuentemente, ya que implica montar y desmontar el DOM cada vez que la condici\u00f3n cambia.</li> <li><code>v-show</code>: Si solo necesitas ocultar y mostrar un elemento sin eliminarlo del DOM, puedes usar <code>v-show</code>, que solo cambia la propiedad <code>display</code> en CSS en lugar de montar/desmontar el elemento, siendo m\u00e1s eficiente en esos casos.</li> </ul>"},{"location":"4%20-%20VueJS/#v-for","title":"\u2699 v-for","text":"<p>La directiva <code>v-for</code> en Vue.js se utiliza para renderizar listas o elementos repetitivos basados en una colecci\u00f3n de datos. Es una herramienta muy poderosa que permite iterar sobre arrays, objetos o rangos y renderizar din\u00e1micamente elementos en la interfaz.</p> <pre><code>&lt;elemento v-for=\"(elemento, \u00edndice) in colecci\u00f3n\" :key=\"valor\u00danico\"&gt;\n  &lt;!-- contenido --&gt;\n&lt;/elemento&gt;\n</code></pre> <ol> <li><code>elemento</code>: Representa el valor actual de la iteraci\u00f3n (el elemento del array, valor de la propiedad, etc.).</li> <li><code>\u00edndice</code> (opcional): Representa la posici\u00f3n actual dentro de la colecci\u00f3n.</li> <li><code>colecci\u00f3n</code>: Puede ser un array, un objeto o un rango de n\u00fameros.</li> <li><code>:key</code>: Es un atributo especial para mejorar el rendimiento, ya que ayuda a Vue a rastrear los elementos \u00fanicos en la lista.</li> </ol> <p>\ud83d\udcda Ejemplo 1: Iterar sobre un Array</p> <p><pre><code>&lt;ul&gt;\n  &lt;li v-for=\"(nombre, index) in nombres\" :key=\"index\"&gt;\n    {{ index + 1 }}. {{ nombre }}\n  &lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;script&gt;\nexport default {\n  data() {\n    return {\n      nombres: [\"Juan\", \"Mar\u00eda\", \"Carlos\", \"Ana\"]\n    };\n  }\n};\n&lt;/script&gt;\n</code></pre> Resultado Renderizado: <pre><code>1. Juan\n2. Mar\u00eda\n3. Carlos\n4. Ana\n</code></pre></p> <p>\ud83d\uddfc Ejemplo 2: Iterar sobre un Objeto</p> <p>Cuando iteras sobre un objeto, puedes acceder tanto a las claves como a los valores.</p> <pre><code>&lt;ul&gt;\n  &lt;li v-for=\"(valor, clave) in usuario\" :key=\"clave\"&gt;\n    {{ clave }}: {{ valor }}\n  &lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;script&gt;\nexport default {\n  data() {\n    return {\n      usuario: {\n        nombre: \"Juan\",\n        edad: 30,\n        ciudad: \"Madrid\"\n      }\n    };\n  }\n};\n&lt;/script&gt;\n</code></pre> <p>Resultado Renderizado: <pre><code>nombre: Juan  \nedad: 30  \nciudad: Madrid\n</code></pre></p> <p>\ud83d\udd22 Ejemplo 3: Iterar sobre un Rango de N\u00fameros</p> <p>Puedes generar un rango de n\u00fameros directamente con la directiva <code>v-for</code>.</p> <pre><code>&lt;ul&gt;\n  &lt;li v-for=\"numero in 5\" :key=\"numero\"&gt;\n    N\u00famero {{ numero }}\n  &lt;/li&gt;\n&lt;/ul&gt;\n</code></pre> <p>Resultado Renderizado: <pre><code>N\u00famero 1  \nN\u00famero 2  \nN\u00famero 3  \nN\u00famero 4  \nN\u00famero 5\n</code></pre></p> <p>\u26d3\ufe0f Ejemplo 4: Renderizado Anidado</p> <p>La directiva <code>v-for</code> tambi\u00e9n se puede anidar para iterar sobre listas dentro de listas.</p> <pre><code>&lt;div v-for=\"(categoria, index) in categorias\" :key=\"index\"&gt;\n  &lt;h3&gt;{{ categoria.nombre }}&lt;/h3&gt;\n  &lt;ul&gt;\n    &lt;li v-for=\"(producto, i) in categoria.productos\" :key=\"i\"&gt;\n      {{ producto }}\n    &lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/div&gt;\n\n&lt;script&gt;\nexport default {\n  data() {\n    return {\n      categorias: [\n        {\n          nombre: \"Frutas\",\n          productos: [\"Manzana\", \"Pera\", \"Pl\u00e1tano\"]\n        },\n        {\n          nombre: \"Verduras\",\n          productos: [\"Lechuga\", \"Zanahoria\", \"Espinaca\"]\n        }\n      ]\n    };\n  }\n};\n&lt;/script&gt;\n</code></pre> <p>Resultado Renderizado: <pre><code>Frutas\n- Manzana\n- Pera\n- Pl\u00e1tano\n\nVerduras\n- Lechuga\n- Zanahoria\n- Espinaca\n</code></pre></p> <p>Consejos Importantes</p> <ol> <li> <p><code>key</code> es esencial para el rendimiento:    Vue utiliza <code>:key</code> para identificar de manera \u00fanica cada elemento en la lista. Si no se usa, puede haber problemas de rendimiento o errores al actualizar listas din\u00e1micamente.</p> </li> <li> <p>Evitar iterar sin l\u00edmite:    Si tienes listas muy largas o iteraciones anidadas, puede afectar el rendimiento. Intenta usar paginaci\u00f3n u otras t\u00e9cnicas para manejar grandes conjuntos de datos.</p> </li> <li> <p>Usar <code>v-for</code> con <code>v-if</code>:    Si necesitas condicionar el renderizado dentro de un <code>v-for</code>, evita combinarlos en el mismo elemento. En lugar de eso, anida el <code>v-if</code> dentro del hijo:</p> </li> </ol> <pre><code>&lt;ul&gt;\n  &lt;li v-for=\"tarea in tareas\" :key=\"tarea.id\"&gt;\n    &lt;p v-if=\"tarea.completada\"&gt;{{ tarea.nombre }}&lt;/p&gt;\n  &lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>"},{"location":"4%20-%20VueJS/#v-show","title":"\u2699 v-show","text":"<p>La directiva <code>v-show</code> se utiliza para mostrar u ocultar elementos HTML bas\u00e1ndose en una condici\u00f3n booleana. A diferencia de <code>v-if</code>, <code>v-show</code> no elimina el elemento del DOM cuando la condici\u00f3n no se cumple; simplemente controla la propiedad CSS <code>display</code>.</p> <p>C\u00f3mo funciona <code>v-show</code></p> <ul> <li>Si la condici\u00f3n es <code>true</code>, el elemento ser\u00e1 visible.</li> <li>Si la condici\u00f3n es <code>false</code>, el elemento estar\u00e1 oculto (<code>display: none</code>).</li> </ul> <p>\ud83d\udd21 Sintaxis <pre><code>&lt;elemento v-show=\"condici\u00f3n\"&gt;\n  &lt;!-- Contenido --&gt;\n&lt;/elemento&gt;\n</code></pre></p> <p>\ud83d\udd0d Ejemplo 1: Mostrar/Ocultar un Mensaje <pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;button @click=\"mostrar = !mostrar\"&gt;\n      {{ mostrar ? \"Ocultar Mensaje\" : \"Mostrar Mensaje\" }}\n    &lt;/button&gt;\n    &lt;p v-show=\"mostrar\"&gt;\u00a1Hola! Este es un mensaje visible.&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  data() {\n    return {\n      mostrar: true,\n    };\n  },\n};\n&lt;/script&gt;\n</code></pre></p> <p>\ud83d\udc49\ud83c\udffb Explicaci\u00f3n:</p> <ul> <li>Al hacer clic en el bot\u00f3n, la variable <code>mostrar</code> cambia entre <code>true</code> y <code>false</code>.</li> <li>Si <code>mostrar</code> es <code>true</code>, el p\u00e1rrafo ser\u00e1 visible; si es <code>false</code>, estar\u00e1 oculto.</li> </ul> <p>\u274c Diferencia entre <code>v-show</code> y <code>v-if</code></p> Caracter\u00edstica v-show v-if Renderizado inicial Siempre renderiza el elemento (aunque est\u00e9 oculto). Renderiza solo si la condici\u00f3n es <code>true</code>. Rendimiento Mejor para cambios frecuentes, ya que usa CSS. Mejor si el elemento se muestra/oculta pocas veces. Efecto en el DOM Aplica <code>display: none</code>. A\u00f1ade o elimina el elemento del DOM. <p>\ud83e\udd77\ud83c\udffb Ejemplo 2: Ocultar un Elemento con <code>v-show</code></p> <pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;h1 v-show=\"mostrarTitulo\"&gt;Este t\u00edtulo se puede ocultar.&lt;/h1&gt;\n    &lt;button @click=\"mostrarTitulo = !mostrarTitulo\"&gt;\n      {{ mostrarTitulo ? \"Ocultar\" : \"Mostrar\" }} T\u00edtulo\n    &lt;/button&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  data() {\n    return {\n      mostrarTitulo: true,\n    };\n  },\n};\n&lt;/script&gt;\n</code></pre> <p>\ud83d\udc49\ud83c\udffb Explicaci\u00f3n:</p> <ul> <li>El t\u00edtulo <code>&lt;h1&gt;</code> ser\u00e1 visible solo cuando <code>mostrarTitulo</code> sea <code>true</code>. Cambiar esta variable con el bot\u00f3n actualiza el CSS del t\u00edtulo (<code>display: none</code>).</li> </ul>"},{"location":"4%20-%20VueJS/#v-on","title":"\u2699 v-on","text":"<p>La directiva <code>v-on</code> se utiliza para escuchar eventos del DOM y ejecutar m\u00e9todos o expresiones cuando ocurren. Es una herramienta esencial en Vue.js para manejar interactividad, como responder a clics de botones, movimientos del mouse, teclas del teclado, entre otros eventos.</p> <p>\ud83d\udd21 Sintaxis B\u00e1sica</p> <pre><code>&lt;elemento v-on:evento=\"manejador\"&gt;&lt;/elemento&gt;\n</code></pre> <ul> <li><code>evento</code>: El evento DOM que deseas escuchar, como <code>click</code>, <code>input</code>, <code>submit</code>, etc.</li> <li><code>manejador</code>: El m\u00e9todo o expresi\u00f3n que se ejecutar\u00e1 cuando ocurra el evento.</li> </ul> <p>\ud83d\udc4b\ud83c\udffb Shorthand</p> <p>Vue.js ofrece una versi\u00f3n abreviada de <code>v-on</code>: <pre><code>&lt;elemento @evento=\"manejador\"&gt;&lt;/elemento&gt;\n</code></pre></p> <p>\ud83d\uddb1\ufe0f Ejemplo 1: Responder a un click</p> <pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;button v-on:click=\"saludar\"&gt;Haz clic aqu\u00ed&lt;/button&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  methods: {\n    saludar() {\n      alert(\"\u00a1Hola! Has hecho clic en el bot\u00f3n.\");\n    },\n  },\n};\n&lt;/script&gt;\n</code></pre> <p>\ud83d\udc49\ud83c\udffb Explicaci\u00f3n: </p> <ul> <li>El bot\u00f3n escucha el evento <code>click</code>.</li> <li>Cuando se hace clic, se llama al m\u00e9todo <code>saludar</code>, que muestra una alerta.</li> </ul> <p>\ud83d\uddc3\ufe0f Paso de Argumentos</p> <p>Puedes pasar argumentos a los m\u00e9todos utilizando par\u00e9ntesis:</p> <pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;button @click=\"mostrarMensaje('Hola Mundo')\"&gt;Mostrar Mensaje&lt;/button&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  methods: {\n    mostrarMensaje(mensaje) {\n      alert(mensaje);\n    },\n  },\n};\n&lt;/script&gt;\n</code></pre> <p>\ud83d\udc49\ud83c\udffb Explicaci\u00f3n:</p> <ul> <li>Al hacer clic, el bot\u00f3n pasa la cadena <code>\"Hola Mundo\"</code> como argumento al m\u00e9todo <code>mostrarMensaje</code>.</li> </ul> <p>\ud83e\udee7 Eventos con Modificadores</p> <p>Los modificadores son sufijos de la directiva que alteran su comportamiento.</p> <ol> <li> <p><code>stop</code>: Detiene la propagaci\u00f3n del evento.    <pre><code>&lt;button @click.stop=\"detenerPropagacion\"&gt;Haz clic&lt;/button&gt;\n</code></pre></p> </li> <li> <p><code>prevent</code>: Previene el comportamiento predeterminado del evento.    <pre><code>&lt;form @submit.prevent=\"enviarFormulario\"&gt;...&lt;/form&gt;\n</code></pre></p> </li> <li> <p><code>once</code>: Escucha el evento una sola vez.    <pre><code>&lt;button @click.once=\"saludarUnaVez\"&gt;Haz clic&lt;/button&gt;\n</code></pre></p> </li> <li> <p><code>capture</code>: Usa el modo de captura de eventos.    <pre><code>&lt;div @click.capture=\"manejarClick\"&gt;...&lt;/div&gt;\n</code></pre></p> </li> </ol> <p>\ud83c\udf65 Ejemplo 2: Uso de Modificadores</p> <pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;form @submit.prevent=\"procesarFormulario\"&gt;\n      &lt;input type=\"text\" v-model=\"nombre\" placeholder=\"Escribe tu nombre\" /&gt;\n      &lt;button type=\"submit\"&gt;Enviar&lt;/button&gt;\n    &lt;/form&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  data() {\n    return {\n      nombre: \"\",\n    };\n  },\n  methods: {\n    procesarFormulario() {\n      alert(`Formulario enviado por: ${this.nombre}`);\n    },\n  },\n};\n&lt;/script&gt;\n</code></pre> <p>Explicaci\u00f3n: - <code>@submit.prevent</code> evita que la p\u00e1gina se recargue al enviar el formulario.</p> <p>\ud83c\udf44 Uso de Eventos Nativos y Personalizados</p> <p>Eventos Nativos</p> <p>Puedes escuchar cualquier evento nativo del DOM, como <code>mouseenter</code>, <code>blur</code>, etc. <pre><code>&lt;div @mouseenter=\"mostrarTooltip\"&gt;Pasa el mouse aqu\u00ed&lt;/div&gt;\n</code></pre></p> <p>Eventos Personalizados</p> <p>En componentes personalizados, puedes emitir eventos con <code>$emit</code> y escucharlos con <code>v-on</code>.</p> <p>Componente hijo: <pre><code>this.$emit('mi-evento', datos);\n</code></pre></p> <p>Componente padre: <pre><code>&lt;hijo @mi-evento=\"manejarEvento\"&gt;&lt;/hijo&gt;\n</code></pre></p> <p>\ud83d\udea9 Ejemplo 3: Toggle de Estado</p> <pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;p&gt;Estado: {{ activo ? \"Activo\" : \"Inactivo\" }}&lt;/p&gt;\n    &lt;button @click=\"activo = !activo\"&gt;Cambiar Estado&lt;/button&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  data() {\n    return {\n      activo: false,\n    };\n  },\n};\n&lt;/script&gt;\n</code></pre> <p>\ud83d\udc49\ud83c\udffb Explicaci\u00f3n:</p> <ul> <li>El bot\u00f3n usa un evento <code>click</code> para alternar el valor booleano de <code>activo</code>.</li> <li>Esto cambia din\u00e1micamente el texto mostrado.</li> </ul>"},{"location":"4%20-%20VueJS/#componentes","title":"\ud83d\udce6 Componentes","text":"<p>En Vue.js, un componente es una unidad reutilizable e independiente de interfaz de usuario que encapsula su estructura (HTML), estilo (CSS) y comportamiento (JavaScript). Los componentes permiten dividir la interfaz de usuario en peque\u00f1as piezas manejables y modulares, lo que facilita el desarrollo, la reutilizaci\u00f3n y el mantenimiento del c\u00f3digo.</p> <p>\ud83d\udca2 Por qu\u00e9 usar Componentes</p> <ol> <li>Reutilizaci\u00f3n: Puedes usar un mismo componente en diferentes partes de tu aplicaci\u00f3n, reduciendo la duplicaci\u00f3n de c\u00f3digo.</li> <li>Modularidad: Ayudan a organizar el c\u00f3digo dividi\u00e9ndolo en piezas m\u00e1s peque\u00f1as y manejables.</li> <li>Mantenibilidad: Los cambios en un componente afectan solo a ese componente y no al resto de la aplicaci\u00f3n.</li> <li>Escalabilidad: Facilitan el desarrollo de aplicaciones m\u00e1s grandes y complejas.</li> </ol> <p>\ud83d\udca1 Estructura de un Componente en Vue.js</p> <p>Un componente consta de:</p> <ol> <li>Template: Define el HTML del componente.</li> <li>Script: Contiene la l\u00f3gica del componente (datos, m\u00e9todos, etc.).</li> <li>Style: Define el CSS espec\u00edfico del componente.</li> </ol> <pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;h1&gt;{{ titulo }}&lt;/h1&gt;\n    &lt;p&gt;{{ descripcion }}&lt;/p&gt;\n    &lt;button @click=\"saludar\"&gt;Haz clic aqu\u00ed&lt;/button&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  name: \"MiComponente\",\n  data() {\n    return {\n      titulo: \"Hola, soy un componente\",\n      descripcion: \"Este es un ejemplo b\u00e1sico de un componente en Vue.\",\n    };\n  },\n  methods: {\n    saludar() {\n      alert(\"\u00a1Hola desde el componente!\");\n    },\n  },\n};\n&lt;/script&gt;\n\n&lt;style scoped&gt;\nh1 {\n  color: blue;\n}\np {\n  font-size: 18px;\n}\n&lt;/style&gt;\n</code></pre> <p>\ud83e\ude81 C\u00f3mo Registrar y Usar un Componente</p> <p>Un componente se registra localmente cuando se usa solo dentro de un componente espec\u00edfico.</p> <pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;MiComponente /&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport MiComponente from \"./MiComponente.vue\"; // Importamos el componente\n\nexport default {\n  components: {\n    MiComponente, // que no se os olvide definir el componente en vuestro script\n  },\n};\n&lt;/script&gt;\n</code></pre> <p>\ud83c\udf88 2. Registro Global</p> <p>Un componente se registra globalmente cuando quieres que est\u00e9 disponible en toda la aplicaci\u00f3n. Esto se hace en el archivo principal (<code>main.js</code>).</p> <pre><code>import Vue from \"vue\";\nimport MiComponente from \"./components/MiComponente.vue\";\n\nVue.component(\"MiComponente\", MiComponente);\n</code></pre> <p>Ahora puedes usar <code>&lt;MiComponente /&gt;</code> en cualquier lugar de tu aplicaci\u00f3n sin necesidad de importarlo en cada componente.</p>"},{"location":"4%20-%20VueJS/#propiedades-props","title":"Propiedades (<code>props</code>)","text":"<p>Los componentes permiten pasar datos desde el componente padre al hijo utilizando propiedades (<code>props</code>).</p> \ud83d\udd30Componente Padre\u2728Componente Hijo ~ <code>HijoComponente.vue</code> <pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;HijoComponente nombre=\"Juan\" /&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport HijoComponente from \"./HijoComponente.vue\";\n\nexport default {\n  components: {\n    HijoComponente,\n  },\n};\n&lt;/script&gt;\n</code></pre> <pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;h2&gt;Hola, {{ nombre }}&lt;/h2&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  props: [\"nombre\"], // Definimos la prop\n};\n&lt;/script&gt;\n</code></pre> <p>El hijo recibe el dato <code>nombre</code> desde el padre y lo utiliza dentro de su plantilla.</p>"},{"location":"4%20-%20VueJS/#eventos-personalizados","title":"Eventos Personalizados","text":"<p>Los componentes hijos pueden enviar eventos al componente padre para notificar cambios o acciones utilizando <code>$emit</code>.</p> \ud83d\udd30 Componente Padre\u2728 Componente Hijo (<code>Boton.vue</code>) <pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;Boton @eventoClic=\"manejarEvento\" /&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport Boton from \"./Boton.vue\";\n\nexport default {\n  components: {\n    Boton,\n  },\n  methods: {\n    manejarEvento(mensaje) {\n      alert(mensaje); // Muestra \"\u00a1Bot\u00f3n pulsado!\"\n    },\n  },\n};\n&lt;/script&gt;\n</code></pre> <pre><code>&lt;template&gt;\n  &lt;button @click=\"enviarEvento\"&gt;Haz clic&lt;/button&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  methods: {\n    enviarEvento() {\n      this.$emit(\"eventoClic\", \"\u00a1Bot\u00f3n pulsado!\");\n    },\n  },\n};\n&lt;/script&gt;\n</code></pre> <p>\ud83c\udf9b Comunicaci\u00f3n entre Componentes</p> <ol> <li>De Padre a Hijo: Se realiza con <code>props</code>.</li> <li>De Hijo a Padre: Se realiza con eventos personalizados y <code>$emit</code>.</li> <li>Entre Componentes Hermanos: Usando un patr\u00f3n como un bus de eventos o un estado compartido.</li> </ol> <p>\ud83d\udcaf Ejemplo Completo</p> <ul> <li>Componente Padre: Gestiona un contador.</li> <li>Componente Hijo: Botones para incrementar o decrementar el contador.</li> </ul> \ud83d\udd30Componente Padre (<code>App.vue</code>)\u2728 Componente Hijo ~ <code>Boton.vue</code> <pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;h1&gt;Contador: {{ contador }}&lt;/h1&gt;\n    &lt;Boton texto=\"Incrementar\" :accion=\"incrementar\" /&gt;\n    &lt;Boton texto=\"Decrementar\" :accion=\"decrementar\" /&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport Boton from \"./Boton.vue\";\n\nexport default {\n  components: {\n    Boton,\n  },\n  data() {\n    return {\n      contador: 0,\n    };\n  },\n  methods: {\n    incrementar() {\n      this.contador++;\n    },\n    decrementar() {\n      this.contador--;\n    },\n  },\n};\n&lt;/script&gt;\n</code></pre> <pre><code>&lt;template&gt;\n  &lt;button @click=\"accion\"&gt;{{ texto }}&lt;/button&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  props: [\"texto\", \"accion\"],\n};\n&lt;/script&gt;\n</code></pre> <p>Beneficios Clave de los Componentes</p> <ol> <li>Reutilizaci\u00f3n: Usas un componente en m\u00faltiples lugares con diferente configuraci\u00f3n.</li> <li>Separaci\u00f3n de Preocupaciones: La l\u00f3gica, la estructura y el estilo est\u00e1n contenidos en un \u00fanico archivo.</li> <li>Escalabilidad: Facilitan la construcci\u00f3n de aplicaciones complejas y mantenibles.</li> </ol>"},{"location":"4%20-%20VueJS/#componentes-dinamicos","title":"Componentes Din\u00e1micos","text":"<p>Los componentes din\u00e1micos permiten renderizar diferentes componentes en una misma ubicaci\u00f3n de forma din\u00e1mica, seg\u00fan ciertas condiciones. Esto es \u00fatil cuando necesitas alternar entre varios componentes en una misma \u00e1rea sin replicar l\u00f3gica o estructura.</p> <p>La Directiva <code>is</code></p> <p>En Vue.js, se usa el atributo especial <code>is</code> en una etiqueta <code>&lt;component&gt;</code> para renderizar un componente din\u00e1mico.</p> <pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;h1&gt;Componente Din\u00e1mico&lt;/h1&gt;\n    &lt;button @click=\"componenteActual = 'ComponenteA'\"&gt;Mostrar A&lt;/button&gt;\n    &lt;button @click=\"componenteActual = 'ComponenteB'\"&gt;Mostrar B&lt;/button&gt;\n\n    &lt;component :is=\"componenteActual\"&gt;&lt;/component&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport ComponenteA from './ComponenteA.vue';\nimport ComponenteB from './ComponenteB.vue';\n\nexport default {\n  components: {\n    ComponenteA,\n    ComponenteB,\n  },\n  data() {\n    return {\n      componenteActual: 'ComponenteA', // Componente inicial\n    };\n  },\n};\n&lt;/script&gt;\n</code></pre> <p>\ud83d\udcab Explicaci\u00f3n</p> <ul> <li>La etiqueta <code>&lt;component&gt;</code> renderiza un componente seg\u00fan el valor de <code>componenteActual</code>.</li> <li>Los botones permiten cambiar el valor de <code>componenteActual</code> y, por tanto, el componente que se muestra.</li> </ul>"},{"location":"4%20-%20VueJS/#componentes-anidados","title":"Componentes Anidados","text":"<p>Los componentes anidados son aquellos que est\u00e1n contenidos dentro de otros componentes. Esto permite crear estructuras jer\u00e1rquicas en las interfaces de usuario.</p> <p>\ud83d\udca2 Ejemplo B\u00e1sico de Componentes Anidados</p> <p>Supongamos que estamos construyendo un sistema de comentarios. Un componente padre mostrar\u00e1 una lista de comentarios, y cada componente hijo representar\u00e1 un comentario individual.</p> \u2728 Componente Hijo: <code>Comentario.vue</code>\ud83d\udd30Componente Padre: <code>ListaComentarios.vue</code> <pre><code>&lt;template&gt;\n  &lt;div class=\"comentario\"&gt;\n    &lt;h3&gt;{{ autor }}&lt;/h3&gt;\n    &lt;p&gt;{{ mensaje }}&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  props: {\n    autor: String,\n    mensaje: String,\n  },\n};\n&lt;/script&gt;\n\n&lt;style scoped&gt;\n.comentario {\n  margin-bottom: 20px;\n  padding: 10px;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n}\n&lt;/style&gt;\n</code></pre> <pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;h1&gt;Lista de Comentarios&lt;/h1&gt;\n    &lt;Comentario\n      v-for=\"(comentario, index) in comentarios\"\n      :key=\"index\"\n      :autor=\"comentario.autor\"\n      :mensaje=\"comentario.mensaje\"\n    /&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport Comentario from './Comentario.vue';\n\nexport default {\n  components: {\n    Comentario,\n  },\n  data() {\n    return {\n      comentarios: [\n        { autor: 'Ana', mensaje: '\u00a1Me encanta este art\u00edculo!' },\n        { autor: 'Carlos', mensaje: '\u00a1Muy interesante!' },\n        { autor: 'Luisa', mensaje: 'Gracias por compartir esta informaci\u00f3n.' },\n      ],\n    };\n  },\n};\n&lt;/script&gt;\n</code></pre> <p>\ud83e\uddd9\u200d\u2642\ufe0f Ejemplo Avanzado: Comunicaci\u00f3n en Componentes Anidados</p> <ul> <li>Un componente padre que contiene una lista de tareas.</li> <li>Cada tarea es representada por un componente hijo.</li> <li>El hijo puede emitir un evento al padre, por ejemplo, para eliminar la tarea.</li> </ul> \u2728Componente Hijo: <code>Tarea.vue</code>\ud83d\udd30Componente Padre: <code>ListaTareas.vue</code> <pre><code>&lt;template&gt;\n  &lt;div class=\"tarea\"&gt;\n    &lt;p&gt;{{ titulo }}&lt;/p&gt;\n    &lt;button @click=\"$emit('eliminar')\"&gt;Eliminar&lt;/button&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  props: {\n    titulo: String,\n  },\n};\n&lt;/script&gt;\n\n&lt;style scoped&gt;\n.tarea {\n  display: flex;\n  justify-content: space-between;\n  padding: 10px;\n  margin-bottom: 10px;\n  border: 1px solid #ddd;\n  border-radius: 5px;\n}\n&lt;/style&gt;\n</code></pre> <pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;h1&gt;Mis Tareas&lt;/h1&gt;\n    &lt;Tarea\n      v-for=\"(tarea, index) in tareas\"\n      :key=\"index\"\n      :titulo=\"tarea\"\n      @eliminar=\"eliminarTarea(index)\"\n    /&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport Tarea from './Tarea.vue';\n\nexport default {\n  components: {\n    Tarea,\n  },\n  data() {\n    return {\n      tareas: ['Comprar pan', 'Hacer ejercicio', 'Estudiar Vue.js'],\n    };\n  },\n  methods: {\n    eliminarTarea(index) {\n      this.tareas.splice(index, 1);\n    },\n  },\n};\n&lt;/script&gt;\n</code></pre>"},{"location":"4%20-%20VueJS/#componentes-anidados-dinamicos","title":"Componentes Anidados Din\u00e1micos","text":"<p>Se pueden combinar componentes din\u00e1micos y componentes anidados para crear aplicaciones m\u00e1s complejas. Por ejemplo, un componente padre puede decidir qu\u00e9 tipo de componente hijo mostrar basado en los datos.</p> <p>\ud83d\udca5 Ejemplo, un sistema de notificaciones con diferentes tipos de notificaciones:</p> <ul> <li>\u00c9xito</li> <li>Error</li> <li>Advertencia</li> </ul> Componente Hijo: <code>Notificacion.vue</code>Componente Padre <pre><code>&lt;template&gt;\n  &lt;div :class=\"['notificacion', tipo]\"&gt;\n    &lt;slot&gt;&lt;/slot&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  props: {\n    tipo: {\n      type: String,\n      default: 'info',\n    },\n  },\n};\n&lt;/script&gt;\n\n&lt;style scoped&gt;\n.notificacion {\n  padding: 10px;\n  border-radius: 5px;\n  margin-bottom: 10px;\n}\n.notificacion.exito {\n  background-color: #d4edda;\n  color: #155724;\n}\n.notificacion.error {\n  background-color: #f8d7da;\n  color: #721c24;\n}\n.notificacion.advertencia {\n  background-color: #fff3cd;\n  color: #856404;\n}\n&lt;/style&gt;\n</code></pre> <pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;h1&gt;Sistema de Notificaciones&lt;/h1&gt;\n    &lt;component :is=\"componenteActual\"&gt;\n      &lt;Notificacion tipo=\"exito\"&gt;\u00a1Operaci\u00f3n exitosa!&lt;/Notificacion&gt;\n      &lt;Notificacion tipo=\"error\"&gt;Algo sali\u00f3 mal.&lt;/Notificacion&gt;\n      &lt;Notificacion tipo=\"advertencia\"&gt;Cuidado con este cambio.&lt;/Notificacion&gt;\n    &lt;/component&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport Notificacion from './Notificacion.vue';\n\nexport default {\n  components: {\n    Notificacion,\n  },\n  data() {\n    return {\n      componenteActual: 'Notificacion',\n    };\n  },\n};\n&lt;/script&gt;\n</code></pre>"},{"location":"4%20-%20VueJS/#router","title":"\ud83d\udee3\ufe0f Router","text":"<p>Vue Router es una soluci\u00f3n de enrutamiento que permite a los desarrolladores definir y gestionar las rutas (URLs) de su aplicaci\u00f3n. Proporciona una forma declarativa de conectar rutas espec\u00edficas con componentes de Vue, permitiendo que los usuarios naveguen entre diferentes vistas sin recargar la p\u00e1gina completa.</p> <p>En una SPA (Simple Page Application), todo el contenido de la aplicaci\u00f3n se carga inicialmente, y el router se encarga de actualizar din\u00e1micamente la vista seg\u00fan la URL actual, proporcionando una experiencia fluida y r\u00e1pida similar a la de una aplicaci\u00f3n nativa.</p>"},{"location":"4%20-%20VueJS/#instalacion-de-vue-router","title":"Instalaci\u00f3n de Vue Router","text":"<p>Lo primero que tenemos que hacer es instalar el <code>Router</code> en nuestro proyecto de la siguiente manera:</p> <pre><code>npm install vue-router\n</code></pre> <p>Ten en cuenta que...</p> <p>... puedes instalar el router de manera GLOBAL para usarlo en todos los proyectos de vue que tengas en tu ordenador, para ello puedes lanzar el siguiente comando:</p> <p>\ud83d\udc49\ud83c\udffb npm install -g vue-router \ud83d\udc48\ud83c\udffb</p> <p>y as\u00ed no tendr\u00e1s que instalar el router cada vez que crees un proyecto nuevo.</p>"},{"location":"4%20-%20VueJS/#anadir-el-router-a-un-proyecto-ya-existente","title":"A\u00f1adir el Router a un proyecto \u2b55 ya existente \u2b55","text":"<p>Cuando creamos los primeros proyectos en VueJS, elegimos ciertos paquetes de base que se iban a instalar en nuestro sistema.</p> <p>A la hora de hacer npm create vue@latest la consola nos hac\u00eda una serie de preguntas relacionadas con las dependencias de nuestro proyecto de Vue, pero si os acrod\u00e1is, le dijimos a todo que no... en esa lista estaba inclu\u00eddo el Router de Vue.</p> <p> </p> <p>Pero no pasa nada, podemos instalar cualquier paquete despu\u00e9s de haber creado el proyeto de Vue.</p> <p>\ud83d\udca1 Lo \u00fanico que hay que tener en cuenta es, a\u00f1adir ese paquete (en este caso el Router de Vue) a nuestro proyecto ya existente.</p> <p>1. Modificamos el archivo main.js para que importe el paquete</p> <p>Debemos decirle a nuestro archivo maestro main.js que cargue el nuevo paquete que hemos instalado, en este caso, el Router.</p> <pre><code>// A\u00f1adimos esta l\u00ednea por el principio de nuestro archivo\nimport { createRouter, createWebHistory } from 'vue-router';\n</code></pre> <p>2. Importando los componentes que van a hacer de vistas en nuestro proyecto, es decir, las secciones</p> <pre><code>// Vamos a crear 3 secciones diferentes en este ejemplo\n\n/* La secci\u00f3n \ud83c\udfe0 Home:\n   que ser\u00e1 nuestra vista principal, como si de index.html se tratase */\nimport Home from './components/Home.vue';\n\n/* La secci\u00f3n \u2139\ufe0f About\n   que nos renderizar\u00e1 la t\u00edpica secci\u00f3n con informaci\u00f3n del sitio */\nimport About from './components/About.vue';\n\n/* La secci\u00f3n \ud83d\udcda Contact\n   que puede mostrar un formulario de contacto */\nimport Contact from './components/Contact.vue';\n</code></pre> <p>3. Definiendo las rutas de nuestro sitio y creando el historial</p> <p>En este paso debemos decirle a nuestra aplicaci\u00f3n d\u00f3nde se encuentrar las rutas que hemos establecido m\u00e1s arriba y qu\u00e9 componente de <code>vue</code> est\u00e1 asignado a cada una de ellas.</p> <pre><code>const router = createRouter ({\n    // Aqu\u00ed instanciamos a \ud83e\udded createWebHistory para crear el historial navegable a trav\u00e9s del navegador\n    history: createWebHistory(),\n\n    // Aqu\u00ed definimos las rutas, con un array de objetos.\n    routes: [\n        // El \ud83d\udee3\ufe0f path hace referencia a la url que debemos escribir en el navegador\n        // El \ud83d\udce6 component... bueno, no creo que necesite presentaci\u00f3n, lo hemos declarado antes \ud83d\udc46\ud83c\udffb\n        { path: '/', component: Home },\n        { path: '/about', component: About },\n        { path: '/contact', component: Contact }\n    ]\n})\n</code></pre> <p>4. Instanciando todo</p> <p>Ahora solo queda modificar la instancia de createApp que ten\u00edamos y lo sustituimos por estas l\u00edneas:</p> <pre><code>// 1. Crea la instancia de la aplicaci\u00f3n a partir del componente ra\u00edz (App).\n// 2. Registra el plugin Vue Router para gestionar las rutas de la aplicaci\u00f3n.\n// 3. Monta la aplicaci\u00f3n en el elemento del DOM con el id \"app\".\n\ncreateApp(App)\n    .use(router)\n    .mount('#app');\n</code></pre> <p>\ud83e\uddf0 main.js &gt;&gt; Ejemplo completo</p> <pre><code>import './assets/main.css'\nimport { createRouter, createWebHistory } from 'vue-router'\nimport { createApp } from 'vue'\nimport App from './App.vue'\n\nimport Home from './components/Home.vue';\nimport About from './components/About.vue';\nimport Contact from './components/Contact.vue';\n\nconst router = createRouter ({\n    history: createWebHistory(),\n    routes: [\n        { path: '/', component: Home },\n        { path: '/about', component: About },\n        { path: '/contact', component: Contact }\n    ]\n})\n\ncreateApp(App)\n    .use(router)\n    .mount('#app');\n\n// Otra forma de instanciarlo todo \ud83d\udc47\ud83c\udffb\n    // const app = createApp(App);\n    // app.use(router);\n    // app.mount('#app');\n</code></pre>"},{"location":"4%20-%20VueJS/#utilizando-el-router","title":"Utilizando el Router","text":"<p>Ahora que ya hemos preparado las dependencias y acuatlizado nuestro archivo \ud83d\udfe1 main.js \ud83d\udfe1 ya estamos listos para utilizarlo en nuestros archivos .vue</p> <p>Recomendaci\u00f3n sobre App.vue</p> <p>Hemos hecho uso de nuestro App.vue como archivo index.html, es decir, hemos creado la vista principal dentro de App.vue pero es recomendable crear un archivo <code>.vue</code> a parte donde carguemos la p\u00e1gina principal, como por ejemplo en \ud83d\udd30Home.vue\ud83d\udd30 o cualquier otro nombre que haga referencia a la secci\u00f3n principal de nuestra web</p> <p>A continuaci\u00f3n, haremos uso del componente \ud83d\udfearouter-view\ud83d\udfea (tambi\u00e9n conocido como <code>&lt;RouterView&gt;</code>) que viene por defecto con el router para poder decirle a nuestro sistema que debe cargar las rutas que hemos a\u00f1adido en nuestro archivo main.js. </p> <p>Cambiaremos las l\u00edneas de nuestro archivo <code>App.vue</code> para que quede lo m\u00e1s limpio posible.</p> <pre><code>&lt;!-- No necesitamos nada m\u00e1s --&gt;\n&lt;template&gt;\n    &lt;RouterView /&gt;\n    &lt;!-- &lt;router-view&gt;&lt;/router-view&gt; --&gt;\n    &lt;!-- &lt;router-view /&gt; --&gt;\n&lt;/template&gt;\n&lt;!-- \u26d4 FIN del archivo --&gt;\n</code></pre> <p>Ya tenemos listo nuestro enrutamiento, ahora solo falta crear los enlaces en nuestra app. Podemos hacer uso de los enlaces en cualquier componente.</p> <p>Vamos a crear un archivo de vue llamado <code>Header.vue</code> donde pongamos una navegaci\u00f3n por todos los enlaces del router que hemos creado y los distintos componentes que carguen el contenido correspondiente.</p> \ud83c\udfd8\ufe0f Home.vue\ud83d\udd30 Header.vue\u2139\ufe0f About.vue\ud83d\udcda Contact.vue <pre><code>&lt;script&gt;\n    import Header from './Header.vue';\n\n    export default {\n        components: {\n            Header\n        }\n    }\n&lt;/script&gt;\n\n&lt;template&gt;\n    &lt;div&gt;\n        &lt;Header /&gt;\n        &lt;h1&gt;\n            \ud83c\udfd8\ufe0f Est\u00e1s en Home\n        &lt;/h1&gt;\n    &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;style&gt;&lt;/style&gt;\n</code></pre> <pre><code>&lt;template&gt;\n    &lt;nav&gt;\n        &lt;router-link to=\"/\"&gt;Home&lt;/router-link&gt;\n        &lt;router-link to=\"/about\"&gt;About&lt;/router-link&gt;\n        &lt;router-link to=\"/contact\"&gt;Contact&lt;/router-link&gt;\n    &lt;/nav&gt;\n&lt;/template&gt;\n</code></pre> <pre><code>&lt;template&gt;\n    &lt;h1&gt;\n        \u2139\ufe0f Est\u00e1s en About\n    &lt;/h1&gt;\n&lt;/template&gt;\n\n&lt;script&gt;&lt;/script&gt;\n\n&lt;style&gt;&lt;/style&gt;\n</code></pre> <pre><code>&lt;template&gt;\n    &lt;h1&gt;\n        \ud83d\udcda Est\u00e1s en Contacto\n    &lt;/h1&gt;\n&lt;/template&gt;\n\n&lt;script&gt;&lt;/script&gt;\n\n&lt;style&gt;&lt;/style&gt;\n</code></pre>"},{"location":"4%20-%20VueJS/#rutas-dinamicas","title":"Rutas din\u00e1micas","text":"<p>En Vue Router, las rutas din\u00e1micas son aquellas que incluyen par\u00e1metros variables en su URL, lo que permite manejar datos espec\u00edficos en las vistas. Estas rutas son \u00fatiles para aplicaciones donde necesitas mostrar contenido basado en un identificador \u00fanico, como un blog, una tienda en l\u00ednea o un sistema de usuarios.</p> <p>Ejemplo b\u00e1sico \u27a1\ufe0f Una ruta din\u00e1mica puede definirse con un par\u00e1metro en la URL, precedido por dos puntos (:). Por ejemplo, para mostrar un post espec\u00edfico:</p> \ud83d\udfe1 main.js <pre><code>const routes = [\n  { path: '/post/:id', component: PostComponent },\n];\n</code></pre> <p>Info</p> <p>En este caso, :id es un par\u00e1metro din\u00e1mico que puede cambiar seg\u00fan el post que quieras mostrar (por ejemplo, /post/123 o /post/456).</p> <p>\ud83e\udd39\ud83c\udffb\u200d\u2642\ufe0f Acceso al par\u00e1metro din\u00e1mico ~ Dentro del componente asociado a la ruta, puedes acceder al valor del par\u00e1metro din\u00e1mico usando $route.params</p> \ud83d\udd30 Post.vue <pre><code>export default {\n  computed: {\n    postId() {\n      return this.$route.params.id; // Obtiene el valor de 'id' desde la URL\n    },\n  },\n};\n</code></pre> <p>Ventajas de las rutas din\u00e1micas</p> <p>\ud83d\ude46\ud83c\udffb Flexibilidad: Permiten manejar m\u00faltiples datos con un solo componente. \u26a1 Reactividad: Los par\u00e1metros cambian autom\u00e1ticamente cuando la URL cambia. \ud83d\uddc3\ufe0f Organizaci\u00f3n: Facilitan estructurar aplicaciones complejas con rutas reutilizables.</p> <p>Si defines una ruta como /post/:id y navegas a /post/123, el componente asociado podr\u00e1 mostrar informaci\u00f3n basada en el id proporcionado, como \"Post 123\".</p> <p>Las rutas din\u00e1micas son una pieza clave para construir aplicaciones web modernas y escalables en Vue.</p>"},{"location":"4%20-%20VueJS/#propiedades-computadas","title":"\ud83c\udf92 Propiedades computadas","text":"<p>Las propiedades computadas son una de las caracter\u00edsticas m\u00e1s potentes de Vue.js. Se utilizan para definir l\u00f3gica que depende de los datos de tu componente y se actualizan autom\u00e1ticamente cuando esos datos cambian. Esto permite mantener tu c\u00f3digo m\u00e1s limpio y evitar duplicaci\u00f3n.</p> <p>\u2753 \u00bfQu\u00e9 son las propiedades computadas?</p> <p>Son funciones que se declaran en la secci\u00f3n <code>computed</code> de un componente Vue. Estas funciones act\u00faan como propiedades que puedes usar en tu plantilla, pero a diferencia de las propiedades normales, est\u00e1n basadas en otros datos reactivos y se recalculan autom\u00e1ticamente cuando esos datos cambian.</p>"},{"location":"4%20-%20VueJS/#ventajas-de-las-propiedades-computadas","title":"Ventajas de las Propiedades Computadas","text":"<ol> <li>Cacheadas Autom\u00e1ticamente: Una propiedad computada solo se recalcula cuando cambian los datos en los que depende. Si no hay cambios, Vue reutiliza el resultado anterior, lo que mejora el rendimiento.</li> <li>Separaci\u00f3n de L\u00f3gica: Ayudan a mantener la l\u00f3gica separada de la plantilla, haciendo el c\u00f3digo m\u00e1s legible y f\u00e1cil de mantener.</li> <li>Reactivas: Se actualizan autom\u00e1ticamente cuando cambian los datos reactivos.</li> </ol> <p>Ejemplo B\u00e1sico</p> <p>Supongamos que tienes un componente donde almacenas el nombre y el apellido de un usuario, pero quieres mostrar el nombre completo.</p> <pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;p&gt;Nombre: {{ nombre }}&lt;/p&gt;\n    &lt;p&gt;Apellido: {{ apellido }}&lt;/p&gt;\n    &lt;p&gt;Nombre Completo: {{ nombreCompleto }}&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  data() {\n    return {\n      nombre: 'Juan',\n      apellido: 'P\u00e9rez',\n    };\n  },\n  computed: {\n    nombreCompleto() {\n      return `${this.nombre} ${this.apellido}`;\n    },\n  },\n};\n&lt;/script&gt;\n</code></pre> <p>Explicaci\u00f3n</p> <ul> <li><code>nombreCompleto</code> es una propiedad computada que combina <code>nombre</code> y <code>apellido</code>.</li> <li>Si cambias <code>nombre</code> o <code>apellido</code>, <code>nombreCompleto</code> se recalcula autom\u00e1ticamente.</li> </ul> <p>Ejemplo con Dependencias</p> <p>Las propiedades computadas pueden depender de m\u00faltiples datos reactivos.</p> <pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;p&gt;Precio Unitario: {{ precio }}&lt;/p&gt;\n    &lt;p&gt;Cantidad: {{ cantidad }}&lt;/p&gt;\n    &lt;p&gt;Total: {{ total }}&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  data() {\n    return {\n      precio: 10,\n      cantidad: 3,\n    };\n  },\n  computed: {\n    total() {\n      return this.precio * this.cantidad;\n    },\n  },\n};\n&lt;/script&gt;\n</code></pre>"},{"location":"4%20-%20VueJS/#propiedades-computadas-metodos","title":"Propiedades Computadas \ud83c\udd9a M\u00e9todos","text":"<p>A veces, podr\u00edas pensar que un m\u00e9todo puede hacer lo mismo que una propiedad computada. Sin embargo, hay diferencias importantes:</p> <p>Propiedad Computada</p> <ul> <li>Es cacheada.</li> <li>Solo se recalcula cuando cambian los datos en los que depende.</li> </ul> <p>M\u00e9todo\"</p> <ul> <li>No es cacheado.</li> <li>Se ejecuta cada vez que se invoca, incluso si los datos no han cambiado.</li> </ul> <p>\u26a1 Ejemplo Comparativo</p> <pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;p&gt;Propiedad Computada: {{ propiedadComputada }}&lt;/p&gt;\n    &lt;p&gt;M\u00e9todo: {{ metodo() }}&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  data() {\n    return {\n      numero: 5,\n    };\n  },\n  computed: {\n    propiedadComputada() {\n      console.log('Recalculando propiedad computada');\n      return this.numero * 2;\n    },\n  },\n  methods: {\n    metodo() {\n      console.log('Ejecutando m\u00e9todo');\n      return this.numero * 2;\n    },\n  },\n};\n&lt;/script&gt;\n</code></pre> <p>Note</p> <ul> <li>La propiedad computada solo recalcula si <code>numero</code> cambia.</li> <li>El m\u00e9todo se ejecuta cada vez que se llama, incluso si <code>numero</code> no ha cambiado.</li> </ul>"},{"location":"4%20-%20VueJS/#propiedades-computadas-con-get-y-set","title":"Propiedades Computadas con <code>get</code> y <code>set</code>","text":"<p>Las propiedades computadas tambi\u00e9n pueden tener un setter para permitir escribir valores en ellas.</p> <pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;p&gt;Nombre Completo: {{ nombreCompleto }}&lt;/p&gt;\n    &lt;input v-model=\"nombreCompleto\" /&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  data() {\n    return {\n      nombre: 'Juan',\n      apellido: 'P\u00e9rez',\n    };\n  },\n  computed: {\n    nombreCompleto: {\n      get() {\n        return `${this.nombre} ${this.apellido}`;\n      },\n      set(valor) {\n        const partes = valor.split(' ');\n        this.nombre = partes[0];\n        this.apellido = partes[1] || '';\n      },\n    },\n  },\n};\n&lt;/script&gt;\n</code></pre> <p>Explicaci\u00f3n</p> <ul> <li>Cuando escribes en el campo de texto, el <code>setter</code> actualiza las propiedades <code>nombre</code> y <code>apellido</code>.</li> <li>Esto permite usar propiedades computadas con dos v\u00edas de enlace (<code>v-model</code>).</li> </ul>"}]}